--------------------------------------------------------------------------------
Profile data file 'xtmemory.0.kcg' (creator: xtree-1)
--------------------------------------------------------------------------------
Profiled target:  ./bin/StitchBlobs --in_list ./test/ERA5_AR_test/ERA5_AR_files_short.txt --out_list ./test/ERA5_AR_test/ERA5_AR_SB_files_short.txt --min_overlap_prev 25.0 --max_overlap_prev 100.0 --min_overlap_next 25.0 --max_overlap_next 100.0 --latname latitude --lonname longitude --var AR_binary_tag (PID 1578162)
Events recorded:  curB curBk totB totBk totFdB totFdBk
Events shown:     curB curBk totB totBk totFdB totFdBk
Event sort order: curB curBk totB totBk totFdB totFdBk
Thresholds:       100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
curB             curBk          totB                    totBk                totFdB                  totFdBk              
--------------------------------------------------------------------------------
118,231 (100.0%) 1,255 (100.0%) 31,684,665,492 (100.0%) 396,769,345 (100.0%) 31,684,547,261 (100.0%) 396,768,090 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
curB             curBk          totB                    totBk                totFdB                  totFdBk                 file:function
--------------------------------------------------------------------------------
118,231 (100.0%) 1,255 (100.0%) 26,660,577,996 (84.14%) 282,935,075 (71.31%) 24,738,211,582 (78.08%)   234,785,431 (59.17%)  src/blobs/StitchBlobs.cpp:main
105,199 (88.98%)   616 (49.08%)     24,071,453 ( 0.08%)         837 ( 0.00%)         45,714 ( 0.00%)           115 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core-init-finalize.c:PMPI_Init
105,199 (88.98%)   616 (49.08%)      6,227,230 ( 0.02%)         752 ( 0.00%)         40,118 ( 0.00%)            87 ( 0.00%)  UnknownFile???:MPIR_Init_thread
105,199 (88.98%)   616 (49.08%)      6,223,134 ( 0.02%)         751 ( 0.00%)         40,118 ( 0.00%)            87 ( 0.00%)  UnknownFile???:PMPI_Init
 96,319 (81.47%)   609 (48.53%)        125,175 ( 0.00%)         641 ( 0.00%)         28,856 ( 0.00%)            32 ( 0.00%)  UnknownFile???:MPIR_T_env_init
 96,223 (81.39%)   605 (48.21%)        124,607 ( 0.00%)         636 ( 0.00%)         28,384 ( 0.00%)            31 ( 0.00%)  UnknownFile???:MPIR_T_cvar_init
 88,843 (75.14%)   436 (34.74%)        115,659 ( 0.00%)         454 ( 0.00%)         21,824 ( 0.00%)             5 ( 0.00%)  UnknownFile???:MPIR_T_CVAR_REGISTER_impl
 53,175 (44.98%)   350 (27.89%)        398,471 ( 0.00%)      10,656 ( 0.00%)              0                      0           UnknownFile???:strdup
 10,900 ( 9.22%)   538 (42.87%)      1,226,293 ( 0.00%)      48,260 ( 0.01%)      1,215,393 ( 0.00%)        47,722 ( 0.01%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get_att(char const*) const
  8,880 ( 7.51%)     7 ( 0.56%)      6,101,463 ( 0.02%)          96 ( 0.00%)         11,102 ( 0.00%)            45 ( 0.00%)  UnknownFile???:MPID_Init
  8,032 ( 6.79%)     3 ( 0.24%)      5,546,133 ( 0.02%)          21 ( 0.00%)              0                      0           UnknownFile???:MPIDI_SHMI_mpi_init_hook
  8,032 ( 6.79%)     3 ( 0.24%)          8,032 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:MPIDI_CRAY_XPMEM_mpi_init_hook
  6,912 ( 5.85%)   336 (26.77%)      2,092,080 ( 0.01%)       4,440 ( 0.00%)        512,448 ( 0.00%)         3,384 ( 0.00%)  src/blobs/BlobUtilities.h:PrepareBlobOutputVar(NcFile&, NcFile&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, SimpleGrid const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, NcType, NcDim*, NcDim**, NcDim**, NcVar**)
  6,912 ( 5.85%)   336 (26.77%)      1,597,920 ( 0.01%)       6,385 ( 0.00%)        547,440 ( 0.00%)         4,512 ( 0.00%)  src/base/NetCDFUtilities.cpp:CopyNcVar(NcFile&, NcFile&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool)
  6,912 ( 5.85%)   336 (26.77%)      1,585,656 ( 0.01%)       5,808 ( 0.00%)        536,376 ( 0.00%)         4,032 ( 0.00%)  src/base/NetCDFUtilities.cpp:CopyNcVarIfExists(NcFile&, NcFile&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool)
  6,912 ( 5.85%)   336 (26.77%)        103,440 ( 0.00%)       5,040 ( 0.00%)         80,016 ( 0.00%)         3,864 ( 0.00%)  src/base/NetCDFUtilities.cpp:CopyNcVarAttributes(NcVar*, NcVar*)
  6,912 ( 5.85%)   336 (26.77%)         15,624 ( 0.00%)         840 ( 0.00%)          8,712 ( 0.00%)           504 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get_att(int) const
  6,127 ( 5.18%)   129 (10.28%)          7,087 ( 0.00%)         131 ( 0.00%)            960 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIR_T_cat_add_desc
  6,050 ( 5.12%)   300 (23.90%)     39,513,261 ( 0.12%)      16,370 ( 0.00%)      4,595,135 ( 0.01%)        13,428 ( 0.00%)  src/base/NcFileVector.cpp:NcFileVector::InsertFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, long)
  6,050 ( 5.12%)   300 (23.90%)     39,455,145 ( 0.12%)      14,955 ( 0.00%)      3,929,653 ( 0.01%)        11,072 ( 0.00%)  src/base/NcFileVector.cpp:NcFileVector::ParseFromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)
  6,050 ( 5.12%)   300 (23.90%)        553,312 ( 0.00%)       9,698 ( 0.00%)        624,154 ( 0.00%)        10,296 ( 0.00%)  src/base/NetCDFUtilities.cpp:ReadCFTimeDataFromNcFile(NcFile*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, NcTimeDimension&, bool)
  5,224 ( 4.42%)   113 ( 9.00%)          6,184 ( 0.00%)         115 ( 0.00%)            960 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIR_T_cat_create
  2,292 ( 1.94%)   269 (21.43%)        146,068 ( 0.00%)      12,065 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::NcAtt(NcFile*, NcVar const*, char const*)
  2,132 ( 1.80%)   101 ( 8.05%)         24,780 ( 0.00%)       1,313 ( 0.00%)         22,648 ( 0.00%)         1,212 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcTypedComponent::as_string(long) const
  2,132 ( 1.80%)   101 ( 8.05%)          2,132 ( 0.00%)         101 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/ncvalues.cpp:NcValues_char::as_string(long) const
  1,080 ( 0.91%)    15 ( 1.20%)          1,688 ( 0.00%)          26 ( 0.00%)            608 ( 0.00%)            11 ( 0.00%)  UnknownFile???:MPIR_T_cat_add_cvar
    472 ( 0.40%)     1 ( 0.08%)         32,096 ( 0.00%)          68 ( 0.00%)          4,248 ( 0.00%)             9 ( 0.00%)  UnknownFile???:__fopen_internal
    472 ( 0.40%)     1 ( 0.08%)          4,572 ( 0.00%)           3 ( 0.00%)              4 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDI_CRAY_init
    472 ( 0.40%)     1 ( 0.08%)          4,568 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIDI_CRAY_check_transparent_hp_status
    376 ( 0.32%)     3 ( 0.24%)          7,831 ( 0.00%)          38 ( 0.00%)          6,255 ( 0.00%)            27 ( 0.00%)  UnknownFile???:MPIR_pmi_init
    376 ( 0.32%)     3 ( 0.24%)          6,795 ( 0.00%)          34 ( 0.00%)          6,255 ( 0.00%)            27 ( 0.00%)  /home/jenkins/src/api/pmi2/pmi2_init.c:PMI2_Init
    336 ( 0.28%)     1 ( 0.08%)            364 ( 0.00%)           3 ( 0.00%)             28 ( 0.00%)             2 ( 0.00%)  /home/jenkins/src/pmi_core/_pmi_init.c:_pmi_kvs_init
    336 ( 0.28%)     1 ( 0.08%)            336 ( 0.00%)           1 ( 0.00%)              0                      0           /home/jenkins/src/pmi_core/_pmi_kvs.c:_pmi2_create_pg
     40 ( 0.03%)     2 ( 0.16%)          6,431 ( 0.00%)          31 ( 0.00%)          6,227 ( 0.00%)            25 ( 0.00%)  /home/jenkins/src/pmi_core/_pmi_init.c:_pmi_init
     40 ( 0.03%)     2 ( 0.16%)             40 ( 0.00%)           2 ( 0.00%)              0                      0           /home/jenkins/src/pmi_core/smp_barrier.c:_pmi_smp_barrier_init
     24 ( 0.02%)     1 ( 0.08%)             24 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:MPL_trmalloc
     24 ( 0.02%)     1 ( 0.08%)             24 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:trmalloc
      0              0          25,318,089,280 (79.91%) 632,952,232 (159.5%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<false, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int>*, std::_Rb_tree_node_base*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)
      0              0          15,725,444,160 (49.63%) 393,136,104 (99.08%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_get_node()
      0              0          15,725,444,160 (49.63%) 393,136,104 (99.08%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<int> >::allocate(unsigned long, void const*)
      0              0          15,725,444,160 (49.63%) 393,136,104 (99.08%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node::operator()<int const&>(int const&) const
      0              0          15,725,444,160 (49.63%) 393,136,104 (99.08%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_create_node<int const&>(int const&)
      0              0          15,181,908,116 (47.92%)     154,973 ( 0.04%) 15,192,889,668 (47.95%)       201,755 ( 0.05%)  src/base/Variable.cpp:Variable::LoadGridData(VariableRegistry&, NcFileVector const&, SimpleGrid const&)
      0              0          12,143,255,040 (38.33%)       2,924 ( 0.00%) 12,139,102,080 (38.31%)         2,923 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<float>::Allocate(unsigned long)
      0              0          11,176,378,080 (35.27%) 279,409,452 (70.42%)              0                      0           /usr/include/c++/13/bits/stl_set.h:std::set<int, std::less<int>, std::allocator<int> >::insert(int const&)
      0              0          11,176,378,080 (35.27%) 279,409,452 (70.42%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_iterator<int> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_<int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, int const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)
      0              0          11,176,378,080 (35.27%) 279,409,452 (70.42%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<int>, bool> std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique<int const&>(int const&)
      0              0           4,549,066,080 (14.36%) 113,726,652 (28.66%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_clone_node<false, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree_node<int>*, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)
      0              0           3,437,773,808 (10.85%)      45,298 ( 0.01%)  3,037,913,664 ( 9.59%)        44,860 ( 0.01%)  UnknownFile???:NC4_get_vars
      0              0           3,437,748,264 (10.85%)      45,278 ( 0.01%)  3,037,913,664 ( 9.59%)        44,860 ( 0.01%)  UnknownFile???:NC4_get_vara
      0              0           3,037,920,168 ( 9.59%)      44,867 ( 0.01%)  3,037,913,664 ( 9.59%)        44,860 ( 0.01%)  UnknownFile???:NC_get_vara
      0              0           3,037,848,864 ( 9.59%)      43,860 ( 0.01%)  3,037,825,472 ( 9.59%)        38,012 ( 0.01%)  UnknownFile???:nc_get_vara_float
      0              0           3,037,848,864 ( 9.59%)      43,860 ( 0.01%)  3,037,825,472 ( 9.59%)        38,012 ( 0.01%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get(float*, long const*) const
      0              0           1,120,771,600 ( 3.54%)  28,019,290 ( 7.06%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<int>* std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy<false, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node>(std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> > const&, std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Alloc_node&)
      0              0             564,293,000 ( 1.78%)  14,107,325 ( 3.56%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_copy(std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> > const&)
      0              0             441,160,994 ( 1.39%)       6,939 ( 0.00%)              0                      0           UnknownFile???:H5FL__malloc
      0              0             401,183,626 ( 1.27%)         734 ( 0.00%)              0                      0           UnknownFile???:H5FL_blk_malloc
      0              0             400,355,824 ( 1.26%)         774 ( 0.00%)              0                      0           UnknownFile???:H5D__read
      0              0             400,332,016 ( 1.26%)         764 ( 0.00%)              0                      0           UnknownFile???:H5D__chunk_read
      0              0             400,298,224 ( 1.26%)         678 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_dataset_read
      0              0             400,234,864 ( 1.26%)         583 ( 0.00%)              0                      0           UnknownFile???:H5VL_dataset_read_direct
      0              0             400,234,800 ( 1.26%)         579 ( 0.00%)              0                      0           UnknownFile???:H5D__read_api_common.constprop.0
      0              0             400,061,968 ( 1.26%)       6,564 ( 0.00%)              0                      0           UnknownFile???:H5Dread
      0              0             399,845,312 ( 1.26%)         605 ( 0.00%)              0                      0           UnknownFile???:H5D__chunk_lock.constprop.0
      0              0             220,041,920 ( 0.69%)   5,501,048 ( 1.39%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_Rb_tree(std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> > const&)
      0              0              99,695,424 ( 0.31%)          74 ( 0.00%)              0                      0           src/base/DataArray1D.h:DataArray1D<int>::Allocate(unsigned long)
      0              0              99,671,040 ( 0.31%)          24 ( 0.00%)              0                      0           /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/DataArray1D.h:DataArray1D<int>::DataArray1D(unsigned long, bool)
      0              0              78,923,834 ( 0.25%)   3,114,745 ( 0.79%)     12,477,594 ( 0.04%)     2,076,500 ( 0.52%)  src/base/SimpleGrid.cpp:SimpleGrid::GenerateLatitudeLongitude(NcFile*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, bool, bool)
      0              0              78,906,256 ( 0.25%)   3,114,725 ( 0.79%)     12,458,880 ( 0.04%)     2,076,480 ( 0.52%)  src/base/SimpleGrid.cpp:SimpleGrid::GenerateLatitudeLongitude(DataArray1D<double> const&, DataArray1D<double> const&, bool, bool, bool)
      0              0              61,119,520 ( 0.19%)   1,527,988 ( 0.39%)              0                      0           /usr/include/c++/13/bits/stl_set.h:std::set<int, std::less<int>, std::allocator<int> >::set(std::set<int, std::less<int>, std::allocator<int> > const&)
      0              0              53,988,480 ( 0.17%)   3,114,721 ( 0.79%)     12,458,880 ( 0.04%)     2,076,480 ( 0.52%)  src/base/SimpleGrid.cpp:SimpleGrid::GenerateRectilinearConnectivity(int, int, bool, bool)
      0              0              42,433,027 ( 0.13%)      10,534 ( 0.00%)      4,165,143 ( 0.01%)         5,342 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::NcFile(char const*, NcFile::FileMode, unsigned long*, unsigned long, NcFile::FileFormat)
      0              0              40,719,669 ( 0.13%)         452 ( 0.00%)     58,666,591 ( 0.19%)         3,728 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_core_shutdown
      0              0              40,719,629 ( 0.13%)         447 ( 0.00%)     58,670,207 ( 0.19%)         3,719 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core-init-finalize.c:PMPI_Finalize
      0              0              39,872,640 ( 0.13%)       5,457 ( 0.00%)              0                      0           UnknownFile???:H5FL_reg_malloc
      0              0              39,265,936 ( 0.12%)       1,713 ( 0.00%)              0                      0           UnknownFile???:H5FL_reg_calloc
      0              0              39,225,627 ( 0.12%)       1,846 ( 0.00%)         47,600 ( 0.00%)           441 ( 0.00%)  UnknownFile???:H5F_open
      0              0              39,073,368 ( 0.12%)         370 ( 0.00%)          5,328 ( 0.00%)            74 ( 0.00%)  UnknownFile???:H5F__new
      0              0              39,056,032 ( 0.12%)         149 ( 0.00%)              0                      0           UnknownFile???:H5AC_create
      0              0              39,056,032 ( 0.12%)         149 ( 0.00%)              0                      0           UnknownFile???:H5C_create
      0              0              31,691,930 ( 0.10%)       6,029 ( 0.00%)      3,904,994 ( 0.01%)         2,090 ( 0.00%)  UnknownFile???:NC_open
      0              0              31,615,874 ( 0.10%)       5,095 ( 0.00%)      3,897,514 ( 0.01%)         1,636 ( 0.00%)  UnknownFile???:nc__open
      0              0              29,070,720 ( 0.09%)   3,114,720 ( 0.79%)     12,458,880 ( 0.04%)     2,076,480 ( 0.52%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int&&)
      0              0              29,070,720 ( 0.09%)   3,114,720 ( 0.79%)     12,458,880 ( 0.04%)     2,076,480 ( 0.52%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int&&)
      0              0              29,070,720 ( 0.09%)   3,114,720 ( 0.79%)     12,458,880 ( 0.04%)     2,076,480 ( 0.52%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<int, std::allocator<int> >::emplace_back<int>(int&&)
      0              0              29,070,720 ( 0.09%)   3,114,720 ( 0.79%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)
      0              0              29,070,720 ( 0.09%)   3,114,720 ( 0.79%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<int>::allocate(unsigned long, void const*)
      0              0              26,503,508 ( 0.08%)       1,149 ( 0.00%)         16,112 ( 0.00%)           201 ( 0.00%)  UnknownFile???:H5F__open_api_common
      0              0              26,501,900 ( 0.08%)       1,099 ( 0.00%)         16,112 ( 0.00%)           201 ( 0.00%)  UnknownFile???:H5Fopen
      0              0              26,474,516 ( 0.08%)       1,044 ( 0.00%)         16,112 ( 0.00%)           201 ( 0.00%)  UnknownFile???:H5VL__native_file_open
      0              0              26,474,516 ( 0.08%)       1,044 ( 0.00%)         16,112 ( 0.00%)           201 ( 0.00%)  UnknownFile???:H5VL_file_open
      0              0              26,214,400 ( 0.08%)          50 ( 0.00%)              0                      0           UnknownFile???:add_to_NCList
      0              0              25,373,352 ( 0.08%)          77 ( 0.00%)              0                      0           src/base/DataArray1D.h:DataArray1D<double>::Allocate(unsigned long)
      0              0              24,917,760 ( 0.08%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long)
      0              0              24,917,760 ( 0.08%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<int, std::allocator<int> > >::allocate(unsigned long, void const*)
      0              0              24,917,760 ( 0.08%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::resize(unsigned long)
      0              0              24,917,760 ( 0.08%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_default_append(unsigned long)
      0              0              19,752,912 ( 0.06%)      68,905 ( 0.02%)          1,024 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5I__register
      0              0              19,752,912 ( 0.06%)      68,905 ( 0.02%)          1,024 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5I_register
      0              0              18,173,170 ( 0.06%)      65,475 ( 0.02%)          3,200 ( 0.00%)           400 ( 0.00%)  UnknownFile???:H5VL__native_dataset_get
      0              0              18,173,170 ( 0.06%)      65,475 ( 0.02%)          3,200 ( 0.00%)           400 ( 0.00%)  UnknownFile???:H5VL_dataset_get
      0              0              17,852,439 ( 0.06%)          88 ( 0.00%)          9,692 ( 0.00%)            29 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_core_initialize
      0              0              17,586,320 ( 0.06%)      61,075 ( 0.02%)              0                      0           UnknownFile???:H5D__get_space
      0              0              17,586,320 ( 0.06%)      61,075 ( 0.02%)              0                      0           UnknownFile???:H5Dget_space
      0              0              16,979,187 ( 0.05%)         141 ( 0.00%)         96,356 ( 0.00%)            66 ( 0.00%)  UnknownFile???:PMPI_File_open
      0              0              16,974,011 ( 0.05%)         122 ( 0.00%)         95,903 ( 0.00%)            55 ( 0.00%)  UnknownFile???:ADIOI_CRAY_ADIO_Open
      0              0              16,813,854 ( 0.05%)         211 ( 0.00%)              0                      0           UnknownFile???:ADIOI_Malloc_fn
      0              0              14,618,400 ( 0.05%)     119,348 ( 0.03%)     14,618,304 ( 0.05%)       119,344 ( 0.03%)  UnknownFile???:HDF5_inq_dim
      0              0              14,618,400 ( 0.05%)     119,348 ( 0.03%)     14,618,304 ( 0.05%)       119,344 ( 0.03%)  UnknownFile???:find_var_dim_max_length
      0              0              14,618,400 ( 0.05%)     119,348 ( 0.03%)     14,618,304 ( 0.05%)       119,344 ( 0.03%)  UnknownFile???:nc4_find_dim_len
      0              0              14,332,800 ( 0.05%)      95,552 ( 0.02%)     14,332,800 ( 0.05%)        95,552 ( 0.02%)  UnknownFile???:nc_inq_dimlen
      0              0              14,332,800 ( 0.05%)      95,552 ( 0.02%)     14,332,800 ( 0.05%)        95,552 ( 0.02%)  src/netcdf-cxx-4.2/netcdf.cpp:NcDim::size() const
      0              0              12,745,895 ( 0.04%)         751 ( 0.00%)         31,488 ( 0.00%)           240 ( 0.00%)  UnknownFile???:H5VL__native_file_create
      0              0              12,745,791 ( 0.04%)         748 ( 0.00%)         31,488 ( 0.00%)           240 ( 0.00%)  UnknownFile???:H5VL_file_create
      0              0              12,736,816 ( 0.04%)         673 ( 0.00%)         29,088 ( 0.00%)           216 ( 0.00%)  UnknownFile???:H5F__create_api_common
      0              0              12,732,264 ( 0.04%)         647 ( 0.00%)         29,088 ( 0.00%)           216 ( 0.00%)  UnknownFile???:H5Fcreate
      0              0               8,513,480 ( 0.03%)     212,837 ( 0.05%)              0                      0           /usr/include/c++/13/bits/stl_construct.h:void std::_Construct<std::set<int, std::less<int>, std::allocator<int> >, std::set<int, std::less<int>, std::allocator<int> > const&>(std::set<int, std::less<int>, std::allocator<int> >*, std::set<int, std::less<int>, std::allocator<int> > const&)
      0              0               8,278,576 ( 0.03%)         480 ( 0.00%)      8,275,936 ( 0.03%)           426 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-lustre.c:darshan_instrument_lustre_file
      0              0               6,586,385 ( 0.02%)         255 ( 0.00%)      6,586,825 ( 0.02%)           260 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_log_append
      0              0               6,382,646 ( 0.02%)       5,786 ( 0.00%)        733,050 ( 0.00%)         7,600 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::NcVar(NcFile*, int)
      0              0               6,062,080 ( 0.02%)         740 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/netcdf.cpp:NcVar::init_cur()
      0              0               5,538,101 ( 0.02%)          18 ( 0.00%)              0                      0           UnknownFile???:MPIDI_POSIX_mpi_init_hook
      0              0               5,246,265 ( 0.02%)         225 ( 0.00%)      5,246,265 ( 0.02%)           225 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-mpiio.c:PMPI_File_write_at_all
      0              0               5,246,265 ( 0.02%)         225 ( 0.00%)      5,246,265 ( 0.02%)           225 ( 0.00%)  UnknownFile???:ADIOI_CRAY_WriteStridedColl
      0              0               5,246,265 ( 0.02%)         225 ( 0.00%)      5,246,265 ( 0.02%)           225 ( 0.00%)  UnknownFile???:MPIOI_File_write_all
      0              0               5,246,265 ( 0.02%)         225 ( 0.00%)      5,246,265 ( 0.02%)           225 ( 0.00%)  UnknownFile???:PMPI_File_write_at_all
      0              0               4,966,808 ( 0.02%)      12,868 ( 0.00%)     64,594,744 ( 0.20%)        99,986 ( 0.03%)  UnknownFile???:H5I_dec_app_ref
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)     45,203,766 ( 0.14%)         3,808 ( 0.00%)  UnknownFile???:H5F__dest
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)     45,201,050 ( 0.14%)         3,512 ( 0.00%)  UnknownFile???:H5F__close
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)     45,201,050 ( 0.14%)         3,512 ( 0.00%)  UnknownFile???:H5F_try_close
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)     45,131,802 ( 0.14%)         3,144 ( 0.00%)  UnknownFile???:H5VL__native_file_close
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)      4,863,896 ( 0.02%)           298 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:close
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)      4,863,896 ( 0.02%)           298 ( 0.00%)  UnknownFile???:H5FD__sec2_close
      0              0               4,858,944 ( 0.02%)         226 ( 0.00%)      4,863,896 ( 0.02%)           298 ( 0.00%)  UnknownFile???:H5FD_close
      0              0               4,857,744 ( 0.02%)         176 ( 0.00%)     45,019,286 ( 0.14%)         2,454 ( 0.00%)  UnknownFile???:H5VL_file_close
      0              0               4,849,744 ( 0.02%)          76 ( 0.00%)     45,018,086 ( 0.14%)         2,404 ( 0.00%)  UnknownFile???:H5F__close_cb
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_get_node()
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<Tag> >::allocate(unsigned long, void const*)
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/stl_set.h:std::set<Tag, std::less<Tag>, std::allocator<Tag> >::insert(Tag const&)
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_iterator<Tag> std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_insert_<Tag const&, std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, Tag const&, std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_Alloc_node&)
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<Tag>* std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_Alloc_node::operator()<Tag const&>(Tag const&) const
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<Tag>* std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_create_node<Tag const&>(Tag const&)
      0              0               4,651,824 ( 0.01%)      96,913 ( 0.02%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<Tag>, bool> std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_insert_unique<Tag const&>(Tag const&)
      0              0               4,472,249 ( 0.01%)          12 ( 0.00%)              0                      0           UnknownFile???:MPIDU_Init_shm_alloc
      0              0               4,468,414 ( 0.01%)          10 ( 0.00%)              0                      0           UnknownFile???:MPIDI_POSIX_iqueue_init
      0              0               4,463,767 ( 0.01%)           6 ( 0.00%)              0                      0           UnknownFile???:MPIDU_genq_shmem_pool_create_unsafe
      0              0               3,812,116 ( 0.01%)       1,090 ( 0.00%)      3,797,004 ( 0.01%)           870 ( 0.00%)  UnknownFile???:NC_infermodel
      0              0               3,796,362 ( 0.01%)         720 ( 0.00%)      3,781,250 ( 0.01%)           500 ( 0.00%)  UnknownFile???:check_file_type
      0              0               3,729,600 ( 0.01%)       3,330 ( 0.00%)              0                      0           UnknownFile???:ncindexnew
      0              0               3,505,824 ( 0.01%)       1,332 ( 0.00%)              0                      0           UnknownFile???:NC_hashmapnew
      0              0               3,419,632 ( 0.01%)         254 ( 0.00%)      3,865,592 ( 0.01%)           362 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fclose
      0              0               3,377,520 ( 0.01%)      14,916 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::_M_allocate(unsigned long)
      0              0               3,377,520 ( 0.01%)      14,916 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::set<int, std::less<int>, std::allocator<int> > >::allocate(unsigned long, void const*)
      0              0               3,288,496 ( 0.01%)         250 ( 0.00%)      3,722,800 ( 0.01%)           350 ( 0.00%)  UnknownFile???:closemagic
      0              0               3,160,248 ( 0.01%)      56,433 ( 0.01%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_get_node()
      0              0               3,160,248 ( 0.01%)      56,433 ( 0.01%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<std::pair<Tag const, Tag> > >::allocate(unsigned long, void const*)
      0              0               3,160,248 ( 0.01%)      56,433 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_Auto_node::_Auto_node<std::pair<Tag, Tag> >(std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >&, std::pair<Tag, Tag>&&)
      0              0               3,160,248 ( 0.01%)      56,433 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<std::pair<Tag const, Tag> >* std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_create_node<std::pair<Tag, Tag> >(std::pair<Tag, Tag>&&)
      0              0               2,882,794 ( 0.01%)      49,993 ( 0.01%)      2,886,112 ( 0.01%)        50,229 ( 0.01%)  UnknownFile???:nc4_hdf5_find_grp_var_att
      0              0               2,873,692 ( 0.01%)       9,404 ( 0.00%)        987,600 ( 0.00%)         3,200 ( 0.00%)  UnknownFile???:read_hdf5_obj
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)         9,068 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >::resize(unsigned long, LatLonBox<double> const&)
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)         9,068 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::resize(unsigned long)
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)         9,068 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >::_M_fill_insert(__gnu_cxx::__normal_iterator<LatLonBox<double>*, std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > >, unsigned long, LatLonBox<double> const&)
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)         9,068 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::_M_default_append(unsigned long)
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<LatLonBox<double>, std::allocator<LatLonBox<double> > >::_M_allocate(unsigned long)
      0              0               2,405,664 ( 0.01%)      11,992 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<LatLonBox<double> >::allocate(unsigned long, void const*)
      0              0               2,273,576 ( 0.01%)       6,921 ( 0.00%)        429,900 ( 0.00%)         2,350 ( 0.00%)  UnknownFile???:H5G__iterate_cb
      0              0               2,144,910 ( 0.01%)      22,416 ( 0.01%)      2,132,174 ( 0.01%)        22,551 ( 0.01%)  UnknownFile???:nc4_get_var_meta
      0              0               2,108,548 ( 0.01%)       2,442 ( 0.00%)              0                      0           UnknownFile???:nc4_nc4f_list_add
      0              0               2,079,844 ( 0.01%)       2,072 ( 0.00%)              0                      0           UnknownFile???:nc4_grp_list_add
      0              0               2,026,416 ( 0.01%)      36,186 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_multimap.h:std::enable_if<std::is_constructible<std::pair<Tag const, Tag>, std::pair<Tag, Tag> >::value, std::_Rb_tree_iterator<std::pair<Tag const, Tag> > >::type std::multimap<Tag, Tag, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::insert<std::pair<Tag, Tag> >(std::pair<Tag, Tag>&&)
      0              0               2,026,416 ( 0.01%)      36,186 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_iterator<std::pair<Tag const, Tag> > std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_emplace_equal<std::pair<Tag, Tag> >(std::pair<Tag, Tag>&&)
      0              0               1,823,994 ( 0.01%)       8,846 ( 0.00%)        517,984 ( 0.00%)         2,300 ( 0.00%)  UnknownFile???:H5P_copy_plist
      0              0               1,819,307 ( 0.01%)       5,535 ( 0.00%)      1,067,200 ( 0.00%)         2,200 ( 0.00%)  UnknownFile???:H5O_open_by_loc
      0              0               1,817,771 ( 0.01%)       5,510 ( 0.00%)      1,069,100 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5O_open_name
      0              0               1,804,203 ( 0.01%)       5,471 ( 0.00%)      1,069,100 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5VL__native_object_open
      0              0               1,802,688 ( 0.01%)      18,073 ( 0.00%)      1,797,600 ( 0.01%)        17,976 ( 0.00%)  UnknownFile???:NC4_put_vars
      0              0               1,801,488 ( 0.01%)      18,065 ( 0.00%)      1,797,600 ( 0.01%)        17,976 ( 0.00%)  UnknownFile???:NC4_put_vara
      0              0               1,801,488 ( 0.01%)      18,065 ( 0.00%)      1,797,600 ( 0.01%)        17,976 ( 0.00%)  UnknownFile???:NC_put_vara
      0              0               1,786,612 ( 0.01%)      18,211 ( 0.00%)      2,049,550 ( 0.01%)        21,450 ( 0.01%)  UnknownFile???:NC4_HDF5_inq_var_all
      0              0               1,784,036 ( 0.01%)       5,255 ( 0.00%)      1,069,100 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5VL_object_open
      0              0               1,760,608 ( 0.01%)      17,829 ( 0.00%)      1,735,904 ( 0.01%)        11,888 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::put(int const*, long, long, long, long, long)
      0              0               1,758,000 ( 0.01%)       5,952 ( 0.00%)        159,912 ( 0.00%)         2,051 ( 0.00%)  UnknownFile???:nc4_open_file
      0              0               1,755,232 ( 0.01%)      17,565 ( 0.00%)      1,731,008 ( 0.01%)        11,696 ( 0.00%)  UnknownFile???:nc_put_vara_int
      0              0               1,734,708 ( 0.01%)       5,182 ( 0.00%)      1,069,100 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5Oopen
      0              0               1,732,296 ( 0.01%)       2,960 ( 0.00%)              0                      0           UnknownFile???:nc4_var_list_add
      0              0               1,726,968 ( 0.01%)       2,368 ( 0.00%)              0                      0           UnknownFile???:nc4_var_list_add2
      0              0               1,682,650 ( 0.01%)       6,108 ( 0.00%)        412,300 ( 0.00%)         2,150 ( 0.00%)  UnknownFile???:H5G__link_iterate_table
      0              0               1,676,692 ( 0.01%)       4,873 ( 0.00%)        115,500 ( 0.00%)         1,600 ( 0.00%)  UnknownFile???:NC4_open
      0              0               1,652,115 ( 0.01%)       6,759 ( 0.00%)        416,950 ( 0.00%)         2,650 ( 0.00%)  UnknownFile???:read_dataset
      0              0               1,629,790 ( 0.01%)      20,720 ( 0.01%)              0                      0           UnknownFile???:H5P__dup_prop
      0              0               1,608,576 ( 0.01%)          30 ( 0.00%)      1,608,576 ( 0.01%)            30 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_deflate_buffer
      0              0               1,608,576 ( 0.01%)          30 ( 0.00%)              0                      0           UnknownFile???:deflateInit2_
      0              0               1,608,576 ( 0.01%)          30 ( 0.00%)              0                      0           UnknownFile???:deflateInit_
      0              0               1,604,052 ( 0.01%)      14,851 ( 0.00%)        530,250 ( 0.00%)         7,800 ( 0.00%)  UnknownFile???:H5A__open_common
      0              0               1,595,262 ( 0.01%)       4,897 ( 0.00%)        964,800 ( 0.00%)         2,000 ( 0.00%)  UnknownFile???:H5D_open
      0              0               1,595,262 ( 0.01%)       4,897 ( 0.00%)        964,800 ( 0.00%)         2,000 ( 0.00%)  UnknownFile???:H5O__dset_open
      0              0               1,563,434 ( 0.00%)       5,962 ( 0.00%)        423,800 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5G__compact_iterate
      0              0               1,456,446 ( 0.00%)       6,669 ( 0.00%)        977,760 ( 0.00%)         3,984 ( 0.00%)  UnknownFile???:sync_netcdf4_file
      0              0               1,395,008 ( 0.00%)       4,937 ( 0.00%)              0                      0           UnknownFile???:H5VL_register
      0              0               1,345,306 ( 0.00%)      14,160 ( 0.00%)      1,389,050 ( 0.00%)        16,200 ( 0.00%)  UnknownFile???:nc_inq_var
      0              0               1,344,000 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPIDIU_create_buf_pool
      0              0               1,324,154 ( 0.00%)       3,668 ( 0.00%)        118,100 ( 0.00%)           650 ( 0.00%)  UnknownFile???:read_var
      0              0               1,303,000 ( 0.00%)       5,212 ( 0.00%)        509,056 ( 0.00%)         2,176 ( 0.00%)  UnknownFile???:H5D__new
      0              0               1,274,986 ( 0.00%)       4,958 ( 0.00%)        423,800 ( 0.00%)         2,400 ( 0.00%)  UnknownFile???:H5G__obj_iterate
      0              0               1,253,841 ( 0.00%)       3,215 ( 0.00%)        128,800 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5AC_protect
      0              0               1,253,841 ( 0.00%)       3,215 ( 0.00%)        128,800 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5C_protect
      0              0               1,229,080 ( 0.00%)       7,116 ( 0.00%)      1,186,120 ( 0.00%)         5,516 ( 0.00%)  UnknownFile???:nc4_rec_write_metadata
      0              0               1,221,738 ( 0.00%)       4,589 ( 0.00%)        971,040 ( 0.00%)         3,672 ( 0.00%)  UnknownFile???:nc4_enddef_netcdf4_file
      0              0               1,207,084 ( 0.00%)      15,795 ( 0.00%)        863,950 ( 0.00%)        13,200 ( 0.00%)  UnknownFile???:H5Aopen_by_name
      0              0               1,133,832 ( 0.00%)      20,247 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_map.h:std::enable_if<std::is_constructible<std::pair<Tag const, Tag>, std::pair<Tag, Tag> >::value, std::pair<std::_Rb_tree_iterator<std::pair<Tag const, Tag> >, bool> >::type std::map<Tag, Tag, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::insert<std::pair<Tag, Tag> >(std::pair<Tag, Tag>&&)
      0              0               1,133,832 ( 0.00%)      20,247 ( 0.01%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<std::pair<Tag const, Tag> >, bool> std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_emplace_unique<std::pair<Tag, Tag> >(std::pair<Tag, Tag>&&)
      0              0               1,091,498 ( 0.00%)      11,353 ( 0.00%)      1,276,950 ( 0.00%)        14,000 ( 0.00%)  UnknownFile???:nc_inq_varname
      0              0               1,080,792 ( 0.00%)       1,080 ( 0.00%)          1,656 ( 0.00%)            96 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::add_var(char const*, NcType, NcDim const*, NcDim const*, NcDim const*, NcDim const*, NcDim const*)
      0              0               1,080,576 ( 0.00%)       1,104 ( 0.00%)          2,328 ( 0.00%)           144 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::add_var(char const*, NcType, int, NcDim const**)
      0              0               1,073,752 ( 0.00%)       6,001 ( 0.00%)              0                      0           UnknownFile???:H5Dwrite
      0              0               1,071,216 ( 0.00%)          17 ( 0.00%)              0                      0           UnknownFile???:H5D__write
      0              0               1,071,216 ( 0.00%)          17 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_dataset_write
      0              0               1,062,912 ( 0.00%)      41,372 ( 0.01%)        837,918 ( 0.00%)        20,686 ( 0.01%)  UnknownFile???:nc_utf8_normalize
      0              0               1,062,912 ( 0.00%)      41,372 ( 0.01%)        837,918 ( 0.00%)        20,686 ( 0.01%)  UnknownFile???:nc_utf8proc_map
      0              0               1,062,912 ( 0.00%)      41,372 ( 0.01%)        837,918 ( 0.00%)        20,686 ( 0.01%)  UnknownFile???:nc_utf8proc_map_custom
      0              0               1,060,352 ( 0.00%)      16,705 ( 0.00%)        697,712 ( 0.00%)         1,089 ( 0.00%)  UnknownFile???:H5P_set
      0              0               1,057,856 ( 0.00%)         147 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_fill
      0              0               1,056,128 ( 0.00%)          75 ( 0.00%)              0                      0           UnknownFile???:H5D__init_storage
      0              0               1,049,824 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:H5VL_dataset_write_direct
      0              0               1,049,784 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5D__write_api_common.constprop.0
      0              0               1,049,536 ( 0.00%)       5,011 ( 0.00%)        521,024 ( 0.00%)         2,452 ( 0.00%)  UnknownFile???:H5P__do_prop_cb1
      0              0               1,048,920 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5D__alloc_storage
      0              0               1,048,640 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5D__fill_init
      0              0               1,046,496 ( 0.00%)      40,556 ( 0.01%)      1,046,496 ( 0.00%)        40,556 ( 0.01%)  UnknownFile???:nc4_normalize_name
      0              0               1,042,032 ( 0.00%)       2,925 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >* std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > > >(unsigned long, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >)
      0              0                 975,812 ( 0.00%)       2,950 ( 0.00%)        692,236 ( 0.00%)         1,544 ( 0.00%)  UnknownFile???:H5G__traverse_real
      0              0                 972,304 ( 0.00%)       2,744 ( 0.00%)        690,336 ( 0.00%)         1,344 ( 0.00%)  UnknownFile???:H5L__link_cb
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_construct.h:void std::_Construct<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const&>(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const&)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*>(__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*>(__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > >(__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > >&)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*>(__gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, __gnu_cxx::__normal_iterator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const*, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > >, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::_M_create_storage(unsigned long)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > const&)
      0              0                 971,856 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::vector(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > const&)
      0              0                 971,076 ( 0.00%)      15,252 ( 0.00%)        742,938 ( 0.00%)        10,176 ( 0.00%)  UnknownFile???:H5E_printf_stack
      0              0                 970,440 ( 0.00%)       2,646 ( 0.00%)        690,336 ( 0.00%)         1,344 ( 0.00%)  UnknownFile???:H5D__create
      0              0                 970,440 ( 0.00%)       2,646 ( 0.00%)        690,336 ( 0.00%)         1,344 ( 0.00%)  UnknownFile???:H5O__dset_create
      0              0                 969,168 ( 0.00%)       2,640 ( 0.00%)        690,336 ( 0.00%)         1,344 ( 0.00%)  UnknownFile???:H5O_obj_create
      0              0                 964,308 ( 0.00%)       2,900 ( 0.00%)        691,564 ( 0.00%)         1,448 ( 0.00%)  UnknownFile???:H5G_traverse
      0              0                 953,096 ( 0.00%)       2,440 ( 0.00%)        690,480 ( 0.00%)         1,344 ( 0.00%)  UnknownFile???:H5L_link_object
      0              0                 937,720 ( 0.00%)       1,759 ( 0.00%)        677,424 ( 0.00%)           768 ( 0.00%)  UnknownFile???:H5D__create_named
      0              0                 930,232 ( 0.00%)       3,507 ( 0.00%)        913,104 ( 0.00%)         2,832 ( 0.00%)  UnknownFile???:write_var
      0              0                 929,550 ( 0.00%)      14,700 ( 0.00%)        863,950 ( 0.00%)        13,200 ( 0.00%)  UnknownFile???:get_quantize_info
      0              0                 891,820 ( 0.00%)      61,404 ( 0.02%)     14,365,612 ( 0.05%)       108,188 ( 0.03%)  src/base/Variable.cpp:Variable::GetNcVarFromNcFileVector(NcFileVector const&, SimpleGrid const&)
      0              0                 872,130 ( 0.00%)       3,081 ( 0.00%)        971,040 ( 0.00%)         3,672 ( 0.00%)  UnknownFile???:NC4_enddef
      0              0                 858,960 ( 0.00%)       3,267 ( 0.00%)        830,160 ( 0.00%)         2,544 ( 0.00%)  UnknownFile???:var_create_dataset
      0              0                 851,028 ( 0.00%)       1,288 ( 0.00%)         43,488 ( 0.00%)           471 ( 0.00%)  UnknownFile???:UnknownFn???
      0              0                 761,736 ( 0.00%)       1,959 ( 0.00%)         52,776 ( 0.00%)           816 ( 0.00%)  UnknownFile???:nc4_create_file
      0              0                 743,078 ( 0.00%)      10,178 ( 0.00%)        514,900 ( 0.00%)         5,101 ( 0.00%)  UnknownFile???:__vasprintf_internal
      0              0                 737,568 ( 0.00%)         517 ( 0.00%)              0                      0           UnknownFile???:H5B_find
      0              0                 730,552 ( 0.00%)       1,739 ( 0.00%)         32,232 ( 0.00%)           696 ( 0.00%)  UnknownFile???:NC_create
      0              0                 727,576 ( 0.00%)       1,739 ( 0.00%)         34,944 ( 0.00%)           624 ( 0.00%)  UnknownFile???:NC4_create
      0              0                 721,464 ( 0.00%)       1,662 ( 0.00%)         28,944 ( 0.00%)           432 ( 0.00%)  UnknownFile???:nc__create
      0              0                 704,496 ( 0.00%)       2,472 ( 0.00%)        735,840 ( 0.00%)         2,208 ( 0.00%)  UnknownFile???:NC4__enddef
      0              0                 694,145 ( 0.00%)      24,130 ( 0.01%)        694,145 ( 0.00%)        24,130 ( 0.01%)  UnknownFile???:NC4_HDF5_inq_attid
      0              0                 694,145 ( 0.00%)      24,130 ( 0.01%)        694,145 ( 0.00%)        24,130 ( 0.01%)  UnknownFile???:nc_inq_attid
      0              0                 694,145 ( 0.00%)      24,130 ( 0.01%)        694,145 ( 0.00%)        24,130 ( 0.01%)  src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::is_valid() const
      0              0                 684,048 ( 0.00%)         792 ( 0.00%)              0                      0           UnknownFile???:nc4_file_list_add
      0              0                 682,167 ( 0.00%)       5,311 ( 0.00%)        585,462 ( 0.00%)         2,601 ( 0.00%)  UnknownFile???:H5O_attr_iterate_real
      0              0                 679,536 ( 0.00%)         776 ( 0.00%)          9,264 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5VL__native_dataset_create
      0              0                 667,024 ( 0.00%)       3,663 ( 0.00%)        648,924 ( 0.00%)         3,901 ( 0.00%)  UnknownFile???:get_attached_info
      0              0                 650,328 ( 0.00%)       2,646 ( 0.00%)          2,400 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5Aopen
      0              0                 633,684 ( 0.00%)       4,580 ( 0.00%)        578,362 ( 0.00%)         2,201 ( 0.00%)  UnknownFile???:att_read_callbk
      0              0                 632,676 ( 0.00%)       4,571 ( 0.00%)        578,362 ( 0.00%)         2,201 ( 0.00%)  UnknownFile???:H5A__attr_iterate_table
      0              0                 610,344 ( 0.00%)         618 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Time, std::allocator<Time> >::_M_allocate(unsigned long)
      0              0                 610,344 ( 0.00%)         618 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Time>::allocate(unsigned long, void const*)
      0              0                 582,888 ( 0.00%)       1,752 ( 0.00%)          3,792 ( 0.00%)           192 ( 0.00%)  UnknownFile???:NC4_def_var
      0              0                 582,888 ( 0.00%)       1,752 ( 0.00%)          3,792 ( 0.00%)           192 ( 0.00%)  UnknownFile???:nc_def_var
      0              0                 565,167 ( 0.00%)       4,902 ( 0.00%)        585,462 ( 0.00%)         2,601 ( 0.00%)  UnknownFile???:H5O__attr_iterate
      0              0                 555,152 ( 0.00%)       1,948 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5VL__native_attr_get
      0              0                 555,152 ( 0.00%)       1,948 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5VL_attr_get
      0              0                 552,192 ( 0.00%)       3,420 ( 0.00%)              0                      0           UnknownFile???:H5T_copy
      0              0                 549,616 ( 0.00%)       1,921 ( 0.00%)              0                      0           UnknownFile???:H5A_get_space
      0              0                 549,616 ( 0.00%)       1,921 ( 0.00%)              0                      0           UnknownFile???:H5Aget_space
      0              0                 540,936 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPIDIG_init
      0              0                 540,000 ( 0.00%)       3,000 ( 0.00%)        540,000 ( 0.00%)         3,000 ( 0.00%)  UnknownFile???:H5DSiterate_scales
      0              0                 537,740 ( 0.00%)       9,810 ( 0.00%)        426,450 ( 0.00%)         6,600 ( 0.00%)  UnknownFile???:H5VL_attr_open
      0              0                 536,880 ( 0.00%)         223 ( 0.00%)        451,200 ( 0.00%)           200 ( 0.00%)  UnknownFile???:H5D__layout_oh_read
      0              0                 528,360 ( 0.00%)         592 ( 0.00%)        263,144 ( 0.00%)           518 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<Time, std::allocator<Time> >::push_back(Time const&)
      0              0                 528,360 ( 0.00%)         592 ( 0.00%)        263,144 ( 0.00%)           518 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<Time, std::allocator<Time> >::_M_realloc_insert<Time const&>(__gnu_cxx::__normal_iterator<Time*, std::vector<Time, std::allocator<Time> > >, Time const&)
      0              0                 514,050 ( 0.00%)       2,000 ( 0.00%)              0                      0           UnknownFile???:H5D_get_create_plist
      0              0                 514,050 ( 0.00%)       2,000 ( 0.00%)              0                      0           UnknownFile???:H5Dget_create_plist
      0              0                 486,096 ( 0.00%)       5,850 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Tag, std::allocator<Tag> >::_M_allocate(unsigned long)
      0              0                 486,096 ( 0.00%)       5,850 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Tag>::allocate(unsigned long, void const*)
      0              0                 480,472 ( 0.00%)       4,355 ( 0.00%)         42,984 ( 0.00%)         1,913 ( 0.00%)  UnknownFile???:H5T__path_find_real
      0              0                 474,736 ( 0.00%)         229 ( 0.00%)              0                      0           UnknownFile???:H5D__btree_idx_get_addr
      0              0                 467,144 ( 0.00%)         156 ( 0.00%)              0                      0           UnknownFile???:H5D__chunk_lookup
      0              0                 456,464 ( 0.00%)       2,364 ( 0.00%)        379,008 ( 0.00%)         2,404 ( 0.00%)  UnknownFile???:H5DSget_num_scales
      0              0                 455,592 ( 0.00%)          74 ( 0.00%)              0                      0           src/base/DataArray1D.h:DataArray1D<double>::DataArray1D(unsigned long, bool)
      0              0                 455,016 ( 0.00%)         370 ( 0.00%)          5,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:openmagic
      0              0                 434,176 ( 0.00%)       2,048 ( 0.00%)              0                      0           UnknownFile???:H5T__initiate_copy
      0              0                 433,152 ( 0.00%)         192 ( 0.00%)        433,152 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5Z__prepare_prelude_callback_dcpl
      0              0                 433,152 ( 0.00%)         192 ( 0.00%)        216,576 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5P__set_layout
      0              0                 433,152 ( 0.00%)         192 ( 0.00%)        216,576 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5Pset_layout
      0              0                 429,056 ( 0.00%)          57 ( 0.00%)              0                      0           UnknownFile???:_IO_doallocbuf
      0              0                 429,056 ( 0.00%)          57 ( 0.00%)              0                      0           UnknownFile???:_IO_file_doallocate
      0              0                 418,272 ( 0.00%)       1,464 ( 0.00%)        381,024 ( 0.00%)         1,632 ( 0.00%)  UnknownFile???:nc_enddef
      0              0                 409,600 ( 0.00%)          50 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:rewind
      0              0                 409,600 ( 0.00%)          50 ( 0.00%)              0                      0           UnknownFile???:_IO_file_seekoff@@GLIBC_2.2.5
      0              0                 409,600 ( 0.00%)          50 ( 0.00%)              0                      0           UnknownFile???:rewind
      0              0                 407,838 ( 0.00%)       5,016 ( 0.00%)        584,950 ( 0.00%)         2,600 ( 0.00%)  UnknownFile???:H5VL__native_attr_specific
      0              0                 390,479 ( 0.00%)       4,342 ( 0.00%)        584,950 ( 0.00%)         2,600 ( 0.00%)  UnknownFile???:H5A__iterate
      0              0                 388,840 ( 0.00%)       4,337 ( 0.00%)        287,692 ( 0.00%)         3,311 ( 0.00%)  UnknownFile???:H5DSattach_scale
      0              0                 369,984 ( 0.00%)       3,796 ( 0.00%)         42,984 ( 0.00%)         1,913 ( 0.00%)  UnknownFile???:H5T_path_find
      0              0                 364,940 ( 0.00%)       6,210 ( 0.00%)        280,050 ( 0.00%)         4,200 ( 0.00%)  UnknownFile???:H5VL__native_attr_open
      0              0                 345,032 ( 0.00%)      29,240 ( 0.01%)      7,081,928 ( 0.02%)        52,632 ( 0.01%)  src/base/NcFileVector.cpp:NcFileVector::GetTimeIx(unsigned long) const
      0              0                 334,588 ( 0.00%)       1,776 ( 0.00%)          1,492 ( 0.00%)            10 ( 0.00%)  UnknownFile???:H5A__read
      0              0                 334,588 ( 0.00%)       1,776 ( 0.00%)          1,492 ( 0.00%)            10 ( 0.00%)  UnknownFile???:H5VL__native_attr_read
      0              0                 329,602 ( 0.00%)       2,984 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long)
      0              0                 327,879 ( 0.00%)       2,931 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long)
      0              0                 327,488 ( 0.00%)       2,924 ( 0.00%)              0                      0           src/base/NcFileVector.cpp:NcFileVector::GetConcatenatedFilenames[abi:cxx11]() const
      0              0                 322,956 ( 0.00%)       1,964 ( 0.00%)        241,200 ( 0.00%)         1,600 ( 0.00%)  UnknownFile???:H5A__dense_iterate
      0              0                 314,136 ( 0.00%)       1,635 ( 0.00%)            936 ( 0.00%)            18 ( 0.00%)  UnknownFile???:H5T__conv_vlen
      0              0                 313,489 ( 0.00%)       1,529 ( 0.00%)        128,000 ( 0.00%)           250 ( 0.00%)  UnknownFile???:H5O_protect
      0              0                 313,140 ( 0.00%)       2,925 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Tag, std::allocator<Tag> >* std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > > >(unsigned long, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >)
      0              0                 312,688 ( 0.00%)       3,803 ( 0.00%)        273,832 ( 0.00%)         2,804 ( 0.00%)  UnknownFile???:attach_dimscales
      0              0                 309,912 ( 0.00%)       1,631 ( 0.00%)            936 ( 0.00%)            18 ( 0.00%)  UnknownFile???:H5T_convert
      0              0                 303,127 ( 0.00%)      14,924 ( 0.00%)              0                      0           UnknownFile???:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char const*>(char const*, char const*, std::forward_iterator_tag)
      0              0                 299,584 ( 0.00%)       1,530 ( 0.00%)        288,512 ( 0.00%)         1,001 ( 0.00%)  UnknownFile???:read_hdf5_att
      0              0                 280,704 ( 0.00%)      23,392 ( 0.01%)      7,017,600 ( 0.02%)        46,784 ( 0.01%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::set_cur(long*)
      0              0                 275,516 ( 0.00%)       4,054 ( 0.00%)        205,050 ( 0.00%)         2,700 ( 0.00%)  UnknownFile???:H5A__open_by_name
      0              0                 274,182 ( 0.00%)       3,413 ( 0.00%)         40,020 ( 0.00%)         2,118 ( 0.00%)  UnknownFile???:H5A__write
      0              0                 272,525 ( 0.00%)       1,413 ( 0.00%)              0                      0           UnknownFile???:H5Acreate1
      0              0                 266,736 ( 0.00%)       1,211 ( 0.00%)      1,271,566 ( 0.00%)         4,866 ( 0.00%)  UnknownFile???:H5C__flush_single_entry
      0              0                 266,736 ( 0.00%)       1,211 ( 0.00%)              0                      0           UnknownFile???:H5C__flush_ring
      0              0                 266,656 ( 0.00%)       1,209 ( 0.00%)              0                      0           UnknownFile???:H5C_flush_cache
      0              0                 265,245 ( 0.00%)       7,751 ( 0.00%)              0                      0           UnknownFile???:H5MM_xstrdup
      0              0                 257,312 ( 0.00%)         846 ( 0.00%)              0                      0           UnknownFile???:H5AC_flush
      0              0                 250,037 ( 0.00%)       2,393 ( 0.00%)          3,107 ( 0.00%)            13 ( 0.00%)  UnknownFile???:H5Eset_auto2
      0              0                 249,845 ( 0.00%)       2,395 ( 0.00%)          3,107 ( 0.00%)            13 ( 0.00%)  UnknownFile???:H5_init_library
      0              0                 243,132 ( 0.00%)       2,926 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Tag, std::allocator<Tag> >::resize(unsigned long)
      0              0                 243,132 ( 0.00%)       2,926 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<Tag, std::allocator<Tag> >::_M_default_append(unsigned long)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_construct.h:void std::_Construct<std::vector<Tag, std::allocator<Tag> >, std::vector<Tag, std::allocator<Tag> > const&>(std::vector<Tag, std::allocator<Tag> >*, std::vector<Tag, std::allocator<Tag> > const&)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Tag, std::allocator<Tag> >* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*>(__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Tag, std::allocator<Tag> >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*>(__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Tag, std::allocator<Tag> >* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*, std::vector<Tag, std::allocator<Tag> > >(__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*, std::allocator<std::vector<Tag, std::allocator<Tag> > >&)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Tag, std::allocator<Tag> >* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*>(__gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, __gnu_cxx::__normal_iterator<std::vector<Tag, std::allocator<Tag> > const*, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > >, std::vector<Tag, std::allocator<Tag> >*)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Tag, std::allocator<Tag> >::_M_create_storage(unsigned long)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Tag, std::allocator<Tag> >::_Vector_base(unsigned long, std::allocator<Tag> const&)
      0              0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Tag, std::allocator<Tag> >::vector(std::vector<Tag, std::allocator<Tag> > const&)
      0              0                 239,645 ( 0.00%)         788 ( 0.00%)        102,400 ( 0.00%)           200 ( 0.00%)  UnknownFile???:H5O__obj_class
      0              0                 239,400 ( 0.00%)         490 ( 0.00%)        237,456 ( 0.00%)           388 ( 0.00%)  UnknownFile???:H5P__get_cb
      0              0                 239,400 ( 0.00%)         490 ( 0.00%)        237,456 ( 0.00%)           388 ( 0.00%)  UnknownFile???:H5P_get
      0              0                 233,478 ( 0.00%)       3,221 ( 0.00%)         38,004 ( 0.00%)         2,046 ( 0.00%)  UnknownFile???:H5VL__native_attr_write
      0              0                 228,400 ( 0.00%)         209 ( 0.00%)              0                      0           UnknownFile???:H5HG__protect
      0              0                 228,138 ( 0.00%)       5,076 ( 0.00%)              0                      0           UnknownFile???:H5E__push_stack
      0              0                 227,200 ( 0.00%)         159 ( 0.00%)              0                      0           UnknownFile???:H5HG_read
      0              0                 226,656 ( 0.00%)         597 ( 0.00%)              0                      0           UnknownFile???:H5F__flush
      0              0                 226,352 ( 0.00%)         595 ( 0.00%)              0                      0           UnknownFile???:H5F_flush_mounts
      0              0                 226,312 ( 0.00%)         594 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_file_specific
      0              0                 223,552 ( 0.00%)         589 ( 0.00%)              0                      0           UnknownFile???:H5VL_file_specific
      0              0                 223,192 ( 0.00%)         580 ( 0.00%)              0                      0           UnknownFile???:H5F__flush_phase2
      0              0                 222,000 ( 0.00%)         109 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_blob_get
      0              0                 221,960 ( 0.00%)         108 ( 0.00%)              0                      0           UnknownFile???:H5VL_blob_get
      0              0                 221,920 ( 0.00%)         107 ( 0.00%)              0                      0           UnknownFile???:H5T__vlen_disk_read
      0              0                 221,568 ( 0.00%)         534 ( 0.00%)              0                      0           UnknownFile???:H5Fflush
      0              0                 216,576 ( 0.00%)          96 ( 0.00%)        216,576 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5Z_can_apply
      0              0                 216,576 ( 0.00%)          96 ( 0.00%)        216,576 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5Z_set_local
      0              0                 206,141 ( 0.00%)       6,436 ( 0.00%)        206,141 ( 0.00%)         6,436 ( 0.00%)  UnknownFile???:NC4_inq_varid
      0              0                 206,141 ( 0.00%)       6,436 ( 0.00%)        206,141 ( 0.00%)         6,436 ( 0.00%)  UnknownFile???:nc_inq_varid
      0              0                 206,141 ( 0.00%)       6,436 ( 0.00%)        206,141 ( 0.00%)         6,436 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::get_var(char const*) const
      0              0                 201,408 ( 0.00%)         963 ( 0.00%)          1,776 ( 0.00%)           148 ( 0.00%)  UnknownFile???:nclistsetalloc
      0              0                 195,908 ( 0.00%)       5,848 ( 0.00%)        195,908 ( 0.00%)         5,848 ( 0.00%)  src/base/NcFileVector.cpp:NcFileVector::FindContainingVariable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, NcVar**) const
      0              0                 186,000 ( 0.00%)       9,070 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::substr(unsigned long, unsigned long) const
      0              0                 185,887 ( 0.00%)       1,134 ( 0.00%)              0                      0           UnknownFile???:H5O__attr_exists
      0              0                 184,192 ( 0.00%)       2,878 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_track_common_val_counters
      0              0                 180,614 ( 0.00%)       1,516 ( 0.00%)        135,768 ( 0.00%)         1,090 ( 0.00%)  UnknownFile???:H5DSis_scale
      0              0                 179,762 ( 0.00%)       1,181 ( 0.00%)              0                      0           UnknownFile???:H5Acreate2
      0              0                 170,153 ( 0.00%)         112 ( 0.00%)        159,169 ( 0.00%)            25 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/FilenameList.h:FilenameList::FromFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool)
      0              0                 167,564 ( 0.00%)         456 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_exists
      0              0                 167,361 ( 0.00%)         856 ( 0.00%)          2,464 ( 0.00%)             5 ( 0.00%)  UnknownFile???:H5VL_init_phase2
      0              0                 163,073 ( 0.00%)         844 ( 0.00%)              0                      0           UnknownFile???:H5T_init
      0              0                 160,940 ( 0.00%)       2,610 ( 0.00%)        118,050 ( 0.00%)         1,800 ( 0.00%)  UnknownFile???:H5O__attr_open_by_name
      0              0                 155,765 ( 0.00%)       1,946 ( 0.00%)          3,107 ( 0.00%)            13 ( 0.00%)  UnknownFile???:set_auto
      0              0                 154,102 ( 0.00%)       3,812 ( 0.00%)        307,400 ( 0.00%)         1,900 ( 0.00%)  UnknownFile???:H5G_iterate
      0              0                 150,324 ( 0.00%)         770 ( 0.00%)        138,240 ( 0.00%)           480 ( 0.00%)  UnknownFile???:put_att_grpa
      0              0                 150,324 ( 0.00%)         770 ( 0.00%)        138,240 ( 0.00%)           480 ( 0.00%)  UnknownFile???:write_attlist
      0              0                 149,942 ( 0.00%)       3,949 ( 0.00%)        465,650 ( 0.00%)         2,050 ( 0.00%)  UnknownFile???:H5VL_attr_specific
      0              0                 147,274 ( 0.00%)       3,259 ( 0.00%)        134,600 ( 0.00%)         1,300 ( 0.00%)  UnknownFile???:H5L_iterate
      0              0                 142,194 ( 0.00%)       2,656 ( 0.00%)         30,804 ( 0.00%)         1,974 ( 0.00%)  UnknownFile???:H5VL_attr_write
      0              0                 141,136 ( 0.00%)       5,946 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<long, std::allocator<long> >::_M_allocate(unsigned long)
      0              0                 141,136 ( 0.00%)       5,946 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<long>::allocate(unsigned long, void const*)
      0              0                 140,448 ( 0.00%)           4 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::_M_allocate(unsigned long)
      0              0                 140,448 ( 0.00%)           4 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<Tag, std::allocator<Tag> > >::allocate(unsigned long, void const*)
      0              0                 140,352 ( 0.00%)       5,848 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<long, std::allocator<long> >::resize(unsigned long, long const&)
      0              0                 140,352 ( 0.00%)       5,848 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<long, std::allocator<long> >::_M_fill_insert(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, unsigned long, long const&)
      0              0                 140,352 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::_M_allocate(unsigned long)
      0              0                 140,352 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > >::allocate(unsigned long, void const*)
      0              0                 133,342 ( 0.00%)       1,293 ( 0.00%)         40,962 ( 0.00%)           501 ( 0.00%)  UnknownFile???:nc4_H5Fopen
      0              0                 132,733 ( 0.00%)       1,689 ( 0.00%)          3,107 ( 0.00%)            13 ( 0.00%)  UnknownFile???:nc4_hdf5_initialize
      0              0                 131,136 ( 0.00%)           4 ( 0.00%)        148,544 ( 0.00%)             8 ( 0.00%)  UnknownFile???:std::basic_filebuf<char, std::char_traits<char> >::close()
      0              0                 131,136 ( 0.00%)           4 ( 0.00%)        148,544 ( 0.00%)             8 ( 0.00%)  UnknownFile???:std::basic_ifstream<char, std::char_traits<char> >::~basic_ifstream()
      0              0                 131,136 ( 0.00%)           4 ( 0.00%)        132,160 ( 0.00%)             6 ( 0.00%)  UnknownFile???:std::__basic_file<char>::close()
      0              0                 127,538 ( 0.00%)          79 ( 0.00%)         28,720 ( 0.00%)            30 ( 0.00%)  UnknownFile???:ADIOI_CRAY_SetInfo
      0              0                 126,344 ( 0.00%)         510 ( 0.00%)        124,416 ( 0.00%)           432 ( 0.00%)  UnknownFile???:write_netcdf4_dimid
      0              0                 124,267 ( 0.00%)       1,032 ( 0.00%)              0                      0           UnknownFile???:H5B2_find
      0              0                 121,920 ( 0.00%)       6,096 ( 0.00%)        121,920 ( 0.00%)         6,096 ( 0.00%)  src/base/TimeObj.cpp:Time::FromCFCompliantUnitsOffsetInt(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)
      0              0                 121,408 ( 0.00%)       1,388 ( 0.00%)              0                      0           UnknownFile???:H5T__complete_copy
      0              0                 120,291 ( 0.00%)       1,926 ( 0.00%)         94,850 ( 0.00%)         1,150 ( 0.00%)  UnknownFile???:read_scale
      0              0                 120,168 ( 0.00%)      12,822 ( 0.00%)      1,726,586 ( 0.01%)        33,887 ( 0.01%)  UnknownFile???:H5P__close_list_cb
      0              0                 120,168 ( 0.00%)      12,822 ( 0.00%)      1,726,586 ( 0.01%)        33,887 ( 0.01%)  UnknownFile???:H5P_close
      0              0                 117,896 ( 0.00%)          45 ( 0.00%)              0                      0           UnknownFile???:H5FL_blk_calloc
      0              0                 117,656 ( 0.00%)         464 ( 0.00%)        116,200 ( 0.00%)           450 ( 0.00%)  UnknownFile???:read_coord_dimids
      0              0                 117,136 ( 0.00%)      12,793 ( 0.00%)      1,028,426 ( 0.00%)        31,548 ( 0.01%)  UnknownFile???:H5Pclose
      0              0                 116,940 ( 0.00%)       5,847 ( 0.00%)              0                      0           src/base/TimeObj.cpp:Time::ToString[abi:cxx11]() const
      0              0                 113,440 ( 0.00%)         841 ( 0.00%)         15,968 ( 0.00%)           337 ( 0.00%)  UnknownFile???:H5T__conv_struct_opt
      0              0                 113,440 ( 0.00%)         841 ( 0.00%)         13,280 ( 0.00%)           217 ( 0.00%)  UnknownFile???:H5T__conv_struct_init
      0              0                 112,280 ( 0.00%)         560 ( 0.00%)              0                      0           UnknownFile???:H5T__register
      0              0                 112,280 ( 0.00%)         560 ( 0.00%)              0                      0           UnknownFile???:H5T__register_int
      0              0                 111,568 ( 0.00%)         397 ( 0.00%)              0                      0           UnknownFile???:H5Screate_simple
      0              0                 108,672 ( 0.00%)         871 ( 0.00%)              0                      0           UnknownFile???:H5FL_fac_malloc
      0              0                 108,030 ( 0.00%)         451 ( 0.00%)        134,200 ( 0.00%)           376 ( 0.00%)  UnknownFile???:H5MM_realloc
      0              0                 107,008 ( 0.00%)       1,615 ( 0.00%)          1,492 ( 0.00%)            10 ( 0.00%)  UnknownFile???:H5VL_attr_read
      0              0                 106,194 ( 0.00%)       1,310 ( 0.00%)          1,968 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5A__create
      0              0                 105,751 ( 0.00%)       1,535 ( 0.00%)          3,265 ( 0.00%)            20 ( 0.00%)  UnknownFile???:NC_HDF5_initialize
      0              0                 105,312 ( 0.00%)       1,607 ( 0.00%)          1,408 ( 0.00%)             7 ( 0.00%)  UnknownFile???:H5Aread
      0              0                 103,552 ( 0.00%)       1,618 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:pread
      0              0                 103,552 ( 0.00%)       1,618 ( 0.00%)              0                      0           UnknownFile???:H5FD__sec2_read
      0              0                 103,552 ( 0.00%)       1,618 ( 0.00%)              0                      0           UnknownFile???:H5FD_read
      0              0                 103,026 ( 0.00%)       1,299 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_attr_create
      0              0                 100,310 ( 0.00%)       1,025 ( 0.00%)         47,250 ( 0.00%)           500 ( 0.00%)  UnknownFile???:rec_read_metadata
      0              0                  98,916 ( 0.00%)          60 ( 0.00%)             29 ( 0.00%)             6 ( 0.00%)  UnknownFile???:MPIR_Info_set_impl
      0              0                  98,916 ( 0.00%)          60 ( 0.00%)             29 ( 0.00%)             6 ( 0.00%)  UnknownFile???:PMPI_Info_set
      0              0                  98,304 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIR_Info_alloc
      0              0                  97,280 ( 0.00%)       1,520 ( 0.00%)              0                      0           UnknownFile???:H5F__accum_read
      0              0                  97,280 ( 0.00%)       1,520 ( 0.00%)              0                      0           UnknownFile???:H5PB_read
      0              0                  96,888 ( 0.00%)         132 ( 0.00%)              0                      0           UnknownFile???:_dl_init
      0              0                  96,888 ( 0.00%)         132 ( 0.00%)              0                      0           UnknownFile???:call_init.part.0
      0              0                  95,824 ( 0.00%)         452 ( 0.00%)              0                      0           UnknownFile???:H5T__copy_all
      0              0                  92,648 ( 0.00%)          20 ( 0.00%)              0                      0           UnknownFile???:H5B__cache_deserialize
      0              0                  89,514 ( 0.00%)       2,454 ( 0.00%)         24,768 ( 0.00%)         1,755 ( 0.00%)  UnknownFile???:H5Awrite
      0              0                  88,928 ( 0.00%)         462 ( 0.00%)         82,944 ( 0.00%)           288 ( 0.00%)  UnknownFile???:H5DSset_scale
      0              0                  88,928 ( 0.00%)         462 ( 0.00%)         82,944 ( 0.00%)           288 ( 0.00%)  UnknownFile???:H5LT_set_attribute_string
      0              0                  87,082 ( 0.00%)       1,159 ( 0.00%)         61,900 ( 0.00%)           450 ( 0.00%)  UnknownFile???:NC4_read_provenance
      0              0                  86,418 ( 0.00%)       1,623 ( 0.00%)          5,022 ( 0.00%)           370 ( 0.00%)  UnknownFile???:H5HF__man_op_real
      0              0                  85,888 ( 0.00%)       1,342 ( 0.00%)              0                      0           UnknownFile???:H5F_block_read
      0              0                  82,448 ( 0.00%)          25 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Time, std::allocator<Time> >* std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > > >(unsigned long, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_construct.h:void std::_Construct<std::vector<Time, std::allocator<Time> >, std::vector<Time, std::allocator<Time> > const&>(std::vector<Time, std::allocator<Time> >*, std::vector<Time, std::allocator<Time> > const&)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Time, std::allocator<Time> >* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*>(__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Time, std::allocator<Time> >* std::__uninitialized_copy<false>::__uninit_copy<__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*>(__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Time, std::allocator<Time> >* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*, std::vector<Time, std::allocator<Time> > >(__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*, std::allocator<std::vector<Time, std::allocator<Time> > >&)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<Time, std::allocator<Time> >* std::uninitialized_copy<__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*>(__gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, __gnu_cxx::__normal_iterator<std::vector<Time, std::allocator<Time> > const*, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > >, std::vector<Time, std::allocator<Time> >*)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Time, std::allocator<Time> >::_M_create_storage(unsigned long)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Time, std::allocator<Time> >::_Vector_base(unsigned long, std::allocator<Time> const&)
      0              0                  81,872 ( 0.00%)          24 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Time, std::allocator<Time> >::vector(std::vector<Time, std::allocator<Time> > const&)
      0              0                  81,178 ( 0.00%)       1,572 ( 0.00%)          5,022 ( 0.00%)           370 ( 0.00%)  UnknownFile???:H5HF__man_op
      0              0                  80,330 ( 0.00%)       1,568 ( 0.00%)          5,022 ( 0.00%)           370 ( 0.00%)  UnknownFile???:H5HF_op
      0              0                  79,872 ( 0.00%)       1,248 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:pwrite
      0              0                  79,872 ( 0.00%)       1,248 ( 0.00%)              0                      0           UnknownFile???:H5FD__sec2_write
      0              0                  79,872 ( 0.00%)       1,248 ( 0.00%)              0                      0           UnknownFile???:H5FD_write
      0              0                  76,928 ( 0.00%)          11 ( 0.00%)         76,928 ( 0.00%)            11 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:posix_mpi_redux
      0              0                  76,640 ( 0.00%)          18 ( 0.00%)              0                      0           UnknownFile???:H5D__chunk_init
      0              0                  76,018 ( 0.00%)         337 ( 0.00%)          1,968 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5O__attr_create
      0              0                  75,920 ( 0.00%)         369 ( 0.00%)         25,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5Gopen2
      0              0                  74,926 ( 0.00%)       2,191 ( 0.00%)          1,968 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5O__msg_iterate_real
      0              0                  74,256 ( 0.00%)       1,113 ( 0.00%)              0                      0           UnknownFile???:H5F__accum_write
      0              0                  74,256 ( 0.00%)       1,113 ( 0.00%)              0                      0           UnknownFile???:H5PB_write
      0              0                  72,800 ( 0.00%)       2,400 ( 0.00%)          3,200 ( 0.00%)           400 ( 0.00%)  UnknownFile???:H5D_get_access_plist
      0              0                  72,800 ( 0.00%)       2,400 ( 0.00%)          3,200 ( 0.00%)           400 ( 0.00%)  UnknownFile???:H5Dget_access_plist
      0              0                  72,144 ( 0.00%)         712 ( 0.00%)         42,168 ( 0.00%)           360 ( 0.00%)  UnknownFile???:nc4_H5Fcreate
      0              0                  71,417 ( 0.00%)       6,292 ( 0.00%)         71,417 ( 0.00%)         6,292 ( 0.00%)  UnknownFile???:NC4_inq_dimid
      0              0                  71,417 ( 0.00%)       6,292 ( 0.00%)         71,417 ( 0.00%)         6,292 ( 0.00%)  UnknownFile???:nc_inq_dimid
      0              0                  71,417 ( 0.00%)       6,292 ( 0.00%)         71,417 ( 0.00%)         6,292 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::get_dim(char const*) const
      0              0                  70,656 ( 0.00%)          10 ( 0.00%)             64 ( 0.00%)             3 ( 0.00%)  src/blobs/StitchBlobs.cpp:TagExchangeOP::TagExchangeOP(int, std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > const&)
      0              0                  70,272 ( 0.00%)           3 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::resize(unsigned long)
      0              0                  70,272 ( 0.00%)           3 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::_M_default_append(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::_M_allocate(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > >::allocate(unsigned long, void const*)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::resize(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::resize(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::_M_default_append(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::operator=(std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > > const&)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::_M_default_append(unsigned long)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::operator=(std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > const&)
      0              0                  70,176 ( 0.00%)           1 ( 0.00%)              0                      0           src/blobs/StitchBlobs.cpp:BlobsExchangeOp::BlobsExchangeOp(int, std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > > const&)
      0              0                  68,672 ( 0.00%)         296 ( 0.00%)              0                      0           UnknownFile???:H5HF__dtable_init
      0              0                  68,672 ( 0.00%)         296 ( 0.00%)              0                      0           UnknownFile???:H5HF__hdr_finish_init_phase1
      0              0                  67,994 ( 0.00%)       1,232 ( 0.00%)              0                      0           UnknownFile???:H5VL_attr_create
      0              0                  66,528 ( 0.00%)       6,048 ( 0.00%)         66,528 ( 0.00%)         6,048 ( 0.00%)  src/base/NetCDFUtilities.cpp:NcGetTimeDimension(NcFile&)
      0              0                  66,484 ( 0.00%)         437 ( 0.00%)         25,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5O_obj_type
      0              0                  65,720 ( 0.00%)           4 ( 0.00%)         65,536 ( 0.00%)             1 ( 0.00%)  UnknownFile???:llapi_layout_get_by_fd
      0              0                  65,528 ( 0.00%)          13 ( 0.00%)         32,760 ( 0.00%)            12 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::push_back(std::pair<int, int>&&)
      0              0                  65,528 ( 0.00%)          13 ( 0.00%)         32,760 ( 0.00%)            12 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_realloc_insert<std::pair<int, int> >(__gnu_cxx::__normal_iterator<std::pair<int, int>*, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > > >, std::pair<int, int>&&)
      0              0                  65,528 ( 0.00%)          13 ( 0.00%)         32,760 ( 0.00%)            12 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::emplace_back<std::pair<int, int> >(std::pair<int, int>&&)
      0              0                  65,528 ( 0.00%)          13 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_allocate(unsigned long)
      0              0                  65,528 ( 0.00%)          13 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::pair<int, int> >::allocate(unsigned long, void const*)
      0              0                  65,248 ( 0.00%)       3,228 ( 0.00%)         53,265 ( 0.00%)         2,690 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::values() const
      0              0                  65,024 ( 0.00%)       1,859 ( 0.00%)         17,000 ( 0.00%)           750 ( 0.00%)  UnknownFile???:H5VL__native_link_specific
      0              0                  64,140 ( 0.00%)       3,160 ( 0.00%)         64,140 ( 0.00%)         3,160 ( 0.00%)  UnknownFile???:NC4_HDF5_inq_att
      0              0                  63,912 ( 0.00%)         152 ( 0.00%)              0                      0           UnknownFile???:H5B2__protect_leaf
      0              0                  63,875 ( 0.00%)         917 ( 0.00%)          3,054 ( 0.00%)           298 ( 0.00%)  UnknownFile???:H5A__dense_btree2_name_compare
      0              0                  61,899 ( 0.00%)         814 ( 0.00%)          3,054 ( 0.00%)           298 ( 0.00%)  UnknownFile???:H5B2__locate_record
      0              0                  60,936 ( 0.00%)          44 ( 0.00%)              0                      0           UnknownFile???:H5D__select_io
      0              0                  60,532 ( 0.00%)       2,220 ( 0.00%)              0                      0           UnknownFile???:nc4_att_list_add
      0              0                  60,500 ( 0.00%)         348 ( 0.00%)         55,296 ( 0.00%)           192 ( 0.00%)  UnknownFile???:write_coord_dimids
      0              0                  60,198 ( 0.00%)         254 ( 0.00%)         57,600 ( 0.00%)           200 ( 0.00%)  UnknownFile???:NC4_read_ncproperties
      0              0                  60,013 ( 0.00%)       2,858 ( 0.00%)        177,650 ( 0.00%)         1,050 ( 0.00%)  UnknownFile???:H5Aiterate2
      0              0                  59,372 ( 0.00%)       2,851 ( 0.00%)              0                      0           UnknownFile???:H5O__attr_shared_decode
      0              0                  59,160 ( 0.00%)         158 ( 0.00%)              0                      0           UnknownFile???:H5HF__man_dblock_protect
      0              0                  58,480 ( 0.00%)       2,924 ( 0.00%)         58,480 ( 0.00%)         2,924 ( 0.00%)  src/base/TimeObj.cpp:Time::GetCFCompliantUnitsOffsetDouble(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const
      0              0                  57,620 ( 0.00%)         302 ( 0.00%)              0                      0           UnknownFile???:H5HF__hdr_protect
      0              0                  57,052 ( 0.00%)         279 ( 0.00%)              0                      0           UnknownFile???:H5HF_open
      0              0                  55,548 ( 0.00%)         985 ( 0.00%)          7,508 ( 0.00%)            45 ( 0.00%)  UnknownFile???:nc_initialize
      0              0                  55,296 ( 0.00%)         192 ( 0.00%)              0                      0           UnknownFile???:H5Screate
      0              0                  52,850 ( 0.00%)         100 ( 0.00%)         52,850 ( 0.00%)           100 ( 0.00%)  UnknownFile???:readmagic
      0              0                  51,627 ( 0.00%)          68 ( 0.00%)            304 ( 0.00%)            16 ( 0.00%)  UnknownFile???:ncbytesappendn
      0              0                  51,627 ( 0.00%)          68 ( 0.00%)            304 ( 0.00%)            16 ( 0.00%)  UnknownFile???:ncbytessetalloc
      0              0                  51,250 ( 0.00%)          50 ( 0.00%)              0                      0           UnknownFile???:NC_readfileF
      0              0                  51,216 ( 0.00%)         211 ( 0.00%)              0                      0           UnknownFile???:H5VM_opvv
      0              0                  51,116 ( 0.00%)         297 ( 0.00%)         25,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5G__open_name
      0              0                  50,695 ( 0.00%)         819 ( 0.00%)              0                      0           UnknownFile???:H5A__exists_api_common
      0              0                  49,348 ( 0.00%)         286 ( 0.00%)         25,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5VL__native_group_open
      0              0                  48,532 ( 0.00%)         279 ( 0.00%)         25,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5VL_group_open
      0              0                  48,160 ( 0.00%)      12,040 ( 0.00%)              0                      0           UnknownFile???:H5CX_pop
      0              0                  48,151 ( 0.00%)         807 ( 0.00%)              0                      0           UnknownFile???:H5Aexists
      0              0                  47,414 ( 0.00%)         968 ( 0.00%)            104 ( 0.00%)             6 ( 0.00%)  UnknownFile???:H5P_init_phase1
      0              0                  47,128 ( 0.00%)         392 ( 0.00%)         26,992 ( 0.00%)           195 ( 0.00%)  UnknownFile???:H5FD_open
      0              0                  47,120 ( 0.00%)         202 ( 0.00%)              0                      0           UnknownFile???:H5HF__cache_hdr_deserialize
      0              0                  46,880 ( 0.00%)       1,399 ( 0.00%)             24 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5SL__insert_common
      0              0                  46,880 ( 0.00%)       1,399 ( 0.00%)             24 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5SL_insert
      0              0                  46,835 ( 0.00%)         581 ( 0.00%)              0                      0           UnknownFile???:H5B2__iterate_node
      0              0                  46,608 ( 0.00%)         681 ( 0.00%)              0                      0           UnknownFile???:H5F_block_write
      0              0                  46,400 ( 0.00%)         200 ( 0.00%)              0                      0           UnknownFile???:H5HF__hdr_finish_init
      0              0                  46,311 ( 0.00%)       2,286 ( 0.00%)         46,311 ( 0.00%)         2,286 ( 0.00%)  UnknownFile???:nc_inq_atttype
      0              0                  46,311 ( 0.00%)       2,286 ( 0.00%)         46,311 ( 0.00%)         2,286 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::type() const
      0              0                  46,284 ( 0.00%)          10 ( 0.00%)         46,284 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_CRAY_Reduce
      0              0                  46,284 ( 0.00%)          10 ( 0.00%)         46,284 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Reduce_intra_binomial
      0              0                  46,284 ( 0.00%)          10 ( 0.00%)         46,284 ( 0.00%)            10 ( 0.00%)  UnknownFile???:PMPI_Reduce
      0              0                  46,256 ( 0.00%)         500 ( 0.00%)         42,624 ( 0.00%)           288 ( 0.00%)  UnknownFile???:nc_put_vara_double
      0              0                  46,220 ( 0.00%)         606 ( 0.00%)            800 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5F__super_read
      0              0                  44,872 ( 0.00%)       1,852 ( 0.00%)              0                      0           UnknownFile???:nc4_read_atts
      0              0                  44,152 ( 0.00%)         320 ( 0.00%)         24,304 ( 0.00%)           147 ( 0.00%)  UnknownFile???:H5FD__sec2_open
      0              0                  43,872 ( 0.00%)         163 ( 0.00%)              0                      0           UnknownFile???:H5C__tag_entry
      0              0                  43,107 ( 0.00%)         560 ( 0.00%)              0                      0           UnknownFile???:H5B2_iterate
      0              0                  41,376 ( 0.00%)         230 ( 0.00%)          9,376 ( 0.00%)            58 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fopen
      0              0                  40,344 ( 0.00%)       1,681 ( 0.00%)              0                      0           UnknownFile???:nclistnew
      0              0                  37,720 ( 0.00%)         227 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_insert
      0              0                  37,440 ( 0.00%)         704 ( 0.00%)         34,400 ( 0.00%)           600 ( 0.00%)  UnknownFile???:nc_get_vara_int
      0              0                  37,408 ( 0.00%)         702 ( 0.00%)         34,400 ( 0.00%)           600 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get(int*, long, long, long, long, long) const
      0              0                  37,304 ( 0.00%)         226 ( 0.00%)          1,968 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5O__attr_to_dense_cb
      0              0                  36,960 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:H5D__select_read
      0              0                  35,512 ( 0.00%)       1,280 ( 0.00%)              0                      0           UnknownFile???:H5Fget_create_plist
      0              0                  35,512 ( 0.00%)       1,280 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_file_get
      0              0                  35,512 ( 0.00%)       1,280 ( 0.00%)              0                      0           UnknownFile???:H5VL_file_get
      0              0                  35,112 ( 0.00%)          52 ( 0.00%)              0                      0           UnknownFile???:H5B2__cache_leaf_deserialize
      0              0                  35,040 ( 0.00%)          54 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_build_table
      0              0                  34,536 ( 0.00%)       1,439 ( 0.00%)              0                      0           UnknownFile???:tsearch
      0              0                  33,912 ( 0.00%)       1,680 ( 0.00%)          9,960 ( 0.00%)           480 ( 0.00%)  UnknownFile???:NC4_HDF5_put_att
      0              0                  33,912 ( 0.00%)       1,680 ( 0.00%)          9,960 ( 0.00%)           480 ( 0.00%)  UnknownFile???:nc4_put_att
      0              0                  33,912 ( 0.00%)       1,680 ( 0.00%)          9,960 ( 0.00%)           480 ( 0.00%)  UnknownFile???:nc_put_att_text
      0              0                  33,808 ( 0.00%)         146 ( 0.00%)              0                      0           UnknownFile???:H5B2__insert
      0              0                  33,808 ( 0.00%)         146 ( 0.00%)              0                      0           UnknownFile???:H5B2_insert
      0              0                  33,560 ( 0.00%)         202 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_writevv_sieve_cb
      0              0                  33,289 ( 0.00%)       1,614 ( 0.00%)         21,306 ( 0.00%)         1,076 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcTypedComponent::get_space(long) const
      0              0                  31,888 ( 0.00%)          50 ( 0.00%)              0                      0           UnknownFile???:H5B2__create_leaf
      0              0                  31,496 ( 0.00%)         432 ( 0.00%)         28,800 ( 0.00%)           240 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::put(double const*, long const*)
      0              0                  31,109 ( 0.00%)         202 ( 0.00%)          8,192 ( 0.00%)             2 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_clean_file_path
      0              0                  31,016 ( 0.00%)         553 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5E_init
      0              0                  30,352 ( 0.00%)         158 ( 0.00%)              0                      0           UnknownFile???:H5VL_register_using_vol_id
      0              0                  30,136 ( 0.00%)         144 ( 0.00%)              0                      0           UnknownFile???:H5T__alloc
      0              0                  30,000 ( 0.00%)         300 ( 0.00%)         29,600 ( 0.00%)           200 ( 0.00%)  UnknownFile???:nc_get_vara_double
      0              0                  29,884 ( 0.00%)       1,001 ( 0.00%)          7,300 ( 0.00%)           346 ( 0.00%)  UnknownFile???:NC4_hdf5get_superblock
      0              0                  29,354 ( 0.00%)         370 ( 0.00%)         20,778 ( 0.00%)           296 ( 0.00%)  UnknownFile???:NCpathcvt
      0              0                  28,800 ( 0.00%)         552 ( 0.00%)         33,120 ( 0.00%)           360 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::data_mode()
      0              0                  28,800 ( 0.00%)         288 ( 0.00%)         28,416 ( 0.00%)           192 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get(double*, long const*) const
      0              0                  28,512 ( 0.00%)         840 ( 0.00%)          3,040 ( 0.00%)           152 ( 0.00%)  UnknownFile???:H5P_create_id
      0              0                  28,458 ( 0.00%)       1,515 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_decode
      0              0                  28,300 ( 0.00%)         550 ( 0.00%)         20,550 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5A__dense_open
      0              0                  28,146 ( 0.00%)         123 ( 0.00%)         27,648 ( 0.00%)            96 ( 0.00%)  UnknownFile???:NC4_write_ncproperties
      0              0                  28,146 ( 0.00%)         123 ( 0.00%)         27,648 ( 0.00%)            96 ( 0.00%)  UnknownFile???:NC4_write_provenance
      0              0                  28,112 ( 0.00%)         296 ( 0.00%)              0                      0           UnknownFile???:H5O__msg_append_real
      0              0                  27,648 ( 0.00%)         432 ( 0.00%)              0                      0           UnknownFile???:H5F_shared_block_write
      0              0                  26,820 ( 0.00%)         754 ( 0.00%)         15,800 ( 0.00%)           600 ( 0.00%)  UnknownFile???:H5VL_link_specific
      0              0                  26,229 ( 0.00%)          16 ( 0.00%)          8,357 ( 0.00%)             4 ( 0.00%)  UnknownFile???:std::basic_filebuf<char, std::char_traits<char> >::open(char const*, std::_Ios_Openmode)
      0              0                  26,229 ( 0.00%)          16 ( 0.00%)          8,357 ( 0.00%)             4 ( 0.00%)  UnknownFile???:std::basic_ifstream<char, std::char_traits<char> >::basic_ifstream(char const*, std::_Ios_Openmode)
      0              0                  25,712 ( 0.00%)         110 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_create
      0              0                  24,776 ( 0.00%)         302 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_add_record_ref
      0              0                  24,404 ( 0.00%)         444 ( 0.00%)         24,404 ( 0.00%)           444 ( 0.00%)  UnknownFile???:ncuriparse
      0              0                  24,344 ( 0.00%)          58 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_writevv
      0              0                  23,688 ( 0.00%)       1,176 ( 0.00%)          7,176 ( 0.00%)           336 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::add_att(char const*, int, char const*)
      0              0                  23,596 ( 0.00%)         566 ( 0.00%)              0                      0           UnknownFile???:H5O__dtype_shared_decode
      0              0                  23,498 ( 0.00%)       2,172 ( 0.00%)              0                      0           UnknownFile???:H5MM_strndup
      0              0                  23,498 ( 0.00%)       2,172 ( 0.00%)              0                      0           UnknownFile???:strndup
      0              0                  23,088 ( 0.00%)         888 ( 0.00%)          1,776 ( 0.00%)           148 ( 0.00%)  UnknownFile???:nc4_dim_list_add
      0              0                  22,976 ( 0.00%)          97 ( 0.00%)              0                      0           UnknownFile???:H5HF__hdr_create
      0              0                  22,976 ( 0.00%)          97 ( 0.00%)              0                      0           UnknownFile???:H5HF_create
      0              0                  21,525 ( 0.00%)         440 ( 0.00%)             24 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5P__register_real
      0              0                  21,272 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_write
      0              0                  21,272 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:H5D__select_write
      0              0                  21,198 ( 0.00%)         604 ( 0.00%)              0                      0           UnknownFile???:get_type_info2
      0              0                  20,968 ( 0.00%)         221 ( 0.00%)          9,088 ( 0.00%)            75 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:open
      0              0                  20,247 ( 0.00%)          67 ( 0.00%)              0                      0           UnknownFile???:H5FL_blk_realloc
      0              0                  19,688 ( 0.00%)           8 ( 0.00%)          9,360 ( 0.00%)         1,170 ( 0.00%)  UnknownFile???:H5S_select_iterate
      0              0                  19,688 ( 0.00%)           8 ( 0.00%)          9,360 ( 0.00%)         1,170 ( 0.00%)  UnknownFile???:H5T_reclaim
      0              0                  19,688 ( 0.00%)           8 ( 0.00%)          9,360 ( 0.00%)         1,170 ( 0.00%)  UnknownFile???:H5Treclaim
      0              0                  19,296 ( 0.00%)         108 ( 0.00%)              0                      0           UnknownFile???:H5T__init_native_internal
      0              0                  18,584 ( 0.00%)         303 ( 0.00%)              0                      0           UnknownFile???:llapi_layout_get_by_xattr
      0              0                  18,162 ( 0.00%)         903 ( 0.00%)              0                      0           UnknownFile???:H5O_get_create_plist
      0              0                  18,029 ( 0.00%)         247 ( 0.00%)              0                      0           UnknownFile???:H5MM_strdup
      0              0                  17,829 ( 0.00%)         874 ( 0.00%)         17,829 ( 0.00%)           874 ( 0.00%)  UnknownFile???:nc_inq_attlen
      0              0                  17,829 ( 0.00%)         874 ( 0.00%)         17,829 ( 0.00%)           874 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::num_vals() const
      0              0                  17,656 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_readvv
      0              0                  17,656 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_readvv_sieve_cb
      0              0                  17,400 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_read
      0              0                  17,392 ( 0.00%)          10 ( 0.00%)         17,392 ( 0.00%)            10 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:stdio_mpi_redux
      0              0                  17,235 ( 0.00%)         742 ( 0.00%)              0                      0           UnknownFile???:H5A__compact_build_table
      0              0                  17,112 ( 0.00%)          58 ( 0.00%)              0                      0           UnknownFile???:H5HG__cache_heap_deserialize
      0              0                  16,416 ( 0.00%)         816 ( 0.00%)         16,416 ( 0.00%)           816 ( 0.00%)  UnknownFile???:nc4_check_name
      0              0                  16,388 ( 0.00%)         532 ( 0.00%)              0                      0           UnknownFile???:H5O__dtype_decode_helper
      0              0                  16,384 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:std::basic_filebuf<char, std::char_traits<char> >::_M_allocate_internal_buffer()
      0              0                  16,343 ( 0.00%)         649 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_copy_fh_cb
      0              0                  15,912 ( 0.00%)         212 ( 0.00%)         14,400 ( 0.00%)           120 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::put(double const*, long, long, long, long, long)
      0              0                  15,360 ( 0.00%)         240 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_flush
      0              0                  15,360 ( 0.00%)         240 ( 0.00%)              0                      0           UnknownFile???:H5D__flush_real
      0              0                  15,360 ( 0.00%)         240 ( 0.00%)              0                      0           UnknownFile???:H5D__flush_sieve_buf
      0              0                  15,336 ( 0.00%)         648 ( 0.00%)          3,240 ( 0.00%)           192 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::add_dim(char const*, long)
      0              0                  15,096 ( 0.00%)          64 ( 0.00%)              0                      0           UnknownFile???:H5O__alloc
      0              0                  14,704 ( 0.00%)          69 ( 0.00%)              0                      0           UnknownFile???:H5S_copy
      0              0                  14,648 ( 0.00%)          62 ( 0.00%)              0                      0           UnknownFile???:H5O__msg_alloc
      0              0                  14,612 ( 0.00%)         440 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_read_oh
      0              0                  14,512 ( 0.00%)          56 ( 0.00%)              0                      0           UnknownFile???:H5AC_insert_entry
      0              0                  14,512 ( 0.00%)          56 ( 0.00%)              0                      0           UnknownFile???:H5C_insert_entry
      0              0                  14,396 ( 0.00%)         434 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_read
      0              0                  14,320 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:H5F__super_init
      0              0                  13,744 ( 0.00%)          28 ( 0.00%)              0                      0           UnknownFile???:H5HG_insert
      0              0                  13,744 ( 0.00%)          28 ( 0.00%)              0                      0           UnknownFile???:H5T__vlen_disk_write
      0              0                  13,744 ( 0.00%)          28 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_blob_put
      0              0                  13,744 ( 0.00%)          28 ( 0.00%)              0                      0           UnknownFile???:H5VL_blob_put
      0              0                  13,574 ( 0.00%)          35 ( 0.00%)         13,325 ( 0.00%)            13 ( 0.00%)  UnknownFile???:hint_get_int
      0              0                  13,102 ( 0.00%)         219 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_append_oh
      0              0                  13,055 ( 0.00%)         634 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_iterate_bt2_cb
      0              0                  13,032 ( 0.00%)         576 ( 0.00%)          3,240 ( 0.00%)           192 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcDim::NcDim(NcFile*, char const*, long)
      0              0                  12,712 ( 0.00%)         126 ( 0.00%)          1,984 ( 0.00%)            10 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                  12,489 ( 0.00%)          28 ( 0.00%)         12,300 ( 0.00%)            12 ( 0.00%)  UnknownFile???:hint_get_key
      0              0                  12,480 ( 0.00%)         120 ( 0.00%)              0                      0           UnknownFile???:H5D__flush_all_cb
      0              0                  12,456 ( 0.00%)         504 ( 0.00%)          3,240 ( 0.00%)           192 ( 0.00%)  UnknownFile???:HDF5_def_dim
      0              0                  12,456 ( 0.00%)         504 ( 0.00%)          3,240 ( 0.00%)           192 ( 0.00%)  UnknownFile???:nc_def_dim
      0              0                  12,202 ( 0.00%)         222 ( 0.00%)         12,202 ( 0.00%)           222 ( 0.00%)  UnknownFile???:processuri
      0              0                  12,202 ( 0.00%)         222 ( 0.00%)         12,202 ( 0.00%)           222 ( 0.00%)  UnknownFile???:testurl
      0              0                  12,168 ( 0.00%)         234 ( 0.00%)          9,984 ( 0.00%)           156 ( 0.00%)  UnknownFile???:H5T__conv_ref
      0              0                  12,115 ( 0.00%)         866 ( 0.00%)          5,022 ( 0.00%)           370 ( 0.00%)  UnknownFile???:H5A__dense_fh_name_cmp
      0              0                  11,826 ( 0.00%)         364 ( 0.00%)          3,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5G_get_create_plist
      0              0                  11,826 ( 0.00%)         364 ( 0.00%)          3,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5Gget_create_plist
      0              0                  11,826 ( 0.00%)         364 ( 0.00%)          3,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5VL__native_group_get
      0              0                  11,826 ( 0.00%)         364 ( 0.00%)          3,600 ( 0.00%)            50 ( 0.00%)  UnknownFile???:H5VL_group_get
      0              0                  11,704 ( 0.00%)         266 ( 0.00%)              0                      0           UnknownFile???:H5SL_create
      0              0                  11,696 ( 0.00%)         126 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:posix_track_new_file_record
      0              0                  11,604 ( 0.00%)         253 ( 0.00%)         11,500 ( 0.00%)           250 ( 0.00%)  UnknownFile???:H5Literate2
      0              0                  11,536 ( 0.00%)         148 ( 0.00%)              0                      0           UnknownFile???:new_NC
      0              0                  11,392 ( 0.00%)         178 ( 0.00%)              0                      0           UnknownFile???:H5F_shared_block_read
      0              0                  11,388 ( 0.00%)         104 ( 0.00%)              0                      0           UnknownFile???:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
      0              0                  11,296 ( 0.00%)          25 ( 0.00%)          2,400 ( 0.00%)            24 ( 0.00%)  UnknownFile???:__vfprintf_internal
      0              0                  11,296 ( 0.00%)          25 ( 0.00%)          2,400 ( 0.00%)            24 ( 0.00%)  UnknownFile???:printf_positional
      0              0                  11,078 ( 0.00%)       1,258 ( 0.00%)              0                      0           UnknownFile???:NC_hashmapadd
      0              0                  11,078 ( 0.00%)       1,258 ( 0.00%)              0                      0           UnknownFile???:ncindexadd
      0              0                  10,653 ( 0.00%)         538 ( 0.00%)         10,653 ( 0.00%)           538 ( 0.00%)  UnknownFile???:NC4_HDF5_get_att
      0              0                  10,653 ( 0.00%)         538 ( 0.00%)         10,653 ( 0.00%)           538 ( 0.00%)  UnknownFile???:nc_get_att_text
      0              0                  10,528 ( 0.00%)       1,316 ( 0.00%)         10,528 ( 0.00%)         1,316 ( 0.00%)  UnknownFile???:H5T_cmp
      0              0                  10,440 ( 0.00%)          14 ( 0.00%)              0                      0           UnknownFile???:H5D__btree_idx_init
      0              0                  10,392 ( 0.00%)         198 ( 0.00%)              0                      0           UnknownFile???:H5Pset_fill_value
      0              0                  10,352 ( 0.00%)         402 ( 0.00%)          2,960 ( 0.00%)           148 ( 0.00%)  UnknownFile???:H5Pcreate
      0              0                  10,240 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:_IO_file_underflow@@GLIBC_2.2.5
      0              0                  10,224 ( 0.00%)         504 ( 0.00%)          2,784 ( 0.00%)           144 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::add_att(char const*, char const*)
      0              0                  10,161 ( 0.00%)          37 ( 0.00%)              0                      0           UnknownFile???:H5O__alloc_chunk
      0              0                   9,928 ( 0.00%)          22 ( 0.00%)              0                      0           UnknownFile???:H5O__alloc_msgs
      0              0                   9,904 ( 0.00%)         116 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:fileno
      0              0                   9,872 ( 0.00%)         665 ( 0.00%)          6,550 ( 0.00%)           700 ( 0.00%)  UnknownFile???:H5DSget_scale_name
      0              0                   9,845 ( 0.00%)          14 ( 0.00%)          8,357 ( 0.00%)             4 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fopen64
      0              0                   9,845 ( 0.00%)          14 ( 0.00%)          8,357 ( 0.00%)             4 ( 0.00%)  UnknownFile???:std::__basic_file<char>::open(char const*, std::_Ios_Openmode, int)
      0              0                   9,796 ( 0.00%)         163 ( 0.00%)              0                      0           UnknownFile???:H5B2__hdr_protect
      0              0                   9,472 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:H5F_cwfs_add
      0              0                   9,264 ( 0.00%)         192 ( 0.00%)            816 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5VL_dataset_create
      0              0                   9,216 ( 0.00%)         144 ( 0.00%)              0                      0           UnknownFile???:H5F__accum_flush
      0              0                   9,216 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:_IO_default_uflow
      0              0                   9,216 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:_IO_getline_info
      0              0                   9,188 ( 0.00%)       1,094 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_copy
      0              0                   9,040 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5O__layout_decode
      0              0                   9,024 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5D__layout_oh_create
      0              0                   9,024 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5O__layout_copy
      0              0                   8,976 ( 0.00%)       1,122 ( 0.00%)              0                      0           UnknownFile???:H5T__vlen_mem_seq_write
      0              0                   8,827 ( 0.00%)          60 ( 0.00%)              0                      0           UnknownFile???:H5O__chunk_deserialize
      0              0                   8,696 ( 0.00%)          99 ( 0.00%)              0                      0           UnknownFile???:__sti____cudaRegisterAll()
      0              0                   8,644 ( 0.00%)         116 ( 0.00%)              0                      0           UnknownFile???:H5B2_open
      0              0                   8,576 ( 0.00%)          74 ( 0.00%)          8,576 ( 0.00%)            74 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:__lxstat
      0              0                   8,576 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:H5_build_extpath
      0              0                   8,576 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:NCpath2utf8
      0              0                   8,576 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:parsepath
      0              0                   8,576 ( 0.00%)          74 ( 0.00%)              0                      0           UnknownFile???:unparsepath
      0              0                   8,536 ( 0.00%)          21 ( 0.00%)              0                      0           UnknownFile???:H5B_shared_new
      0              0                   8,448 ( 0.00%)          96 ( 0.00%)              0                      0           UnknownFile???:H5P_poke
      0              0                   8,383 ( 0.00%)         150 ( 0.00%)              0                      0           UnknownFile???:H5P__facc_reg_prop
      0              0                   8,280 ( 0.00%)         192 ( 0.00%)              0                      0           UnknownFile???:nc4_type_new
      0              0                   8,272 ( 0.00%)          94 ( 0.00%)              0                      0           UnknownFile???:__cudaRegisterFunction
      0              0                   8,272 ( 0.00%)          94 ( 0.00%)              0                      0           UnknownFile???:__nv_cudaEntityRegisterCallback(void**)
      0              0                   8,208 ( 0.00%)         288 ( 0.00%)          2,304 ( 0.00%)            72 ( 0.00%)  UnknownFile???:H5T__insert
      0              0                   8,208 ( 0.00%)         288 ( 0.00%)          2,304 ( 0.00%)            72 ( 0.00%)  UnknownFile???:H5Tinsert
      0              0                   8,192 ( 0.00%)           2 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fgets
      0              0                   8,192 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:_IO_file_overflow@@GLIBC_2.2.5
      0              0                   8,192 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:_IO_file_xsputn@@GLIBC_2.2.5
      0              0                   8,192 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:fgets
      0              0                   8,140 ( 0.00%)           4 ( 0.00%)              0                      0           /ptmp/peint/build-cray-gcc-20210421.193301.906125391/cray-gcc/BUILD/snos_objdir/x86_64-suse-linux/libquadmath/../../../cray-gcc-10.3.0-202104220029.0777bcc28ac1d/libquadmath/printf/quadmath-printf.c:register_printf_flt128
      0              0                   7,528 ( 0.00%)          28 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fputs
      0              0                   7,528 ( 0.00%)          28 ( 0.00%)              0                      0           src/base/Announce.cpp:Announce(char const*, ...)
      0              0                   7,462 ( 0.00%)         994 ( 0.00%)              0                      0           UnknownFile???:H5O__fill_copy
      0              0                   7,424 ( 0.00%)           5 ( 0.00%)          3,288 ( 0.00%)             4 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_get_exe_and_mounts
      0              0                   7,384 ( 0.00%)         122 ( 0.00%)              0                      0           UnknownFile???:H5F_flush_tagged_metadata
      0              0                   7,200 ( 0.00%)          24 ( 0.00%)          2,400 ( 0.00%)            24 ( 0.00%)  UnknownFile???:_IO_default_xsputn
      0              0                   7,200 ( 0.00%)          24 ( 0.00%)          2,400 ( 0.00%)            24 ( 0.00%)  UnknownFile???:_IO_str_overflow
      0              0                   7,016 ( 0.00%)          62 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                   6,952 ( 0.00%)          91 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:stdio_track_new_file_record
      0              0                   6,870 ( 0.00%)         280 ( 0.00%)              0                      0           UnknownFile???:H5E__create_msg.constprop.0
      0              0                   6,696 ( 0.00%)          23 ( 0.00%)              0                      0           UnknownFile???:H5MF_xfree
      0              0                   6,568 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5D__chunk_io_init
      0              0                   6,272 ( 0.00%)          98 ( 0.00%)              0                      0           UnknownFile???:H5FD_locate_signature
      0              0                   6,180 ( 0.00%)          33 ( 0.00%)              0                      0           UnknownFile???:H5O__cache_chk_deserialize
      0              0                   6,152 ( 0.00%)          43 ( 0.00%)              0                      0           UnknownFile???:H5RS_create
      0              0                   6,144 ( 0.00%)          96 ( 0.00%)              0                      0           UnknownFile???:H5F__accum_reset
      0              0                   5,908 ( 0.00%)         605 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_iterate
      0              0                   5,792 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:H5FS_sect_add
      0              0                   5,696 ( 0.00%)          64 ( 0.00%)          1,984 ( 0.00%)            10 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                   5,696 ( 0.00%)          64 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)
      0              0                   5,696 ( 0.00%)          64 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)
      0              0                   5,600 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:H5FS__sinfo_new
      0              0                   5,536 ( 0.00%)          27 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5A__get_type
      0              0                   5,536 ( 0.00%)          27 ( 0.00%)            512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5Aget_type
      0              0                   5,497 ( 0.00%)          45 ( 0.00%)          3,610 ( 0.00%)            12 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-config.c:darshan_parse_config_file
      0              0                   5,328 ( 0.00%)         592 ( 0.00%)              0                      0           UnknownFile???:nc4_var_set_ndims
      0              0                   4,976 ( 0.00%)          57 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_core_register_record
      0              0                   4,872 ( 0.00%)          12 ( 0.00%)              0                      0           UnknownFile???:H5MF__add_sect
      0              0                   4,864 ( 0.00%)          32 ( 0.00%)              0                      0           UnknownFile???:H5G_build_fullpath_refstr_str
      0              0                   4,864 ( 0.00%)          32 ( 0.00%)              0                      0           UnknownFile???:H5G_name_set
      0              0                   4,808 ( 0.00%)         500 ( 0.00%)              0                      0           UnknownFile???:H5O__link_copy
      0              0                   4,800 ( 0.00%)         400 ( 0.00%)        120,000 ( 0.00%)           800 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::set_cur(long, long, long, long, long)
      0              0                   4,776 ( 0.00%)         152 ( 0.00%)             24 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5P__add_prop
      0              0                   4,623 ( 0.00%)          35 ( 0.00%)              0                      0           UnknownFile???:H5O__cache_deserialize
      0              0                   4,576 ( 0.00%)           3 ( 0.00%)          4,576 ( 0.00%)             3 ( 0.00%)  /home/jenkins/src/pmi_core/_pmi_rankpid_file.c:_pmi_write_rankpid_file
      0              0                   4,568 ( 0.00%)           2 ( 0.00%)          4,568 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIDI_CRAY_mpiio_init
      0              0                   4,464 ( 0.00%)          27 ( 0.00%)          4,057 ( 0.00%)            16 ( 0.00%)  UnknownFile???:NCDISPATCH_initialize
      0              0                   4,459 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPIDI_POSIX_coll_init
      0              0                   4,344 ( 0.00%)          14 ( 0.00%)             24 ( 0.00%)             4 ( 0.00%)  UnknownFile???:build_trtable
      0              0                   4,344 ( 0.00%)          14 ( 0.00%)             24 ( 0.00%)             4 ( 0.00%)  UnknownFile???:re_search_internal
      0              0                   4,344 ( 0.00%)          14 ( 0.00%)             24 ( 0.00%)             4 ( 0.00%)  UnknownFile???:regexec@@GLIBC_2.3.4
      0              0                   4,278 ( 0.00%)          22 ( 0.00%)          4,057 ( 0.00%)            16 ( 0.00%)  UnknownFile???:ncrc_initialize
      0              0                   4,263 ( 0.00%)          38 ( 0.00%)              0                      0           UnknownFile???:H5G_mkroot
      0              0                   4,248 ( 0.00%)          36 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::push_back(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                   4,242 ( 0.00%)         107 ( 0.00%)              0                      0           UnknownFile???:H5P__dxfr_reg_prop
      0              0                   4,240 ( 0.00%)          20 ( 0.00%)              0                      0           UnknownFile???:H5T__get_native_type
      0              0                   4,240 ( 0.00%)          20 ( 0.00%)              0                      0           UnknownFile???:H5Tget_native_type
      0              0                   4,224 ( 0.00%)         356 ( 0.00%)          2,400 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5A__open
      0              0                   4,144 ( 0.00%)         296 ( 0.00%)          1,776 ( 0.00%)           148 ( 0.00%)  UnknownFile???:nclistset
      0              0                   4,144 ( 0.00%)         296 ( 0.00%)          1,776 ( 0.00%)           148 ( 0.00%)  UnknownFile???:obj_track
      0              0                   4,136 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:__libc_allocate_once_slow
      0              0                   4,136 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:getmntent
      0              0                   4,096 ( 0.00%)           1 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_log_finalize
      0              0                   4,096 ( 0.00%)           1 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:fprintf
      0              0                   4,096 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:ADIOI_Shfp_fname
      0              0                   4,096 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:fputs
      0              0                   4,096 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:register_printf_specifier
      0              0                   4,064 ( 0.00%)          84 ( 0.00%)              0                      0           UnknownFile???:H5HF__man_insert
      0              0                   4,064 ( 0.00%)          84 ( 0.00%)              0                      0           UnknownFile???:H5HF_insert
      0              0                   3,847 ( 0.00%)          18 ( 0.00%)              0                      0           UnknownFile???:H5O_create
      0              0                   3,840 ( 0.00%)         120 ( 0.00%)          3,000 ( 0.00%)            96 ( 0.00%)  UnknownFile???:NC4_new_provenance
      0              0                   3,816 ( 0.00%)          18 ( 0.00%)              0                      0           UnknownFile???:H5Tcopy
      0              0                   3,744 ( 0.00%)          36 ( 0.00%)              0                      0           UnknownFile???:H5A__copy
      0              0                   3,676 ( 0.00%)          37 ( 0.00%)          1,972 ( 0.00%)             8 ( 0.00%)  UnknownFile???:regcomp
      0              0                   3,644 ( 0.00%)          71 ( 0.00%)              0                      0           UnknownFile???:H5A__get_ainfo
      0              0                   3,600 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcTimeDimension, std::allocator<NcTimeDimension> >::_M_allocate(unsigned long)
      0              0                   3,600 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcTimeDimension>::allocate(unsigned long, void const*)
      0              0                   3,600 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<NcTimeDimension, std::allocator<NcTimeDimension> >::push_back(NcTimeDimension&&)
      0              0                   3,600 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<NcTimeDimension, std::allocator<NcTimeDimension> >::_M_realloc_insert<NcTimeDimension>(__gnu_cxx::__normal_iterator<NcTimeDimension*, std::vector<NcTimeDimension, std::allocator<NcTimeDimension> > >, NcTimeDimension&&)
      0              0                   3,600 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<NcTimeDimension, std::allocator<NcTimeDimension> >::emplace_back<NcTimeDimension>(NcTimeDimension&&)
      0              0                   3,521 ( 0.00%)          11 ( 0.00%)          1,636 ( 0.00%)             4 ( 0.00%)  UnknownFile???:__tz_convert
      0              0                   3,521 ( 0.00%)          11 ( 0.00%)          1,636 ( 0.00%)             4 ( 0.00%)  UnknownFile???:tzset_internal.part.0
      0              0                   3,512 ( 0.00%)          30 ( 0.00%)      3,373,648 ( 0.01%)         7,483 ( 0.00%)  UnknownFile???:__run_exit_handlers
      0              0                   3,512 ( 0.00%)          30 ( 0.00%)      3,369,584 ( 0.01%)         7,357 ( 0.00%)  UnknownFile???:exit
      0              0                   3,512 ( 0.00%)          30 ( 0.00%)      3,365,199 ( 0.01%)         7,102 ( 0.00%)  UnknownFile???:(below main)
      0              0                   3,512 ( 0.00%)          30 ( 0.00%)      3,264,336 ( 0.01%)         7,424 ( 0.00%)  UnknownFile???:H5_term_library.part.0
      0              0                   3,501 ( 0.00%)          10 ( 0.00%)          1,636 ( 0.00%)             4 ( 0.00%)  UnknownFile???:__tzfile_read
      0              0                   3,464 ( 0.00%)          17 ( 0.00%)              0                      0           UnknownFile???:H5MF_free_aggrs
      0              0                   3,432 ( 0.00%)          27 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:stdio_runtime_initialize
      0              0                   3,392 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:H5T_copy_reopen
      0              0                   3,375 ( 0.00%)         269 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/ncvalues.cpp:NcValues_char::NcValues_char(long)
      0              0                   3,320 ( 0.00%)          82 ( 0.00%)              0                      0           UnknownFile???:H5FS__new
      0              0                   3,320 ( 0.00%)          82 ( 0.00%)              0                      0           UnknownFile???:H5FS_create
      0              0                   3,250 ( 0.00%)          58 ( 0.00%)              0                      0           UnknownFile???:H5P__create_class
      0              0                   3,232 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5MF__aggr_alloc
      0              0                   3,232 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5MF_aggr_vfd_alloc
      0              0                   3,232 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5MF_alloc
      0              0                   3,168 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5F__accum_adjust
      0              0                   3,164 ( 0.00%)          35 ( 0.00%)          1,972 ( 0.00%)             8 ( 0.00%)  UnknownFile???:re_compile_internal
      0              0                   3,105 ( 0.00%)          14 ( 0.00%)          3,081 ( 0.00%)            13 ( 0.00%)  UnknownFile???:NC_rcload
      0              0                   3,100 ( 0.00%)          55 ( 0.00%)            248 ( 0.00%)            29 ( 0.00%)  UnknownFile???:MPIR_Comm_commit
      0              0                   3,092 ( 0.00%)          32 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:std::basic_istream<char, std::char_traits<char> >& std::getline<char, std::char_traits<char>, std::allocator<char> >(std::basic_istream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, char)
      0              0                   3,057 ( 0.00%)          12 ( 0.00%)          3,057 ( 0.00%)            12 ( 0.00%)  UnknownFile???:rcsearch
      0              0                   3,032 ( 0.00%)          29 ( 0.00%)         89,419 ( 0.00%)           933 ( 0.00%)  UnknownFile???:H5I_clear_type
      0              0                   3,032 ( 0.00%)          29 ( 0.00%)         15,499 ( 0.00%)           535 ( 0.00%)  UnknownFile???:H5P_term_package
      0              0                   2,968 ( 0.00%)          14 ( 0.00%)              0                      0           UnknownFile???:nc4_get_hdf_typeid
      0              0                   2,960 ( 0.00%)          20 ( 0.00%)            148 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_Comm_commit_internal
      0              0                   2,960 ( 0.00%)          20 ( 0.00%)              0                      0           UnknownFile???:MPID_Comm_create_hook
      0              0                   2,957 ( 0.00%)          15 ( 0.00%)              0                      0           UnknownFile???:H5P__dcrt_reg_prop
      0              0                   2,896 ( 0.00%)          22 ( 0.00%)              0                      0           UnknownFile???:H5B2__hdr_init
      0              0                   2,880 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:MPIDI_CRAY_Comm_create_hook
      0              0                   2,856 ( 0.00%)          30 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:std::__basic_file<char>::xsgetn(char*, long)
      0              0                   2,856 ( 0.00%)          30 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:std::basic_filebuf<char, std::char_traits<char> >::underflow()
      0              0                   2,824 ( 0.00%)           2 ( 0.00%)          2,824 ( 0.00%)             2 ( 0.00%)  UnknownFile???:qsort_r
      0              0                   2,782 ( 0.00%)         110 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_create
      0              0                   2,736 ( 0.00%)          13 ( 0.00%)              0                      0           UnknownFile???:H5B2__hdr_create
      0              0                   2,736 ( 0.00%)          13 ( 0.00%)              0                      0           UnknownFile???:H5B2_create
      0              0                   2,728 ( 0.00%)         248 ( 0.00%)          2,728 ( 0.00%)           248 ( 0.00%)  src/base/NetCDFUtilities.cpp:NcGetTimeVariable(NcFile&)
      0              0                   2,714 ( 0.00%)          68 ( 0.00%)             16 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5P__fcrt_reg_prop
      0              0                   2,688 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5S_combine_hyperslab
      0              0                   2,608 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5S__set_regular_hyperslab
      0              0                   2,608 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5S_select_hyperslab
      0              0                   2,608 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5Sselect_hyperslab
      0              0                   2,592 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5S__hyper_copy
      0              0                   2,592 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5S_select_copy
      0              0                   2,504 ( 0.00%)          79 ( 0.00%)              0                      0           UnknownFile???:H5HF__sect_single_reduce
      0              0                   2,504 ( 0.00%)          79 ( 0.00%)              0                      0           UnknownFile???:H5HF__space_add
      0              0                   2,496 ( 0.00%)           5 ( 0.00%)          2,448 ( 0.00%)             4 ( 0.00%)  UnknownFile???:H5D_init
      0              0                   2,488 ( 0.00%)          18 ( 0.00%)          1,900 ( 0.00%)           200 ( 0.00%)  UnknownFile???:H5G_loc_find
      0              0                   2,432 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:H5G__link_to_loc
      0              0                   2,400 ( 0.00%)         300 ( 0.00%)          2,400 ( 0.00%)           300 ( 0.00%)  UnknownFile???:H5O__attr_find_opened_attr
      0              0                   2,240 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:H5O__chunk_protect
      0              0                   2,216 ( 0.00%)          13 ( 0.00%)              0                      0           UnknownFile???:H5T__init_native_float_types
      0              0                   2,158 ( 0.00%)         106 ( 0.00%)              0                      0           UnknownFile???:H5G__compact_insert
      0              0                   2,108 ( 0.00%)         205 ( 0.00%)              0                      0           UnknownFile???:H5O__link_decode
      0              0                   2,096 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5O__cache_get_final_load_size
      0              0                   2,096 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5O__prefix_deserialize
      0              0                   2,088 ( 0.00%)         225 ( 0.00%)              0                      0           UnknownFile???:H5Pset_cache
      0              0                   2,080 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5O_create_ohdr
      0              0                   2,073 ( 0.00%)           5 ( 0.00%)          2,050 ( 0.00%)             2 ( 0.00%)  UnknownFile???:hint_get_str
      0              0                   2,060 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:register_printf_modifier
      0              0                   2,056 ( 0.00%)          67 ( 0.00%)              0                      0           UnknownFile???:H5FL_arr_malloc
      0              0                   2,048 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5L_init
      0              0                   2,048 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5L_register
      0              0                   2,048 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5L_register_external
      0              0                   2,016 ( 0.00%)          15 ( 0.00%)              0                      0           UnknownFile???:H5G__node_init
      0              0                   1,984 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:register_printf_type
      0              0                   1,944 ( 0.00%)         102 ( 0.00%)              0                      0           UnknownFile???:H5P__dcrt_fill_value_get
      0              0                   1,936 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:create_token_tree.isra.12
      0              0                   1,936 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:parse_branch
      0              0                   1,936 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:parse_expression
      0              0                   1,936 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:parse_reg_exp
      0              0                   1,920 ( 0.00%)          96 ( 0.00%)              0                      0           UnknownFile???:H5B2__insert_leaf
      0              0                   1,920 ( 0.00%)          49 ( 0.00%)              0                      0           UnknownFile???:H5B2_modify
      0              0                   1,900 ( 0.00%)         200 ( 0.00%)              0                      0           UnknownFile???:H5G__compact_build_table_cb
      0              0                   1,900 ( 0.00%)         200 ( 0.00%)              0                      0           UnknownFile???:H5G__compact_lookup
      0              0                   1,900 ( 0.00%)         200 ( 0.00%)              0                      0           UnknownFile???:H5G__compact_lookup_cb
      0              0                   1,900 ( 0.00%)         200 ( 0.00%)              0                      0           UnknownFile???:H5G__obj_lookup
      0              0                   1,898 ( 0.00%)         204 ( 0.00%)              0                      0           UnknownFile???:get_fill_info
      0              0                   1,872 ( 0.00%)          18 ( 0.00%)              0                      0           UnknownFile???:H5O__attr_copy
      0              0                   1,856 ( 0.00%)          26 ( 0.00%)            656 ( 0.00%)            14 ( 0.00%)  UnknownFile???:MPII_Comm_copy
      0              0                   1,856 ( 0.00%)          26 ( 0.00%)            656 ( 0.00%)            14 ( 0.00%)  UnknownFile???:MPIR_Comm_dup_impl
      0              0                   1,856 ( 0.00%)          26 ( 0.00%)            656 ( 0.00%)            14 ( 0.00%)  UnknownFile???:PMPI_Comm_dup
      0              0                   1,792 ( 0.00%)          32 ( 0.00%)              0                      0           src/base/DataOp.cpp:DataOpManager::Add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                   1,792 ( 0.00%)          32 ( 0.00%)              0                      0           src/base/Variable.cpp:VariableRegistry::VariableRegistry()
      0              0                   1,767 ( 0.00%)          13 ( 0.00%)              0                      0           UnknownFile???:H5O_apply_ohdr
      0              0                   1,736 ( 0.00%)           7 ( 0.00%)              0                      0           UnknownFile???:H5MF__start_fstype
      0              0                   1,723 ( 0.00%)          53 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace(unsigned long, unsigned long, char const*, unsigned long)
      0              0                   1,722 ( 0.00%)         296 ( 0.00%)              0                      0           UnknownFile???:H5P__dcrt_fill_value_copy
      0              0                   1,722 ( 0.00%)         296 ( 0.00%)              0                      0           UnknownFile???:H5P__dcrt_fill_value_set
      0              0                   1,696 ( 0.00%)          53 ( 0.00%)              0                      0           UnknownFile???:ncbytesnew
      0              0                   1,680 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5O__alloc_null
      0              0                   1,662 ( 0.00%)         106 ( 0.00%)              0                      0           UnknownFile???:H5G_obj_insert
      0              0                   1,600 ( 0.00%)         100 ( 0.00%)              0                      0           UnknownFile???:get_chunking_info
      0              0                   1,600 ( 0.00%)          33 ( 0.00%)            248 ( 0.00%)            17 ( 0.00%)  UnknownFile???:MPIR_Type_commit
      0              0                   1,593 ( 0.00%)          79 ( 0.00%)              0                      0           UnknownFile???:H5E__create_msg.constprop.1
      0              0                   1,584 ( 0.00%)          75 ( 0.00%)              0                      0           UnknownFile???:H5HF__space_start
      0              0                   1,560 ( 0.00%)          23 ( 0.00%)              0                      0           UnknownFile???:H5O__sdspace_shared_decode
      0              0                   1,560 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5HF__man_dblock_create
      0              0                   1,560 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5HF__man_dblock_new
      0              0                   1,536 ( 0.00%)         168 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/netcdf.cpp:NcVar::attname(int) const
      0              0                   1,536 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5Z_init
      0              0                   1,536 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5Z_register
      0              0                   1,496 ( 0.00%)          13 ( 0.00%)              0                      0           UnknownFile???:H5B2__cache_hdr_deserialize
      0              0                   1,480 ( 0.00%)          65 ( 0.00%)          1,480 ( 0.00%)            65 ( 0.00%)  UnknownFile???:ADIOI_CRAY_W_Exchange_data.constprop.0
      0              0                   1,480 ( 0.00%)          14 ( 0.00%)              0                      0           UnknownFile???:H5S_read
      0              0                   1,432 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5HF__cache_dblock_deserialize
      0              0                   1,424 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5HF__hdr_alloc
      0              0                   1,418 ( 0.00%)         205 ( 0.00%)              0                      0           UnknownFile???:H5O__fill_new_shared_decode
      0              0                   1,360 ( 0.00%)          53 ( 0.00%)              0                      0           UnknownFile???:H5VL_wrap_register
      0              0                   1,352 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:MPII_Dataloop_alloc_and_copy
      0              0                   1,343 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5VL__register_connector
      0              0                   1,343 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5VL_native_register
      0              0                   1,336 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5B2__hdr_alloc
      0              0                   1,288 ( 0.00%)         101 ( 0.00%)            816 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5D__create_api_common
      0              0                   1,288 ( 0.00%)         101 ( 0.00%)            816 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5Dcreate2
      0              0                   1,288 ( 0.00%)          11 ( 0.00%)              0                      0           UnknownFile???:H5G__name_init
      0              0                   1,288 ( 0.00%)           8 ( 0.00%)          1,288 ( 0.00%)             8 ( 0.00%)  /home/jenkins/src/pmi_core/pmi_control_net.c:_pmi_control_net_init
      0              0                   1,280 ( 0.00%)          27 ( 0.00%)              0                      0           UnknownFile???:H5C_flush_tagged_entries
      0              0                   1,272 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5O__dtype_copy
      0              0                   1,272 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5T__create
      0              0                   1,265 ( 0.00%)          24 ( 0.00%)              0                      0           UnknownFile???:H5P__dacc_reg_prop
      0              0                   1,264 ( 0.00%)          53 ( 0.00%)              0                      0           UnknownFile???:H5VL_new_connector
      0              0                   1,240 ( 0.00%)          26 ( 0.00%)              0                      0           UnknownFile???:H5AC_flush_tagged_metadata
      0              0                   1,220 ( 0.00%)           4 ( 0.00%)          1,220 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_Allreduce_impl
      0              0                   1,220 ( 0.00%)           4 ( 0.00%)          1,220 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_Allreduce_intra_auto
      0              0                   1,220 ( 0.00%)           4 ( 0.00%)          1,220 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_Allreduce_intra_recursive_doubling
      0              0                   1,220 ( 0.00%)           4 ( 0.00%)          1,220 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_CRAY_Allreduce
      0              0                   1,216 ( 0.00%)          25 ( 0.00%)              0                      0           UnknownFile???:ADIOI_Calloc_fn
      0              0                   1,200 ( 0.00%)         150 ( 0.00%)              0                      0           src/netcdf-cxx-4.2/netcdf.cpp:NcDim::NcDim(NcFile*, int)
      0              0                   1,200 ( 0.00%)          12 ( 0.00%)          1,184 ( 0.00%)             8 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::get(double*, long, long, long, long, long) const
      0              0                   1,184 ( 0.00%)           7 ( 0.00%)              0                      0           UnknownFile???:H5D__contig_io_init
      0              0                   1,173 ( 0.00%)           8 ( 0.00%)            976 ( 0.00%)             3 ( 0.00%)  UnknownFile???:aws_load_credentials
      0              0                   1,160 ( 0.00%)          17 ( 0.00%)              0                      0           UnknownFile???:H5A__compact_build_table_cb
      0              0                   1,152 ( 0.00%)          24 ( 0.00%)              0                      0           UnknownFile???:H5Pset_link_creation_order
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_get_node()
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::allocate(unsigned long, void const*)
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_map.h:std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, DataOp*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::insert(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>&&)
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_insert_<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_Alloc_node>(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>&&, std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_Alloc_node&)
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_Alloc_node::operator()<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>&&) const
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >* std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_create_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>&&)
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_tree.h:std::pair<std::_Rb_tree_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, bool> std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_insert_unique<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>&&)
      0              0                   1,152 ( 0.00%)          16 ( 0.00%)              0                      0           src/base/DataOp.cpp:DataOpManager::Add(DataOp*)
      0              0                   1,152 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::_M_allocate(unsigned long)
      0              0                   1,152 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<Time, std::allocator<Time> > >::allocate(unsigned long, void const*)
      0              0                   1,144 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:getdelim
      0              0                   1,135 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:H5G__obj_create_real
      0              0                   1,040 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:H5O__attr_open_cb
      0              0                   1,024 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5FD_register
      0              0                   1,024 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5FD_sec2_init
      0              0                   1,024 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5_default_vfd_init
      0              0                   1,024 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:_IO_file_xsgetn
      0              0                   1,024 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:fgets_unlocked
      0              0                   1,024 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:fread_unlocked
      0              0                   1,024 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:get_mnt_entry
      0              0                   1,024 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:getmntent_r
      0              0                   1,008 ( 0.00%)          18 ( 0.00%)             88 ( 0.00%)             7 ( 0.00%)  UnknownFile???:MPIR_Dataloop_create
      0              0                   1,008 ( 0.00%)          18 ( 0.00%)             88 ( 0.00%)             7 ( 0.00%)  UnknownFile???:MPIR_Type_commit_impl
      0              0                   1,008 ( 0.00%)          18 ( 0.00%)             88 ( 0.00%)             7 ( 0.00%)  UnknownFile???:PMPI_Type_commit
      0              0                     998 ( 0.00%)          25 ( 0.00%)              0                      0           UnknownFile???:H5P__lacc_reg_prop
      0              0                     976 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5CX_push
      0              0                     960 ( 0.00%)          10 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-heatmap.c:heatmap_register
      0              0                     952 ( 0.00%)          16 ( 0.00%)            352 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Comm_split_impl
      0              0                     952 ( 0.00%)          16 ( 0.00%)            352 ( 0.00%)            10 ( 0.00%)  UnknownFile???:PMPI_Comm_split
      0              0                     944 ( 0.00%)           2 ( 0.00%)            944 ( 0.00%)             2 ( 0.00%)  UnknownFile???:NC_readfile
      0              0                     944 ( 0.00%)           2 ( 0.00%)            944 ( 0.00%)             2 ( 0.00%)  UnknownFile???:NC_readfilen
      0              0                     944 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:setmntent
      0              0                     923 ( 0.00%)          25 ( 0.00%)              8 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5P__ocrt_reg_prop
      0              0                     885 ( 0.00%)          40 ( 0.00%)            505 ( 0.00%)            15 ( 0.00%)  UnknownFile???:ADIOI_CRAY_Calc_others_req
      0              0                     880 ( 0.00%)          25 ( 0.00%)              0                      0           UnknownFile???:H5AC_prep_for_file_flush
      0              0                     880 ( 0.00%)          25 ( 0.00%)              0                      0           UnknownFile???:H5C_set_slist_enabled
      0              0                     862 ( 0.00%)          53 ( 0.00%)              0                      0           UnknownFile???:check_for_classic_model
      0              0                     855 ( 0.00%)           7 ( 0.00%)              0                      0           UnknownFile???:H5G__obj_create
      0              0                     848 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5P_get_fill_value
      0              0                     848 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5Pget_fill_value
      0              0                     848 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5T__array_create
      0              0                     848 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5T__vlen_create
      0              0                     832 ( 0.00%)          43 ( 0.00%)              0                      0           UnknownFile???:H5S__extent_copy_real
      0              0                     816 ( 0.00%)          96 ( 0.00%)              0                      0           UnknownFile???:H5G_normalize
      0              0                     800 ( 0.00%)         150 ( 0.00%)              0                      0           UnknownFile???:H5Pset_libver_bounds
      0              0                     800 ( 0.00%)         150 ( 0.00%)              0                      0           UnknownFile???:hdf5set_format_compatibility
      0              0                     800 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:MPII_Dataloop_create_contiguous
      0              0                     780 ( 0.00%)           3 ( 0.00%)            780 ( 0.00%)             3 ( 0.00%)  UnknownFile???:MPIR_Get_contextid_sparse_group
      0              0                     768 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:H5I_register_type
      0              0                     768 ( 0.00%)          12 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:read
      0              0                     720 ( 0.00%)          18 ( 0.00%)            208 ( 0.00%)            12 ( 0.00%)  UnknownFile???:MPII_Dataloop_create_struct
      0              0                     694 ( 0.00%)           4 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5PL_init
      0              0                     688 ( 0.00%)           3 ( 0.00%)              0                      0           src/blobs/StitchBlobs.cpp:GlobalTimesExchangeOp::GlobalTimesExchangeOp(int, std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > const&, int const&, int const&)
      0              0                     672 ( 0.00%)          96 ( 0.00%)              0                      0           UnknownFile???:nc4_get_fill_value
      0              0                     664 ( 0.00%)          28 ( 0.00%)              0                      0           UnknownFile???:H5F__post_open_api_common
      0              0                     624 ( 0.00%)          26 ( 0.00%)              0                      0           UnknownFile???:H5F__post_open
      0              0                     624 ( 0.00%)          26 ( 0.00%)              0                      0           UnknownFile???:H5VL__native_file_optional
      0              0                     624 ( 0.00%)          26 ( 0.00%)              0                      0           UnknownFile???:H5VL_create_object_using_vol_id
      0              0                     624 ( 0.00%)          26 ( 0.00%)              0                      0           UnknownFile???:H5VL_file_optional
      0              0                     592 ( 0.00%)          15 ( 0.00%)            160 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Datatype_commit_pairtypes
      0              0                     592 ( 0.00%)          15 ( 0.00%)            160 ( 0.00%)            10 ( 0.00%)  UnknownFile???:create_pairtype.isra.0
      0              0                     576 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::resize(unsigned long)
      0              0                     576 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::_M_default_append(unsigned long)
      0              0                     576 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::operator=(std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > > const&)
      0              0                     560 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5O__msg_write_real
      0              0                     528 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5S_create_simple
      0              0                     512 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5PL__create_plugin_cache
      0              0                     504 ( 0.00%)           6 ( 0.00%)            248 ( 0.00%)             5 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<CommandLineArgument*, std::allocator<CommandLineArgument*> >::push_back(CommandLineArgument*&&)
      0              0                     504 ( 0.00%)           6 ( 0.00%)            248 ( 0.00%)             5 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<CommandLineArgument*, std::allocator<CommandLineArgument*> >::_M_realloc_insert<CommandLineArgument*>(__gnu_cxx::__normal_iterator<CommandLineArgument**, std::vector<CommandLineArgument*, std::allocator<CommandLineArgument*> > >, CommandLineArgument*&&)
      0              0                     504 ( 0.00%)           6 ( 0.00%)            248 ( 0.00%)             5 ( 0.00%)  /usr/include/c++/13/bits/vector.tcc:void std::vector<CommandLineArgument*, std::allocator<CommandLineArgument*> >::emplace_back<CommandLineArgument*>(CommandLineArgument*&&)
      0              0                     504 ( 0.00%)           6 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<CommandLineArgument*, std::allocator<CommandLineArgument*> >::_M_allocate(unsigned long)
      0              0                     504 ( 0.00%)           6 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<CommandLineArgument*>::allocate(unsigned long, void const*)
      0              0                     480 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5CX_push_special
      0              0                     472 ( 0.00%)           1 ( 0.00%)            472 ( 0.00%)             1 ( 0.00%)  UnknownFile???:read_config_files.constprop.0
      0              0                     470 ( 0.00%)           6 ( 0.00%)             54 ( 0.00%)             2 ( 0.00%)  UnknownFile???:_dl_catch_exception
      0              0                     448 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:re_acquire_state_context
      0              0                     440 ( 0.00%)          35 ( 0.00%)              0                      0           UnknownFile???:ADIOI_CRAY_Calc_my_req
      0              0                     440 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:MPII_Dataloop_create_blockindexed
      0              0                     440 ( 0.00%)           1 ( 0.00%)            440 ( 0.00%)             1 ( 0.00%)  UnknownFile???:PMPI_Allreduce
      0              0                     424 ( 0.00%)          16 ( 0.00%)              0                      0           UnknownFile???:H5FL_fac_init
      0              0                     407 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5P__ocpy_reg_prop
      0              0                     400 ( 0.00%)          75 ( 0.00%)              0                      0           UnknownFile???:H5Pset_fclose_degree
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcFile*, std::allocator<NcFile*> >::_M_allocate(unsigned long)
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcFile*>::allocate(unsigned long, void const*)
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<NcFile*, std::allocator<NcFile*> >::push_back(NcFile* const&)
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<long, std::allocator<long> >::push_back(long const&)
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<NcFile*, std::allocator<NcFile*> >::_M_realloc_insert<NcFile* const&>(__gnu_cxx::__normal_iterator<NcFile**, std::vector<NcFile*, std::allocator<NcFile*> > >, NcFile* const&)
      0              0                     400 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<long, std::allocator<long> >::_M_realloc_insert<long const&>(__gnu_cxx::__normal_iterator<long*, std::vector<long, std::allocator<long> > >, long const&)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcDim*, std::allocator<NcDim*> >::_M_allocate(unsigned long)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcDim*>::allocate(unsigned long, void const*)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<NcDim*, std::allocator<NcDim*> >::resize(unsigned long)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<long, std::allocator<long> >::resize(unsigned long)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<NcDim*, std::allocator<NcDim*> >::_M_default_append(unsigned long)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<long, std::allocator<long> >::_M_default_append(unsigned long)
      0              0                     384 ( 0.00%)          48 ( 0.00%)              0                      0           UnknownFile???:H5HF__sect_row_init_cls
      0              0                     377 ( 0.00%)          18 ( 0.00%)            304 ( 0.00%)            16 ( 0.00%)  UnknownFile???:ncbytescat
      0              0                     368 ( 0.00%)           9 ( 0.00%)              0                      0           UnknownFile???:H5O__sdspace_copy
      0              0                     368 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5S_create
      0              0                     328 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5F__cache_superblock_deserialize
      0              0                     320 ( 0.00%)          25 ( 0.00%)            120 ( 0.00%)            20 ( 0.00%)  UnknownFile???:ADIOI_Type_create_hindexed_x
      0              0                     320 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:ADIOI_CRAY_Heap_merge
      0              0                     296 ( 0.00%)          11 ( 0.00%)              0                      0           UnknownFile???:H5G_open
      0              0                     296 ( 0.00%)           6 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:posix_runtime_initialize
      0              0                     293 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5P__gcrt_reg_prop
      0              0                     283 ( 0.00%)          11 ( 0.00%)            119 ( 0.00%)             7 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_init
      0              0                     280 ( 0.00%)          15 ( 0.00%)             80 ( 0.00%)            10 ( 0.00%)  UnknownFile???:PMPI_Type_create_hindexed
      0              0                     280 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5D__layout_oh_write
      0              0                     280 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5D__mark
      0              0                     280 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_write
      0              0                     280 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5O_msg_write_oh
      0              0                     272 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5S_append
      0              0                     272 ( 0.00%)           4 ( 0.00%)              0                      0           /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_get_nodes
      0              0                     267 ( 0.00%)           4 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:_dlerror_run
      0              0                     257 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5P__macc_reg_prop
      0              0                     256 ( 0.00%)          11 ( 0.00%)              0                      0           UnknownFile???:H5FO_insert
      0              0                     248 ( 0.00%)           2 ( 0.00%)              0                      0           src/base/Variable.cpp:VariableRegistry::FindOrRegister(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                     248 ( 0.00%)           2 ( 0.00%)              0                      0           src/base/Variable.cpp:VariableRegistry::FindOrRegisterSubStr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*)
      0              0                     240 ( 0.00%)           5 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_core_register_module
      0              0                     236 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:ADIOI_Strdup
      0              0                     235 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:_dl_catch_error
      0              0                     235 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:_dl_open
      0              0                     235 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:dl_open_worker
      0              0                     235 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:dlopen@@GLIBC_2.2.5
      0              0                     235 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:dlopen_doit
      0              0                     232 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:__pthread_once_slow
      0              0                     223 ( 0.00%)          10 ( 0.00%)            186 ( 0.00%)             9 ( 0.00%)  UnknownFile???:NCZ_initialize
      0              0                     223 ( 0.00%)          10 ( 0.00%)            186 ( 0.00%)             9 ( 0.00%)  UnknownFile???:NCZ_provenance_init
      0              0                     218 ( 0.00%)          10 ( 0.00%)            182 ( 0.00%)             9 ( 0.00%)  UnknownFile???:NC4_provenance_init
      0              0                     216 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5O__ainfo_decode
      0              0                     216 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIDU_Init_shm_init
      0              0                     200 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::_M_allocate(unsigned long)
      0              0                     200 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcFileVector::FileType>::allocate(unsigned long, void const*)
      0              0                     200 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::push_back(NcFileVector::FileType&&)
      0              0                     200 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::_M_realloc_insert<NcFileVector::FileType>(__gnu_cxx::__normal_iterator<NcFileVector::FileType*, std::vector<NcFileVector::FileType, std::allocator<NcFileVector::FileType> > >, NcFileVector::FileType&&)
      0              0                     200 ( 0.00%)          50 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::emplace_back<NcFileVector::FileType>(NcFileVector::FileType&&)
      0              0                     200 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5O__ainfo_copy
      0              0                     200 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5AC_create_flush_dependency
      0              0                     200 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5C_create_flush_dependency
      0              0                     200 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5HF__cache_dblock_notify
      0              0                     192 ( 0.00%)          24 ( 0.00%)              0                      0           UnknownFile???:H5HF__sect_indirect_init_cls
      0              0                     192 ( 0.00%)           8 ( 0.00%)             68 ( 0.00%)             4 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentDouble::CommandLineArgumentDouble(double&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, double, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
      0              0                     192 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:H5FS__sect_link
      0              0                     191 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5P__strcrt_reg_prop
      0              0                     184 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:H5O__cont_decode
      0              0                     183 ( 0.00%)           6 ( 0.00%)              0                      0           /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgument::CommandLineArgument(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
      0              0                     182 ( 0.00%)           3 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5PL__create_path_table
      0              0                     178 ( 0.00%)           8 ( 0.00%)            178 ( 0.00%)             8 ( 0.00%)  src/base/NetCDFUtilities.cpp:NcGetVarFromList(NcFile&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, NcVar**, NcDim**)
      0              0                     176 ( 0.00%)          11 ( 0.00%)              0                      0           UnknownFile???:H5FO_top_incr
      0              0                     168 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:_dl_map_object_deps
      0              0                     160 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:H5S_set_extent_simple
      0              0                     160 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:ADIOI_Calc_my_off_len
      0              0                     160 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:MPIR_Type_contiguous_impl
      0              0                     160 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:PMPI_Type_contiguous
      0              0                     155 ( 0.00%)           5 ( 0.00%)              0                      0           /usr/include/c++/13/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                     152 ( 0.00%)           1 ( 0.00%)              0                      0           /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_init2
      0              0                     140 ( 0.00%)          35 ( 0.00%)            100 ( 0.00%)            25 ( 0.00%)  UnknownFile???:MPIR_Comm_create_subcomms
      0              0                     140 ( 0.00%)           2 ( 0.00%)            100 ( 0.00%)             1 ( 0.00%)  UnknownFile???:asprintf
      0              0                     128 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5HF__sect_single_new
      0              0                     128 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:nclistpush
      0              0                     127 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5P__lcrt_reg_prop
      0              0                     126 ( 0.00%)           5 ( 0.00%)            126 ( 0.00%)             5 ( 0.00%)  src/base/SimpleGrid.cpp:SimpleGrid::GetLongitudeFromNcFile(NcFile*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, NcVar**, NcDim**)
      0              0                     120 ( 0.00%)         120 ( 0.00%)              0                      0           UnknownFile???:H5Pset_obj_track_times
      0              0                     120 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:NC_createglobalstate
      0              0                     120 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:NC_getglobalstate
      0              0                     118 ( 0.00%)           1 ( 0.00%)            118 ( 0.00%)             1 ( 0.00%)  UnknownFile???:ADIO_FileSysType_fncall.constprop.0
      0              0                     118 ( 0.00%)           1 ( 0.00%)            118 ( 0.00%)             1 ( 0.00%)  UnknownFile???:ADIO_ResolveFileType
      0              0                     116 ( 0.00%)           5 ( 0.00%)            116 ( 0.00%)             5 ( 0.00%)  src/base/SimpleGrid.cpp:SimpleGrid::GetLatitudeFromNcFile(NcFile*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, NcVar**, NcDim**)
      0              0                     112 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5UC_create
      0              0                     112 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Time, std::allocator<Time> >::resize(unsigned long)
      0              0                     112 ( 0.00%)           2 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<Time, std::allocator<Time> >::_M_default_append(unsigned long)
      0              0                     112 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:MPII_Dataloop_create_indexed
      0              0                     112 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_assign(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                     112 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
      0              0                     111 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5P__fmnt_reg_prop
      0              0                     104 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5A__dense_build_table_cb
      0              0                     104 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:__cudaRegisterFatBinary
      0              0                     104 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:compute_pfl_components.constprop.0
      0              0                     100 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:__tzstring_len
      0              0                      96 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5SL_init
      0              0                      96 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPLI_shm_hnd_alloc
      0              0                      96 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPL_cray_malloc
      0              0                      96 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:MPL_shm_hnd_init
      0              0                      96 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5FO_create
      0              0                      96 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5FO_top_create
      0              0                      96 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5S_init
      0              0                      96 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIR_Comm_map_dup
      0              0                      91 ( 0.00%)           2 ( 0.00%)              0                      0           /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentString::SetValue(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
      0              0                      88 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:H5MF__sect_new
      0              0                      88 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIR_Type_create_struct_impl
      0              0                      88 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)             1 ( 0.00%)  UnknownFile???:PMPI_Type_create_struct
      0              0                      87 ( 0.00%)           3 ( 0.00%)             28 ( 0.00%)             1 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentString::CommandLineArgumentString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
      0              0                      84 ( 0.00%)           3 ( 0.00%)             80 ( 0.00%)             2 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_get_nidlist
      0              0                      80 ( 0.00%)          20 ( 0.00%)             40 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Find_external
      0              0                      80 ( 0.00%)          10 ( 0.00%)             80 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Scan
      0              0                      80 ( 0.00%)          10 ( 0.00%)             80 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIR_Scan_intra_recursive_doubling
      0              0                      80 ( 0.00%)          10 ( 0.00%)             80 ( 0.00%)            10 ( 0.00%)  UnknownFile???:PMPI_Scan
      0              0                      80 ( 0.00%)          10 ( 0.00%)              0                      0           UnknownFile???:MPIDI_OFI_mpi_comm_create_hook
      0              0                      80 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:register_state
      0              0                      80 ( 0.00%)           2 ( 0.00%)             80 ( 0.00%)             2 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_set_lrank_to_pe
      0              0                      68 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:MPIR_Info_dup_impl.part.0.constprop.0
      0              0                      68 ( 0.00%)           8 ( 0.00%)              0                      0           UnknownFile???:PMPI_Info_dup
      0              0                      68 ( 0.00%)           3 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-config.c:darshan_init_config
      0              0                      68 ( 0.00%)           1 ( 0.00%)             68 ( 0.00%)             1 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_get_inet_info
      0              0                      67 ( 0.00%)           2 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:_dl_map_object
      0              0                      64 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5MF_try_shrink
      0              0                      64 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5VL_set_vol_wrapper
      0              0                      64 ( 0.00%)           2 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-heatmap.c:heatmap_runtime_initialize
      0              0                      64 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5G__obj_get_linfo
      0              0                      64 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5O__linfo_decode
      0              0                      60 ( 0.00%)          15 ( 0.00%)             20 ( 0.00%)             5 ( 0.00%)  UnknownFile???:MPIR_Find_local
      0              0                      57 ( 0.00%)           5 ( 0.00%)              0                      0           UnknownFile???:H5E__register_class
      0              0                      56 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5WB_wrap
      0              0                      52 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIR_Comm_map_irregular
      0              0                      48 ( 0.00%)           4 ( 0.00%)              0                      0           /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_get_pes
      0              0                      48 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:H5F__sfile_add
      0              0                      48 ( 0.00%)           1 ( 0.00%)             48 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-dxt.c:dxt_posix_runtime_initialize
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5A_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5ES_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5FD_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5F_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5G_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5M_init
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5O__linfo_copy
      0              0                      48 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5VL_init_phase1
      0              0                      40 ( 0.00%)           5 ( 0.00%)             40 ( 0.00%)             5 ( 0.00%)  UnknownFile???:MPIR_Type_indexed.part.0
      0              0                      40 ( 0.00%)           3 ( 0.00%)              0                      0           UnknownFile???:ADIOI_CRAY_cb_nidlist_init
      0              0                      40 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5VL_introspect_opt_query
      0              0                      40 ( 0.00%)           1 ( 0.00%)             27 ( 0.00%)             1 ( 0.00%)  UnknownFile???:_dl_map_object_from_fd
      0              0                      40 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:add_name_to_object.isra.5
      0              0                      34 ( 0.00%)           4 ( 0.00%)              0                      0           UnknownFile???:ADIOI_incorporate_system_hints
      0              0                      32 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5O__ginfo_decode
      0              0                      32 ( 0.00%)           1 ( 0.00%)              0                      0           /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:__fxstat
      0              0                      32 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:dlsym
      0              0                      28 ( 0.00%)           7 ( 0.00%)              0                      0           UnknownFile???:calc_eclosure_iter
      0              0                      28 ( 0.00%)           2 ( 0.00%)             28 ( 0.00%)             2 ( 0.00%)  /home/jenkins/src/pmi_core/_pmi_jobattr.c:_pmi2_create_jobattrs
      0              0                      27 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5PL__append_path
      0              0                      27 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5PL__insert_at
      0              0                      27 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:_dl_load_cache_lookup
      0              0                      24 ( 0.00%)           6 ( 0.00%)              0                      0           UnknownFile???:re_node_set_init_copy
      0              0                      24 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:H5SL_remove
      0              0                      24 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIR_Comm_group_impl
      0              0                      24 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:MPIR_Group_create
      0              0                      24 ( 0.00%)           2 ( 0.00%)              0                      0           UnknownFile???:PMPI_Comm_compare
      0              0                      24 ( 0.00%)           1 ( 0.00%)              0                      0           /home/jenkins/src/pmi_core/_pmi_jobattr.c:rp_create
      0              0                      24 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:ncrc_setrchome
      0              0                      22 ( 0.00%)           1 ( 0.00%)             22 ( 0.00%)             1 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-config.c:darshan_parse_config_env
      0              0                      16 ( 0.00%)           1 ( 0.00%)             16 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5P_set_vol
      0              0                      16 ( 0.00%)           1 ( 0.00%)             16 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5VL__set_def_conn
      0              0                      16 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_M_allocate(unsigned long)
      0              0                      16 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<unsigned long>::allocate(unsigned long, void const*)
      0              0                      16 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::resize(unsigned long)
      0              0                      16 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:std::vector<unsigned long, std::allocator<unsigned long> >::_M_default_append(unsigned long)
      0              0                      16 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:H5O__ginfo_copy
      0              0                      12 ( 0.00%)           1 ( 0.00%)             12 ( 0.00%)             1 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_get_applist
      0              0                      12 ( 0.00%)           1 ( 0.00%)              0                      0           /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_get_cmds
      0              0                      12 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:MPIDIU_alloc_lut
      0              0                      11 ( 0.00%)           1 ( 0.00%)              0                      0           /home/jenkins/src/pals/pals_utils.c:_pmi_pals_get_apid
      0              0                      11 ( 0.00%)           1 ( 0.00%)              0                      0           /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_get_apid
      0              0                       8 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Variable*, std::allocator<Variable*> >::_M_allocate(unsigned long)
      0              0                       8 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Variable*>::allocate(unsigned long, void const*)
      0              0                       8 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/stl_vector.h:std::vector<Variable*, std::allocator<Variable*> >::push_back(Variable* const&)
      0              0                       8 ( 0.00%)           1 ( 0.00%)              0                      0           /usr/include/c++/13/bits/vector.tcc:void std::vector<Variable*, std::allocator<Variable*> >::_M_realloc_insert<Variable* const&>(__gnu_cxx::__normal_iterator<Variable**, std::vector<Variable*, std::allocator<Variable*> > >, Variable* const&)
      0              0                       8 ( 0.00%)           1 ( 0.00%)              0                      0           src/base/Variable.cpp:VariableRegistry::InsertUniqueOrDelete(Variable*, int*)
      0              0                       7 ( 0.00%)           2 ( 0.00%)              7 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIDI_Cray_coll_init
      0              0                       7 ( 0.00%)           2 ( 0.00%)              4 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDI_CRAY_collopt_process_env
      0              0                       4 ( 0.00%)           1 ( 0.00%)              0                      0           UnknownFile???:MPIDIU_avt_init
      0              0                       0                    0          44,137,883,360 (139.3%) 1,103,447,084 (278.1%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase(std::_Rb_tree_node<int>*)
      0              0                       0                    0          15,725,444,160 (49.63%)   393,136,104 (99.08%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_put_node(std::_Rb_tree_node<int>*)
      0              0                       0                    0          15,725,444,160 (49.63%)   393,136,104 (99.08%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<int> >::deallocate(std::_Rb_tree_node<int>*, unsigned long)
      0              0                       0                    0          15,725,444,160 (49.63%)   393,136,104 (99.08%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_drop_node(std::_Rb_tree_node<int>*)
      0              0                       0                    0          12,143,255,040 (38.33%)         2,924 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<float>::Detach()
      0              0                       0                    0           8,901,054,000 (28.09%)   222,526,350 (56.08%)  /usr/include/c++/13/bits/stl_set.h:std::set<int, std::less<int>, std::allocator<int> >::erase[abi:cxx11](std::_Rb_tree_const_iterator<int>)
      0              0                       0                    0           8,901,054,000 (28.09%)   222,526,350 (56.08%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase_aux(std::_Rb_tree_const_iterator<int>)
      0              0                       0                    0           8,901,054,000 (28.09%)   222,526,350 (56.08%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase[abi:cxx11](std::_Rb_tree_const_iterator<int>)
      0              0                       0                    0           3,047,397,560 ( 9.62%)    76,184,939 (19.20%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::~_Rb_tree()
      0              0                       0                    0           2,332,956,240 ( 7.36%)    58,323,906 (14.70%)  /usr/include/c++/13/bits/stl_set.h:std::set<int, std::less<int>, std::allocator<int> >::~set()
      0              0                       0                    0           1,536,510,480 ( 4.85%)    38,412,762 ( 9.68%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::set<int, std::less<int>, std::allocator<int> > >(std::set<int, std::less<int>, std::allocator<int> >*)
      0              0                       0                    0           1,028,159,640 ( 3.24%)    25,703,991 ( 6.48%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::clear()
      0              0                       0                    0             826,662,400 ( 2.61%)    20,666,560 ( 5.21%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::set<int, std::less<int>, std::allocator<int> >*>(std::set<int, std::less<int>, std::allocator<int> >*, std::set<int, std::less<int>, std::allocator<int> >*)
      0              0                       0                    0             659,157,040 ( 2.08%)    16,478,926 ( 4.15%)  /usr/include/c++/13/bits/stl_set.h:std::set<int, std::less<int>, std::allocator<int> >::clear()
      0              0                       0                    0             401,179,522 ( 1.27%)           614 ( 0.00%)  UnknownFile???:H5FL__blk_gc_list
      0              0                       0                    0             399,524,148 ( 1.26%)         3,664 ( 0.00%)  UnknownFile???:H5D_close
      0              0                       0                    0             399,524,148 ( 1.26%)         3,664 ( 0.00%)  UnknownFile???:H5VL__native_dataset_close
      0              0                       0                    0             399,524,148 ( 1.26%)         3,664 ( 0.00%)  UnknownFile???:H5VL_dataset_close
      0              0                       0                    0             399,522,426 ( 1.26%)         3,368 ( 0.00%)  UnknownFile???:H5D__close_cb
      0              0                       0                    0             398,816,250 ( 1.26%)           804 ( 0.00%)  UnknownFile???:H5Dclose
      0              0                       0                    0             398,816,250 ( 1.26%)           804 ( 0.00%)  UnknownFile???:H5I_dec_app_ref_always_close
      0              0                       0                    0             398,785,728 ( 1.26%)           408 ( 0.00%)  UnknownFile???:H5D__chunk_dest
      0              0                       0                    0             398,785,728 ( 1.26%)           408 ( 0.00%)  UnknownFile???:H5D__chunk_flush_entry
      0              0                       0                    0             398,785,728 ( 1.26%)           408 ( 0.00%)  UnknownFile???:H5D__chunk_mem_xfree
      0              0                       0                    0             398,785,728 ( 1.26%)           408 ( 0.00%)  UnknownFile???:H5FL_blk_free
      0              0                       0                    0             341,586,720 ( 1.08%)     8,539,668 ( 2.15%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::set<int, std::less<int>, std::allocator<int> >*>(std::set<int, std::less<int>, std::allocator<int> >*, std::set<int, std::less<int>, std::allocator<int> >*)
      0              0                       0                    0              99,695,424 ( 0.31%)            74 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/DataArray1D.h:DataArray1D<int>::~DataArray1D()
      0              0                       0                    0              99,695,424 ( 0.31%)            74 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<int>::Detach()
      0              0                       0                    0              99,515,040 ( 0.31%)     2,487,876 ( 0.63%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::~vector()
      0              0                       0                    0              66,447,376 ( 0.21%)     1,038,245 ( 0.26%)  src/base/SimpleGrid.cpp:SimpleGrid::~SimpleGrid()
      0              0                       0                    0              41,863,930 ( 0.13%)        14,782 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::close()
      0              0                       0                    0              40,315,446 ( 0.13%)         4,570 ( 0.00%)  UnknownFile???:H5C_dest
      0              0                       0                    0              40,299,092 ( 0.13%)         3,164 ( 0.00%)  UnknownFile???:H5AC_dest
      0              0                       0                    0              39,447,864 ( 0.12%)         1,730 ( 0.00%)  UnknownFile???:H5FL_reg_free
      0              0                       0                    0              39,120,016 ( 0.12%)           544 ( 0.00%)  UnknownFile???:H5Fclose
      0              0                       0                    0              36,825,450 ( 0.12%)        10,250 ( 0.00%)  src/base/NcFileVector.cpp:NcFileVector::clear()
      0              0                       0                    0              35,891,200 ( 0.11%)         9,300 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/NcFileVector.h:NcFileVector::~NcFileVector()
      0              0                       0                    0              34,620,475 ( 0.11%)           119 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_core_cleanup
      0              0                       0                    0              30,316,622 ( 0.10%)        12,784 ( 0.00%)  UnknownFile???:nc_close
      0              0                       0                    0              29,070,720 ( 0.09%)     3,114,720 ( 0.79%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)
      0              0                       0                    0              29,070,720 ( 0.09%)     3,114,720 ( 0.79%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<int>::deallocate(int*, unsigned long)
      0              0                       0                    0              26,214,400 ( 0.08%)            50 ( 0.00%)  UnknownFile???:del_from_NCList
      0              0                       0                    0              26,214,400 ( 0.08%)            50 ( 0.00%)  UnknownFile???:free_NCList
      0              0                       0                    0              25,373,352 ( 0.08%)            77 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<double>::Detach()
      0              0                       0                    0              25,373,352 ( 0.08%)            77 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<double>::~DataArray1D()
      0              0                       0                    0              24,917,760 ( 0.08%)             1 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_deallocate(std::vector<int, std::allocator<int> >*, unsigned long)
      0              0                       0                    0              24,917,760 ( 0.08%)             1 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<int, std::allocator<int> > >::deallocate(std::vector<int, std::allocator<int> >*, unsigned long)
      0              0                       0                    0              24,917,760 ( 0.08%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~_Vector_base()
      0              0                       0                    0              24,917,760 ( 0.08%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()
      0              0                       0                    0              22,722,056 ( 0.07%)       405,751 ( 0.10%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_erase(std::_Rb_tree_node<std::pair<Tag const, Tag> >*)
      0              0                       0                    0              19,687,680 ( 0.06%)        68,360 ( 0.02%)  UnknownFile???:H5I__remove_common
      0              0                       0                    0              19,271,824 ( 0.06%)       431,522 ( 0.11%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > >(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                       0                    0              18,297,216 ( 0.06%)        63,532 ( 0.02%)  UnknownFile???:H5Sclose
      0              0                       0                    0              16,784,347 ( 0.05%)            71 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c:darshan_log_close
      0              0                       0                    0              16,784,347 ( 0.05%)            71 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-mpiio.c:PMPI_File_close
      0              0                       0                    0              16,784,347 ( 0.05%)            71 ( 0.00%)  UnknownFile???:PMPI_File_close
      0              0                       0                    0              16,779,963 ( 0.05%)            69 ( 0.00%)  UnknownFile???:ADIO_Close
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector()
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*)
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<int, std::allocator<int> >*>(std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> >*)
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::~_Vector_base()
      0              0                       0                    0              16,611,840 ( 0.05%)     1,038,240 ( 0.26%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector()
      0              0                       0                    0              12,147,352 ( 0.04%)         2,442 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcVar::~NcVar()
      0              0                       0                    0              10,469,376 ( 0.03%)       218,112 ( 0.05%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_erase(std::_Rb_tree_node<Tag>*)
      0              0                       0                    0               6,180,229 ( 0.02%)            52 ( 0.00%)  UnknownFile???:PMPI_Finalize
      0              0                       0                    0               6,081,493 ( 0.02%)            45 ( 0.00%)  UnknownFile???:MPID_Finalize
      0              0                       0                    0               5,538,101 ( 0.02%)            18 ( 0.00%)  UnknownFile???:MPIDI_POSIX_mpi_finalize_hook
      0              0                       0                    0               5,538,101 ( 0.02%)            18 ( 0.00%)  UnknownFile???:MPIDI_SHMI_mpi_finalize_hook
      0              0                       0                    0               5,110,837 ( 0.02%)        53,495 ( 0.01%)  UnknownFile???:H5MM_xfree
      0              0                       0                    0               4,651,824 ( 0.01%)        96,913 ( 0.02%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_put_node(std::_Rb_tree_node<Tag>*)
      0              0                       0                    0               4,651,824 ( 0.01%)        96,913 ( 0.02%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<Tag> >::deallocate(std::_Rb_tree_node<Tag>*, unsigned long)
      0              0                       0                    0               4,651,824 ( 0.01%)        96,913 ( 0.02%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_drop_node(std::_Rb_tree_node<Tag>*)
      0              0                       0                    0               4,472,249 ( 0.01%)            12 ( 0.00%)  UnknownFile???:MPIDU_Init_shm_free
      0              0                       0                    0               4,463,767 ( 0.01%)             6 ( 0.00%)  UnknownFile???:MPIDU_genq_shmem_pool_destroy_unsafe
      0              0                       0                    0               4,155,040 ( 0.01%)            35 ( 0.00%)  src/base/Variable.cpp:VariableRegistry::~VariableRegistry()
      0              0                       0                    0               4,153,072 ( 0.01%)             2 ( 0.00%)  src/base/Variable.h:Variable::~Variable()
      0              0                       0                    0               4,152,960 ( 0.01%)             1 ( 0.00%)  src/base/DataArray1D.h:DataArray1D<float>::~DataArray1D()
      0              0                       0                    0               4,125,886 ( 0.01%)        12,882 ( 0.00%)  UnknownFile???:nc4_close_hdf5_file
      0              0                       0                    0               4,090,686 ( 0.01%)        12,586 ( 0.00%)  UnknownFile???:NC4_close
      0              0                       0                    0               4,025,452 ( 0.01%)        10,434 ( 0.00%)  UnknownFile???:nc4_close_netcdf4_file
      0              0                       0                    0               3,958,270 ( 0.01%)         9,890 ( 0.00%)  UnknownFile???:nc4_nc4f_list_del
      0              0                       0                    0               3,919,798 ( 0.01%)         8,632 ( 0.00%)  UnknownFile???:nc4_rec_grp_del
      0              0                       0                    0               3,740,678 ( 0.01%)         4,588 ( 0.00%)  UnknownFile???:ncindexfree
      0              0                       0                    0               3,516,902 ( 0.01%)         2,590 ( 0.00%)  UnknownFile???:NC_hashmapfree
      0              0                       0                    0               3,377,520 ( 0.01%)        14,916 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::_M_deallocate(std::set<int, std::less<int>, std::allocator<int> >*, unsigned long)
      0              0                       0                    0               3,377,520 ( 0.01%)        14,916 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::set<int, std::less<int>, std::allocator<int> > >::deallocate(std::set<int, std::less<int>, std::allocator<int> >*, unsigned long)
      0              0                       0                    0               3,160,248 ( 0.01%)        56,433 ( 0.01%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_put_node(std::_Rb_tree_node<std::pair<Tag const, Tag> >*)
      0              0                       0                    0               3,160,248 ( 0.01%)        56,433 ( 0.01%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<std::pair<Tag const, Tag> > >::deallocate(std::_Rb_tree_node<std::pair<Tag const, Tag> >*, unsigned long)
      0              0                       0                    0               3,160,248 ( 0.01%)        56,433 ( 0.01%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::_M_drop_node(std::_Rb_tree_node<std::pair<Tag const, Tag> >*)
      0              0                       0                    0               2,821,074 ( 0.01%)         4,028 ( 0.00%)  UnknownFile???:H5FL_term_package
      0              0                       0                    0               2,818,730 ( 0.01%)         3,930 ( 0.00%)  UnknownFile???:H5FL_garbage_coll
      0              0                       0                    0               2,405,664 ( 0.01%)        11,992 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<LatLonBox<double>, std::allocator<LatLonBox<double> > >::_M_deallocate(LatLonBox<double>*, unsigned long)
      0              0                       0                    0               2,405,664 ( 0.01%)        11,992 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<LatLonBox<double> >::deallocate(LatLonBox<double>*, unsigned long)
      0              0                       0                    0               2,244,864 ( 0.01%)         5,848 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::~vector()
      0              0                       0                    0               2,244,864 ( 0.01%)         5,848 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*>(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                       0                    0               2,244,864 ( 0.01%)         5,848 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*>(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*)
      0              0                       0                    0               2,244,864 ( 0.01%)         5,848 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::~_Vector_base()
      0              0                       0                    0               2,244,864 ( 0.01%)         5,848 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >::~vector()
      0              0                       0                    0               2,228,496 ( 0.01%)        46,427 ( 0.01%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::~_Rb_tree()
      0              0                       0                    0               2,065,296 ( 0.01%)        43,027 ( 0.01%)  /usr/include/c++/13/bits/stl_set.h:std::set<Tag, std::less<Tag>, std::allocator<Tag> >::~set()
      0              0                       0                    0               1,840,272 ( 0.01%)        38,339 ( 0.01%)  /usr/include/c++/13/bits/stl_set.h:std::set<Tag, std::less<Tag>, std::allocator<Tag> >::erase[abi:cxx11](std::_Rb_tree_const_iterator<Tag>)
      0              0                       0                    0               1,840,272 ( 0.01%)        38,339 ( 0.01%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::_M_erase_aux(std::_Rb_tree_const_iterator<Tag>)
      0              0                       0                    0               1,840,272 ( 0.01%)        38,339 ( 0.01%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, Tag, std::_Identity<Tag>, std::less<Tag>, std::allocator<Tag> >::erase[abi:cxx11](std::_Rb_tree_const_iterator<Tag>)
      0              0                       0                    0               1,818,294 ( 0.01%)         5,672 ( 0.00%)  UnknownFile???:var_free
      0              0                       0                    0               1,609,627 ( 0.01%)        20,702 ( 0.01%)  UnknownFile???:H5P__free_prop_cb
      0              0                       0                    0               1,609,627 ( 0.01%)        20,702 ( 0.01%)  UnknownFile???:H5SL__release_common
      0              0                       0                    0               1,609,627 ( 0.01%)        20,702 ( 0.01%)  UnknownFile???:H5SL_destroy
      0              0                       0                    0               1,608,576 ( 0.01%)            30 ( 0.00%)  UnknownFile???:deflateEnd
      0              0                       0                    0               1,343,488 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIDIU_destroy_buf_pool
      0              0                       0                    0               1,310,936 ( 0.00%)         5,098 ( 0.00%)  UnknownFile???:H5Aclose
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::~vector()
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > >(std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*)
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*>(std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*, std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*)
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*>(std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*, std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*)
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<LatLonBox<double>, std::allocator<LatLonBox<double> > >::~_Vector_base()
      0              0                       0                    0               1,273,008 ( 0.00%)         2,924 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >::~vector()
      0              0                       0                    0               1,259,430 ( 0.00%)         4,422 ( 0.00%)  UnknownFile???:H5C__flush_invalidate_cache
      0              0                       0                    0               1,211,112 ( 0.00%)        21,627 ( 0.01%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<Tag, std::pair<Tag const, Tag>, std::_Select1st<std::pair<Tag const, Tag> >, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::~_Rb_tree()
      0              0                       0                    0               1,042,032 ( 0.00%)         2,925 ( 0.00%)  src/blobs/StitchBlobs.cpp:BlobsExchangeOp::~BlobsExchangeOp()
      0              0                       0                    0                 759,742 ( 0.00%)         3,882 ( 0.00%)  UnknownFile???:H5I_dec_ref
      0              0                       0                    0                 665,024 ( 0.00%)        35,388 ( 0.01%)  src/netcdf-cxx-4.2/netcdf.cpp:NcAtt::~NcAtt()
      0              0                       0                    0                 610,344 ( 0.00%)           618 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Time, std::allocator<Time> >::_M_deallocate(Time*, unsigned long)
      0              0                       0                    0                 610,344 ( 0.00%)           618 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Time>::deallocate(Time*, unsigned long)
      0              0                       0                    0                 602,648 ( 0.00%)         8,517 ( 0.00%)  UnknownFile???:tdestroy_recurse
      0              0                       0                    0                 504,981 ( 0.00%)         3,536 ( 0.00%)  UnknownFile???:H5T_close_real
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Tag, std::allocator<Tag> >::_M_deallocate(Tag*, unsigned long)
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::~vector()
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Tag>::deallocate(Tag*, unsigned long)
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<Tag, std::allocator<Tag> > >(std::vector<Tag, std::allocator<Tag> >*)
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<Tag, std::allocator<Tag> >*>(std::vector<Tag, std::allocator<Tag> >*, std::vector<Tag, std::allocator<Tag> >*)
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<Tag, std::allocator<Tag> >*>(std::vector<Tag, std::allocator<Tag> >*, std::vector<Tag, std::allocator<Tag> >*)
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Tag, std::allocator<Tag> >::~_Vector_base()
      0              0                       0                    0                 486,096 ( 0.00%)         5,850 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<Tag, std::allocator<Tag> >::~vector()
      0              0                       0                    0                 448,240 ( 0.00%)           113 ( 0.00%)  UnknownFile???:fclose@@GLIBC_2.2.5
      0              0                       0                    0                 427,840 ( 0.00%)         7,640 ( 0.00%)  /usr/include/c++/13/bits/stl_multimap.h:std::multimap<Tag, Tag, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::~multimap()
      0              0                       0                    0                 423,688 ( 0.00%)         3,659 ( 0.00%)  UnknownFile???:H5FL__reg_gc
      0              0                       0                    0                 420,864 ( 0.00%)            55 ( 0.00%)  UnknownFile???:_IO_file_close_it@@GLIBC_2.2.5
      0              0                       0                    0                 420,864 ( 0.00%)            55 ( 0.00%)  UnknownFile???:_IO_setb
      0              0                       0                    0                 407,225 ( 0.00%)         1,925 ( 0.00%)  UnknownFile???:H5T_top_term_package
      0              0                       0                    0                 347,200 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Time, std::allocator<Time> >::~_Vector_base()
      0              0                       0                    0                 347,200 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<Time, std::allocator<Time> >::~vector()
      0              0                       0                    0                 317,016 ( 0.00%)         5,661 ( 0.00%)  /usr/include/c++/13/bits/stl_map.h:std::map<Tag, Tag, std::less<Tag>, std::allocator<std::pair<Tag const, Tag> > >::~map()
      0              0                       0                    0                 313,556 ( 0.00%)         2,931 ( 0.00%)  src/blobs/StitchBlobs.cpp:TagExchangeOP::~TagExchangeOP()
      0              0                       0                    0                 278,792 ( 0.00%)             3 ( 0.00%)  UnknownFile???:MPIDIG_finalize
      0              0                       0                    0                 239,976 ( 0.00%)         2,496 ( 0.00%)  UnknownFile???:nclistfree
      0              0                       0                    0                 228,145 ( 0.00%)         5,077 ( 0.00%)  UnknownFile???:H5MM_xfree_const
      0              0                       0                    0                 228,138 ( 0.00%)         5,076 ( 0.00%)  UnknownFile???:H5E__clear_entries
      0              0                       0                    0                 228,138 ( 0.00%)         5,076 ( 0.00%)  UnknownFile???:H5E_clear_stack
      0              0                       0                    0                 198,768 ( 0.00%)         3,037 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:posix_cleanup
      0              0                       0                    0                 184,192 ( 0.00%)         2,878 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_iter_record_refs
      0              0                       0                    0                 180,800 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<NcTimeDimension, std::allocator<NcTimeDimension> >::~vector()
      0              0                       0                    0                 180,800 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<NcTimeDimension*>(NcTimeDimension*, NcTimeDimension*)
      0              0                       0                    0                 180,800 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<NcTimeDimension>(NcTimeDimension*)
      0              0                       0                    0                 180,800 ( 0.00%)           100 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<NcTimeDimension*>(NcTimeDimension*, NcTimeDimension*)
      0              0                       0                    0                 180,800 ( 0.00%)           100 ( 0.00%)  src/base/NetCDFUtilities.h:NcTimeDimension::~NcTimeDimension()
      0              0                       0                    0                 167,888 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::~vector()
      0              0                       0                    0                 167,888 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<Time, std::allocator<Time> > >(std::vector<Time, std::allocator<Time> >*)
      0              0                       0                    0                 167,888 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::vector<Time, std::allocator<Time> >*>(std::vector<Time, std::allocator<Time> >*, std::vector<Time, std::allocator<Time> >*)
      0              0                       0                    0                 167,888 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::vector<Time, std::allocator<Time> >*>(std::vector<Time, std::allocator<Time> >*, std::vector<Time, std::allocator<Time> >*)
      0              0                       0                    0                 141,136 ( 0.00%)         5,946 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<long, std::allocator<long> >::_M_deallocate(long*, unsigned long)
      0              0                       0                    0                 141,136 ( 0.00%)         5,946 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<long>::deallocate(long*, unsigned long)
      0              0                       0                    0                 141,136 ( 0.00%)         5,946 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<long, std::allocator<long> >::~_Vector_base()
      0              0                       0                    0                 141,136 ( 0.00%)         5,946 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<long, std::allocator<long> >::~vector()
      0              0                       0                    0                 140,448 ( 0.00%)             4 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::_M_deallocate(std::vector<Tag, std::allocator<Tag> >*, unsigned long)
      0              0                       0                    0                 140,448 ( 0.00%)             4 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<Tag, std::allocator<Tag> > >::deallocate(std::vector<Tag, std::allocator<Tag> >*, unsigned long)
      0              0                       0                    0                 140,448 ( 0.00%)             4 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::~_Vector_base()
      0              0                       0                    0                 140,448 ( 0.00%)             4 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<Tag, std::allocator<Tag> >, std::allocator<std::vector<Tag, std::allocator<Tag> > > >::~vector()
      0              0                       0                    0                 140,352 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::_M_deallocate(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, unsigned long)
      0              0                       0                    0                 140,352 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > >::deallocate(std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >*, unsigned long)
      0              0                       0                    0                 140,352 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::~_Vector_base()
      0              0                       0                    0                 140,352 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > >, std::allocator<std::vector<std::set<int, std::less<int>, std::allocator<int> >, std::allocator<std::set<int, std::less<int>, std::allocator<int> > > > > >::~vector()
      0              0                       0                    0                 111,357 ( 0.00%)         1,880 ( 0.00%)  UnknownFile???:H5T__free
      0              0                       0                    0                 110,336 ( 0.00%)         1,724 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c:posix_finalize_file_records
      0              0                       0                    0                 108,672 ( 0.00%)           871 ( 0.00%)  UnknownFile???:H5FL_fac_term
      0              0                       0                    0                 105,216 ( 0.00%)           344 ( 0.00%)  UnknownFile???:H5B2__cache_hdr_free_icr
      0              0                       0                    0                 105,216 ( 0.00%)           344 ( 0.00%)  UnknownFile???:H5B2__hdr_free
      0              0                       0                    0                 100,434 ( 0.00%)         2,448 ( 0.00%)  UnknownFile???:nc4_rec_grp_HDF5_del
      0              0                       0                    0                  98,736 ( 0.00%)             7 ( 0.00%)  UnknownFile???:MPIR_Call_finalize_callbacks
      0              0                       0                    0                  98,304 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIR_Handle_finalize
      0              0                       0                    0                  96,321 ( 0.00%)            18 ( 0.00%)  /global/common/software/nersc9/valgrind/files/valgrind-3.23.0/coregrind/vg_preloaded.c:_vgnU_freeres
      0              0                       0                    0                  87,249 ( 0.00%)           998 ( 0.00%)  UnknownFile???:H5T__close_cb
      0              0                       0                    0                  87,249 ( 0.00%)           998 ( 0.00%)  UnknownFile???:H5T_close
      0              0                       0                    0                  82,560 ( 0.00%)            27 ( 0.00%)  src/blobs/StitchBlobs.cpp:GlobalTimesExchangeOp::~GlobalTimesExchangeOp()
      0              0                       0                    0                  73,728 ( 0.00%)             1 ( 0.00%)  UnknownFile???:__gnu_cxx::__freeres()
      0              0                       0                    0                  70,176 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::_M_deallocate(std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*, unsigned long)
      0              0                       0                    0                  70,176 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > >::deallocate(std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >*, unsigned long)
      0              0                       0                    0                  70,176 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::~_Vector_base()
      0              0                       0                    0                  70,176 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > >, std::allocator<std::vector<LatLonBox<double>, std::allocator<LatLonBox<double> > > > >::~vector()
      0              0                       0                    0                  68,672 ( 0.00%)           296 ( 0.00%)  UnknownFile???:H5HF__cache_hdr_free_icr
      0              0                       0                    0                  68,672 ( 0.00%)           296 ( 0.00%)  UnknownFile???:H5HF__dtable_dest
      0              0                       0                    0                  68,672 ( 0.00%)           296 ( 0.00%)  UnknownFile???:H5HF__hdr_free
      0              0                       0                    0                  65,660 ( 0.00%)         2,348 ( 0.00%)  UnknownFile???:close_vars
      0              0                       0                    0                  65,528 ( 0.00%)            13 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::_M_deallocate(std::pair<int, int>*, unsigned long)
      0              0                       0                    0                  65,528 ( 0.00%)            13 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::pair<int, int> >::deallocate(std::pair<int, int>*, unsigned long)
      0              0                       0                    0                  53,946 ( 0.00%)         1,480 ( 0.00%)  UnknownFile???:nc4_att_free
      0              0                       0                    0                  52,946 ( 0.00%)           103 ( 0.00%)  UnknownFile???:ncbytesfree
      0              0                       0                    0                  51,302 ( 0.00%)         3,582 ( 0.00%)  UnknownFile???:H5A__close
      0              0                       0                    0                  51,302 ( 0.00%)         3,582 ( 0.00%)  UnknownFile???:H5A__shared_free
      0              0                       0                    0                  42,624 ( 0.00%)           148 ( 0.00%)  UnknownFile???:H5C__untag_entry
      0              0                       0                    0                  39,918 ( 0.00%)         3,004 ( 0.00%)  UnknownFile???:H5O_msg_free_real
      0              0                       0                    0                  35,480 ( 0.00%)         2,412 ( 0.00%)  UnknownFile???:H5O__attr_free
      0              0                       0                    0                  34,896 ( 0.00%)         2,634 ( 0.00%)  UnknownFile???:H5O__msg_free_mesg
      0              0                       0                    0                  32,928 ( 0.00%)         2,442 ( 0.00%)  UnknownFile???:H5O__cache_free_icr
      0              0                       0                    0                  32,928 ( 0.00%)         2,442 ( 0.00%)  UnknownFile???:H5O__free
      0              0                       0                    0                  32,768 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~_Vector_base()
      0              0                       0                    0                  32,768 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >::~vector()
      0              0                       0                    0                  28,800 ( 0.00%)           100 ( 0.00%)  UnknownFile???:H5Gclose
      0              0                       0                    0                  25,430 ( 0.00%)           592 ( 0.00%)  UnknownFile???:nc4_type_free
      0              0                       0                    0                  22,696 ( 0.00%)           281 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_clear_record_refs
      0              0                       0                    0                  22,593 ( 0.00%)            17 ( 0.00%)  UnknownFile???:__libc_freeres
      0              0                       0                    0                  17,900 ( 0.00%)           400 ( 0.00%)  UnknownFile???:H5Iget_type
      0              0                       0                    0                  17,760 ( 0.00%)           444 ( 0.00%)  UnknownFile???:dim_free
      0              0                       0                    0                  16,384 ( 0.00%)             2 ( 0.00%)  UnknownFile???:std::basic_filebuf<char, std::char_traits<char> >::_M_destroy_internal_buffer()
      0              0                       0                    0                  15,358 ( 0.00%)           807 ( 0.00%)  src/netcdf-cxx-4.2/ncvalues.cpp:NcValues_char::~NcValues_char()
      0              0                       0                    0                  14,544 ( 0.00%)           202 ( 0.00%)  UnknownFile???:llapi_layout_free
      0              0                       0                    0                  14,372 ( 0.00%)           118 ( 0.00%)  UnknownFile???:_dl_fini
      0              0                       0                    0                  11,536 ( 0.00%)           148 ( 0.00%)  UnknownFile???:free_NC
      0              0                       0                    0                  11,500 ( 0.00%)           250 ( 0.00%)  UnknownFile???:H5G__link_release_table
      0              0                       0                    0                  11,264 ( 0.00%)            98 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
      0              0                       0                    0                  11,264 ( 0.00%)            98 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
      0              0                       0                    0                  11,264 ( 0.00%)            98 ( 0.00%)  /usr/include/c++/13/bits/stl_construct.h:void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
      0              0                       0                    0                  10,656 ( 0.00%)           666 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcDim::~NcDim()
      0              0                       0                    0                   9,638 ( 0.00%)         1,384 ( 0.00%)  UnknownFile???:H5O_msg_reset
      0              0                       0                    0                   9,544 ( 0.00%)           109 ( 0.00%)  UnknownFile???:__cxa_finalize
      0              0                       0                    0                   9,391 ( 0.00%)           351 ( 0.00%)  UnknownFile???:H5P__access_class
      0              0                       0                    0                   9,360 ( 0.00%)         1,170 ( 0.00%)  UnknownFile???:H5T__vlen_reclaim
      0              0                       0                    0                   9,360 ( 0.00%)         1,170 ( 0.00%)  UnknownFile???:H5T_reclaim_cb
      0              0                       0                    0                   8,950 ( 0.00%)           600 ( 0.00%)  UnknownFile???:H5A__attr_release_table
      0              0                       0                    0                   8,776 ( 0.00%)           126 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c:darshan_delete_record_ref
      0              0                       0                    0                   8,696 ( 0.00%)            99 ( 0.00%)  UnknownFile???:__cudaUnregisterBinaryUtil()
      0              0                       0                    0                   8,576 ( 0.00%)            74 ( 0.00%)  UnknownFile???:clearPath
      0              0                       0                    0                   8,192 ( 0.00%)             2 ( 0.00%)  UnknownFile???:buffer_free
      0              0                       0                    0                   7,808 ( 0.00%)           724 ( 0.00%)  UnknownFile???:H5SL_term_package
      0              0                       0                    0                   7,712 ( 0.00%)            50 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/FilenameList.h:FilenameList::~FilenameList()
      0              0                       0                    0                   7,560 ( 0.00%)         1,280 ( 0.00%)  UnknownFile???:H5O__fill_reset
      0              0                       0                    0                   7,560 ( 0.00%)         1,280 ( 0.00%)  UnknownFile???:H5O_fill_reset_dyn
      0              0                       0                    0                   7,400 ( 0.00%)           740 ( 0.00%)  UnknownFile???:nc4_rec_grp_del_att_data
      0              0                       0                    0                   7,400 ( 0.00%)           740 ( 0.00%)  UnknownFile???:nc_reclaim_data_all
      0              0                       0                    0                   7,104 ( 0.00%)           296 ( 0.00%)  UnknownFile???:NC4_hdf5_filter_freelist
      0              0                       0                    0                   7,104 ( 0.00%)           296 ( 0.00%)  UnknownFile???:freestringlist
      0              0                       0                    0                   7,104 ( 0.00%)           222 ( 0.00%)  UnknownFile???:close_dims
      0              0                       0                    0                   6,872 ( 0.00%)           570 ( 0.00%)  UnknownFile???:H5A__close_cb
      0              0                       0                    0                   6,872 ( 0.00%)           570 ( 0.00%)  UnknownFile???:H5VL__native_attr_close
      0              0                       0                    0                   6,872 ( 0.00%)           570 ( 0.00%)  UnknownFile???:H5VL_attr_close
      0              0                       0                    0                   6,839 ( 0.00%)           246 ( 0.00%)  UnknownFile???:H5P__close_class
      0              0                       0                    0                   6,839 ( 0.00%)           246 ( 0.00%)  UnknownFile???:H5P__close_class_cb
      0              0                       0                    0                   6,516 ( 0.00%)           696 ( 0.00%)  UnknownFile???:H5O__link_reset
      0              0                       0                    0                   6,275 ( 0.00%)            46 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-config.c:darshan_free_config
      0              0                       0                    0                   6,024 ( 0.00%)            39 ( 0.00%)  UnknownFile???:regfree
      0              0                       0                    0                   5,976 ( 0.00%)           189 ( 0.00%)  UnknownFile???:H5E_term_package
      0              0                       0                    0                   5,920 ( 0.00%)           740 ( 0.00%)  UnknownFile???:nc4_HDF5_close_att
      0              0                       0                    0                   5,904 ( 0.00%)           216 ( 0.00%)  UnknownFile???:H5Tclose
      0              0                       0                    0                   5,696 ( 0.00%)            64 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)
      0              0                       0                    0                   5,696 ( 0.00%)            64 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)
      0              0                       0                    0                   5,664 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
      0              0                       0                    0                   5,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_erase_at_end(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)
      0              0                       0                    0                   5,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::resize(unsigned long)
      0              0                       0                    0                   5,064 ( 0.00%)            35 ( 0.00%)  UnknownFile???:free_dfa_content
      0              0                       0                    0                   4,888 ( 0.00%)            66 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c:stdio_cleanup
      0              0                       0                    0                   4,736 ( 0.00%)           296 ( 0.00%)  UnknownFile???:nc4_HDF5_close_type
      0              0                       0                    0                   4,647 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIDI_POSIX_iqueue_finalize
      0              0                       0                    0                   4,168 ( 0.00%)           182 ( 0.00%)  UnknownFile???:H5E__unregister_class
      0              0                       0                    0                   4,151 ( 0.00%)           179 ( 0.00%)  UnknownFile???:H5E__close_msg_cb
      0              0                       0                    0                   4,151 ( 0.00%)           179 ( 0.00%)  UnknownFile???:H5I_iterate
      0              0                       0                    0                   4,128 ( 0.00%)            10 ( 0.00%)  UnknownFile???:free_state
      0              0                       0                    0                   3,712 ( 0.00%)            54 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()
      0              0                       0                    0                   3,712 ( 0.00%)            54 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()
      0              0                       0                    0                   3,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcTimeDimension, std::allocator<NcTimeDimension> >::_M_deallocate(NcTimeDimension*, unsigned long)
      0              0                       0                    0                   3,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcTimeDimension>::deallocate(NcTimeDimension*, unsigned long)
      0              0                       0                    0                   3,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<NcTimeDimension, std::allocator<NcTimeDimension> >::~_Vector_base()
      0              0                       0                    0                   3,600 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<NcTimeDimension, std::allocator<NcTimeDimension> >::~vector()
      0              0                       0                    0                   3,576 ( 0.00%)           149 ( 0.00%)  UnknownFile???:nclistfreeall
      0              0                       0                    0                   3,444 ( 0.00%)           592 ( 0.00%)  UnknownFile???:H5P__dcrt_fill_value_close
      0              0                       0                    0                   3,024 ( 0.00%)            42 ( 0.00%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >*)
      0              0                       0                    0                   3,024 ( 0.00%)            32 ( 0.00%)  UnknownFile???:MPIR_Comm_delete_internal
      0              0                       0                    0                   2,960 ( 0.00%)            20 ( 0.00%)  UnknownFile???:MPID_Comm_free_hook
      0              0                       0                    0                   2,880 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIDI_CRAY_Comm_destroy_hook
      0              0                       0                    0                   2,626 ( 0.00%)            75 ( 0.00%)  UnknownFile???:NC4_clear_provenance
      0              0                       0                    0                   2,592 ( 0.00%)            53 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-lustre.c:lustre_cleanup
      0              0                       0                    0                   2,400 ( 0.00%)            50 ( 0.00%)  src/netcdf-cxx-4.2/netcdf.cpp:NcFile::~NcFile()
      0              0                       0                    0                   2,048 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5L_term_package
      0              0                       0                    0                   1,968 ( 0.00%)           192 ( 0.00%)  UnknownFile???:H5O__release_mesg
      0              0                       0                    0                   1,968 ( 0.00%)             3 ( 0.00%)  UnknownFile???:endmntent
      0              0                       0                    0                   1,812 ( 0.00%)            19 ( 0.00%)  UnknownFile???:PMPI_Comm_free
      0              0                       0                    0                   1,792 ( 0.00%)            32 ( 0.00%)  src/base/DataOp.cpp:DataOpManager::~DataOpManager()
      0              0                       0                    0                   1,784 ( 0.00%)            27 ( 0.00%)  UnknownFile???:MPIR_Datatype_free
      0              0                       0                    0                   1,536 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5Z_term_package
      0              0                       0                    0                   1,352 ( 0.00%)            22 ( 0.00%)  UnknownFile???:MPIR_Type_free_impl
      0              0                       0                    0                   1,352 ( 0.00%)            22 ( 0.00%)  UnknownFile???:PMPI_Type_free
      0              0                       0                    0                   1,352 ( 0.00%)            16 ( 0.00%)  UnknownFile???:MPIR_Dataloop_free
      0              0                       0                    0                   1,344 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5T__conv_struct_free
      0              0                       0                    0                   1,262 ( 0.00%)            17 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentString::~CommandLineArgumentString()
      0              0                       0                    0                   1,248 ( 0.00%)            65 ( 0.00%)  UnknownFile???:H5FL__arr_gc
      0              0                       0                    0                   1,212 ( 0.00%)            13 ( 0.00%)  UnknownFile???:MPIR_Comm_release_always
      0              0                       0                    0                   1,196 ( 0.00%)             7 ( 0.00%)  UnknownFile???:MPIR_pmi_finalize
      0              0                       0                    0                   1,152 ( 0.00%)            16 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_put_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >*)
      0              0                       0                    0                   1,152 ( 0.00%)            16 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::deallocate(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >*, unsigned long)
      0              0                       0                    0                   1,152 ( 0.00%)            16 ( 0.00%)  /usr/include/c++/13/bits/stl_map.h:std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, DataOp*, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::~map()
      0              0                       0                    0                   1,152 ( 0.00%)            16 ( 0.00%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::_M_drop_node(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >*)
      0              0                       0                    0                   1,152 ( 0.00%)            16 ( 0.00%)  /usr/include/c++/13/bits/stl_tree.h:std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, DataOp*> > >::~_Rb_tree()
      0              0                       0                    0                   1,152 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::_M_deallocate(std::vector<Time, std::allocator<Time> >*, unsigned long)
      0              0                       0                    0                   1,152 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<std::vector<Time, std::allocator<Time> > >::deallocate(std::vector<Time, std::allocator<Time> >*, unsigned long)
      0              0                       0                    0                   1,152 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::~_Vector_base()
      0              0                       0                    0                   1,152 ( 0.00%)             2 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<Time, std::allocator<Time> >, std::allocator<std::vector<Time, std::allocator<Time> > > >::~vector()
      0              0                       0                    0                   1,040 ( 0.00%)            17 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentDouble::~CommandLineArgumentDouble()
      0              0                       0                    0                     960 ( 0.00%)             4 ( 0.00%)  UnknownFile???:H5FD_term_package
      0              0                       0                    0                     768 ( 0.00%)            16 ( 0.00%)  UnknownFile???:H5I__destroy_type
      0              0                       0                    0                     768 ( 0.00%)            16 ( 0.00%)  UnknownFile???:H5I_dec_type_ref
      0              0                       0                    0                     752 ( 0.00%)             7 ( 0.00%)  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-heatmap.c:heatmap_cleanup
      0              0                       0                    0                     672 ( 0.00%)            96 ( 0.00%)  UnknownFile???:H5P__dcrt_fill_value_del
      0              0                       0                    0                     667 ( 0.00%)             3 ( 0.00%)  UnknownFile???:H5PL_term_package
      0              0                       0                    0                     651 ( 0.00%)            60 ( 0.00%)  UnknownFile???:MPIR_Info_free
      0              0                       0                    0                     651 ( 0.00%)            60 ( 0.00%)  UnknownFile???:PMPI_Info_free
      0              0                       0                    0                     631 ( 0.00%)             4 ( 0.00%)  UnknownFile???:H5VL_term_package
      0              0                       0                    0                     576 ( 0.00%)            72 ( 0.00%)  UnknownFile???:H5FS__cache_hdr_free_icr
      0              0                       0                    0                     576 ( 0.00%)            72 ( 0.00%)  UnknownFile???:H5FS__hdr_dest
      0              0                       0                    0                     512 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5PL__close_plugin_cache
      0              0                       0                    0                     504 ( 0.00%)             6 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<CommandLineArgument*, std::allocator<CommandLineArgument*> >::_M_deallocate(CommandLineArgument**, unsigned long)
      0              0                       0                    0                     504 ( 0.00%)             6 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<CommandLineArgument*>::deallocate(CommandLineArgument**, unsigned long)
      0              0                       0                    0                     480 ( 0.00%)            13 ( 0.00%)  UnknownFile???:finalize_atexit
      0              0                       0                    0                     480 ( 0.00%)            13 ( 0.00%)  UnknownFile???:nc_finalize
      0              0                       0                    0                     480 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5CX_term_package
      0              0                       0                    0                     440 ( 0.00%)             5 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentBool::~CommandLineArgumentBool()
      0              0                       0                    0                     432 ( 0.00%)             5 ( 0.00%)  UnknownFile???:pairtypes_finalize_cb
      0              0                       0                    0                     407 ( 0.00%)            11 ( 0.00%)  UnknownFile???:NCDISPATCH_finalize
      0              0                       0                    0                     407 ( 0.00%)            11 ( 0.00%)  UnknownFile???:NC_freeglobalstate
      0              0                       0                    0                     400 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcFile*, std::allocator<NcFile*> >::_M_deallocate(NcFile**, unsigned long)
      0              0                       0                    0                     400 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcFile*>::deallocate(NcFile**, unsigned long)
      0              0                       0                    0                     400 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<NcFile*, std::allocator<NcFile*> >::~_Vector_base()
      0              0                       0                    0                     400 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<NcFile*, std::allocator<NcFile*> >::~vector()
      0              0                       0                    0                     384 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcDim*, std::allocator<NcDim*> >::_M_deallocate(NcDim**, unsigned long)
      0              0                       0                    0                     384 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcDim*>::deallocate(NcDim**, unsigned long)
      0              0                       0                    0                     384 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<NcDim*, std::allocator<NcDim*> >::~_Vector_base()
      0              0                       0                    0                     384 ( 0.00%)            48 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<NcDim*, std::allocator<NcDim*> >::~vector()
      0              0                       0                    0                     384 ( 0.00%)            48 ( 0.00%)  UnknownFile???:H5HF__sect_row_term_cls
      0              0                       0                    0                     348 ( 0.00%)             9 ( 0.00%)  UnknownFile???:free_mem
      0              0                       0                    0                     336 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5FD__free_cls
      0              0                       0                    0                     288 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIO_File_free
      0              0                       0                    0                     256 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<CommandLineArgument*, std::allocator<CommandLineArgument*> >::~_Vector_base()
      0              0                       0                    0                     256 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<CommandLineArgument*, std::allocator<CommandLineArgument*> >::~vector()
      0              0                       0                    0                     221 ( 0.00%)             6 ( 0.00%)  UnknownFile???:NC_rcclear
      0              0                       0                    0                     216 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIDU_Init_shm_finalize
      0              0                       0                    0                     200 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::_M_deallocate(NcFileVector::FileType*, unsigned long)
      0              0                       0                    0                     200 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<NcFileVector::FileType>::deallocate(NcFileVector::FileType*, unsigned long)
      0              0                       0                    0                     200 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::~_Vector_base()
      0              0                       0                    0                     200 ( 0.00%)            50 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<NcFileVector::FileType, std::allocator<NcFileVector::FileType> >::~vector()
      0              0                       0                    0                     197 ( 0.00%)             5 ( 0.00%)  UnknownFile???:freeprofilelist
      0              0                       0                    0                     192 ( 0.00%)            24 ( 0.00%)  UnknownFile???:H5HF__sect_indirect_term_cls
      0              0                       0                    0                     183 ( 0.00%)             6 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgument::~CommandLineArgument()
      0              0                       0                    0                     164 ( 0.00%)             4 ( 0.00%)  /home/jenkins/src/api/pmi2/pmi2_finalize.c:PMI2_Finalize
      0              0                       0                    0                     164 ( 0.00%)             4 ( 0.00%)  /home/jenkins/src/pmi_core/_pmi_finalize.c:_pmi_finalize
      0              0                       0                    0                     155 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5PL__close_path_table
      0              0                       0                    0                     152 ( 0.00%)             1 ( 0.00%)  /home/jenkins/src/pals/pals_utils.c:_pmi_pals_finalize
      0              0                       0                    0                     152 ( 0.00%)             1 ( 0.00%)  /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c:pals_fini
      0              0                       0                    0                     148 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPIR_Comm_map_free
      0              0                       0                    0                      96 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPLI_shm_hnd_free
      0              0                       0                    0                      96 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPL_cray_free
      0              0                       0                    0                      96 ( 0.00%)             4 ( 0.00%)  UnknownFile???:MPL_shm_hnd_finalize
      0              0                       0                    0                      96 ( 0.00%)             2 ( 0.00%)  UnknownFile???:H5S_term_package
      0              0                       0                    0                      88 ( 0.00%)             1 ( 0.00%)  /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h:CommandLineArgumentInt::~CommandLineArgumentInt()
      0              0                       0                    0                      80 ( 0.00%)            10 ( 0.00%)  UnknownFile???:MPIDI_OFI_mpi_comm_free_hook
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5A_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5D_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5ES_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5F_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5G_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5M_term_package
      0              0                       0                    0                      48 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5T_term_package
      0              0                       0                    0                      45 ( 0.00%)             3 ( 0.00%)  UnknownFile???:freeprofile
      0              0                       0                    0                      40 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDIU_avt_release_ref
      0              0                       0                    0                      40 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDIU_free_avt
      0              0                       0                    0                      37 ( 0.00%)             1 ( 0.00%)  UnknownFile???:NCZ_clear_provenance
      0              0                       0                    0                      37 ( 0.00%)             1 ( 0.00%)  UnknownFile???:NCZ_finalize
      0              0                       0                    0                      37 ( 0.00%)             1 ( 0.00%)  UnknownFile???:NCZ_provenance_finalize
      0              0                       0                    0                      36 ( 0.00%)             1 ( 0.00%)  UnknownFile???:NC4_provenance_finalize
      0              0                       0                    0                      36 ( 0.00%)             1 ( 0.00%)  UnknownFile???:NC_HDF5_finalize
      0              0                       0                    0                      36 ( 0.00%)             1 ( 0.00%)  UnknownFile???:nc4_hdf5_finalize
      0              0                       0                    0                      32 ( 0.00%)             1 ( 0.00%)  UnknownFile???:__dlerror_main_freeres
      0              0                       0                    0                      24 ( 0.00%)             2 ( 0.00%)  UnknownFile???:MPIR_Group_release
      0              0                       0                    0                      16 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::_M_deallocate(unsigned long*, unsigned long)
      0              0                       0                    0                      16 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<unsigned long>::deallocate(unsigned long*, unsigned long)
      0              0                       0                    0                      16 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()
      0              0                       0                    0                      16 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<unsigned long, std::allocator<unsigned long> >::~vector()
      0              0                       0                    0                      12 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDIU_release_lut
      0              0                       0                    0                       8 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/alloc_traits.h:std::_Vector_base<Variable*, std::allocator<Variable*> >::_M_deallocate(Variable**, unsigned long)
      0              0                       0                    0                       8 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/new_allocator.h:std::__new_allocator<Variable*>::deallocate(Variable**, unsigned long)
      0              0                       0                    0                       8 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Variable*, std::allocator<Variable*> >::~_Vector_base()
      0              0                       0                    0                       8 ( 0.00%)             1 ( 0.00%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<Variable*, std::allocator<Variable*> >::~vector()
      0              0                       0                    0                       7 ( 0.00%)             1 ( 0.00%)  UnknownFile???:H5VL__free_cls
      0              0                       0                    0                       4 ( 0.00%)             1 ( 0.00%)  UnknownFile???:MPIDIU_avt_destroy

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/TimeObj.cpp
--------------------------------------------------------------------------------
curB       curBk      totB             totBk          totFdB           totFdBk        

-- line 656 ----------------------------------------
.          .                .              .                .              .           			iReindexedMonth,
.          .                .              .                .              .           			iReindexedDay,
.          .                .              .                .              .           			m_iSecond / 3600,
.          .                .              .                .              .           			(m_iSecond % 3600) / 60,
.          .                .              .                .              .           			(m_iSecond % 60),
.          .                .              .                .              .           			m_iMicroSecond);
.          .                .              .                .              .           	}
.          .                .              .                .              .           
0          0          116,940 ( 0.00%) 5,847 ( 0.00%)       0              0           	return std::string(szBuffer);
.          .                .              .                .              .           }
.          .                .              .                .              .           
.          .                .              .                .              .           ///////////////////////////////////////////////////////////////////////////////
.          .                .              .                .              .           
.          .                .              .                .              .           std::string Time::ToFreeString() const {
.          .                .              .                .              .           	std::string strFreeString;
.          .                .              .                .              .           
.          .                .              .                .              .           	char szBuffer[100];
-- line 672 ----------------------------------------
-- line 1035 ----------------------------------------
.          .                .              .                .              .           
.          .                .              .                .              .           		AddDays(nOffset);
.          .                .              .                .              .           
.          .                .              .                .              .           	// Time format is "hours since ..."
.          .                .              .                .              .           	} else if (
.          .                .              .                .              .           	    (strFormattedTime.length() >= 12) &&
.          .                .              .                .              .           	    (strncmp(strFormattedTime.c_str(), "hours since ", 12) == 0)
.          .                .              .                .              .           	) {
0          0          121,920 ( 0.00%) 6,096 ( 0.00%)       0              0           		std::string strSubStr = strFormattedTime.substr(12);
.          .                .              .                .              .           		FromFormattedString(strSubStr);
.          .                .              .                .              .           
.          .                .              .                .              .           		AddHours(nOffset);
.          .                .              .                .              .           
.          .                .              .                .              .           	// Time format is "minutes since ..."
0          0                0              0          121,920 ( 0.00%) 6,096 ( 0.00%)  	} else if (
.          .                .              .                .              .           	    (strFormattedTime.length() >= 14) &&
.          .                .              .                .              .           	    (strncmp(strFormattedTime.c_str(), "minutes since ", 14) == 0)
.          .                .              .                .              .           	) {
.          .                .              .                .              .           		std::string strSubStr = strFormattedTime.substr(14);
.          .                .              .                .              .           		FromFormattedString(strSubStr);
.          .                .              .                .              .           
.          .                .              .                .              .           		AddMinutes(nOffset);
.          .                .              .                .              .           
-- line 1057 ----------------------------------------
-- line 1169 ----------------------------------------
.          .                .              .                .              .           		return timeBuf.DeltaDays(*this);
.          .                .              .                .              .           
.          .                .              .                .              .           	// Time format is "hours since ..."
.          .                .              .                .              .           	} else if (
.          .                .              .                .              .           	    (strFormattedTime.length() >= 12) &&
.          .                .              .                .              .           	    (strncmp(strFormattedTime.c_str(), "hours since ", 12) == 0)
.          .                .              .                .              .           	) {
.          .                .              .                .              .           		Time timeBuf(m_eCalendarType);
0          0           58,480 ( 0.00%) 2,924 ( 0.00%)       0              0           		std::string strSubStr = strFormattedTime.substr(12);
.          .                .              .                .              .           		timeBuf.FromFormattedString(strSubStr);
.          .                .              .                .              .           
.          .                .              .                .              .           		return timeBuf.DeltaHours(*this);
.          .                .              .                .              .           
.          .                .              .                .              .           	// Time format is "minutes since ..."
0          0                0              0           58,480 ( 0.00%) 2,924 ( 0.00%)  	} else if (
.          .                .              .                .              .           	    (strFormattedTime.length() >= 14) &&
.          .                .              .                .              .           	    (strncmp(strFormattedTime.c_str(), "minutes since ", 14) == 0)
.          .                .              .                .              .           	) {
.          .                .              .                .              .           		Time timeBuf(m_eCalendarType);
.          .                .              .                .              .           		std::string strSubStr = strFormattedTime.substr(14);
.          .                .              .                .              .           		timeBuf.FromFormattedString(strSubStr);
.          .                .              .                .              .           
.          .                .              .                .              .           		return timeBuf.DeltaMinutes(*this);
-- line 1191 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/Variable.cpp
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk           totFdB                  totFdBk          

-- line 24 ----------------------------------------
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           // VariableRegistry
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           VariableRegistry::VariableRegistry() :
.          .                       .               .                       .                .           	m_sProcessingQueueVarPos(-1)
.          .                       .               .                       .                .           {
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_VECMAG");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_ABS");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_SIGN");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_ALLPOS");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_SUM");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_AVG");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_DIFF");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_PROD");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_DIV");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_MIN");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_MAX");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_COND");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_SQRT");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_POW");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_LAT");
0          0                     112 ( 0.00%)      2 ( 0.00%)              0                0           	m_domDataOp.Add("_F");
.          .                       .               .                       .                .           }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           VariableRegistry::~VariableRegistry() {
.          .                       .               .                       .                .           	for (int v = 0; v < m_vecVariables.size(); v++) {
0          0                       0               0               4,153,312 ( 0.01%)       3 ( 0.00%)  		delete m_vecVariables[v];
.          .                       .               .                       .                .           	}
0          0                       0               0                   1,728 ( 0.00%)      32 ( 0.00%)  }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           void VariableRegistry::InsertUniqueOrDelete(
.          .                       .               .                       .                .           	Variable * pvar,
.          .                       .               .                       .                .           	VariableIndex * pvarix
.          .                       .               .                       .                .           ) {
.          .                       .               .                       .                .           	for (int v = 0; v < m_vecVariables.size(); v++) {
-- line 64 ----------------------------------------
-- line 66 ----------------------------------------
.          .                       .               .                       .                .           			delete pvar;
.          .                       .               .                       .                .           			if (pvarix != NULL) {
.          .                       .               .                       .                .           				*pvarix = v;
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           			return;
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
0          0                       8 ( 0.00%)      1 ( 0.00%)              0                0           	m_vecVariables.push_back(pvar);
.          .                       .               .                       .                .           	if (pvarix != NULL) {
.          .                       .               .                       .                .           		*pvarix = m_vecVariables.size()-1;
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           int VariableRegistry::FindOrRegisterSubStr(
.          .                       .               .                       .                .           	const std::string & strIn,
.          .                       .               .                       .                .           	VariableIndex * pvarix
.          .                       .               .                       .                .           ) {
.          .                       .               .                       .                .           	// Does not exist
0          0                     240 ( 0.00%)      1 ( 0.00%)              0                0           	Variable * pvar = new Variable();
.          .                       .               .                       .                .           	_ASSERT(pvar != NULL);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	if (pvarix != NULL) {
.          .                       .               .                       .                .           		*pvarix = InvalidVariableIndex;
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Parse the string
.          .                       .               .                       .                .           	bool fParamMode = false;
-- line 95 ----------------------------------------
-- line 106 ----------------------------------------
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Reading the variable name
.          .                       .               .                       .                .           		if (!fDimMode) {
.          .                       .               .                       .                .           			if (n == strIn.length()) {
.          .                       .               .                       .                .           				if (fParamMode) {
.          .                       .               .                       .                .           					_EXCEPTIONT("Unbalanced curly brackets in variable");
.          .                       .               .                       .                .           				}
.          .                       .               .                       .                .           				pvar->m_strName = strIn;
0          0                       8 ( 0.00%)      1 ( 0.00%)              0                0           				InsertUniqueOrDelete(pvar, pvarix);
.          .                       .               .                       .                .           				return n;
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           			// Items in curly brackets are included in variable name
.          .                       .               .                       .                .           			if (fParamMode) {
.          .                       .               .                       .                .           				if (strIn[n] == '(') {
.          .                       .               .                       .                .           					_EXCEPTIONT("Unexpected \'(\' in variable");
.          .                       .               .                       .                .           				}
-- line 122 ----------------------------------------
-- line 270 ----------------------------------------
.          .                       .               .                       .                .           }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           VariableIndex VariableRegistry::FindOrRegister(
.          .                       .               .                       .                .           	const std::string & strIn
.          .                       .               .                       .                .           ) {
.          .                       .               .                       .                .           	VariableIndex varix;
0          0                     248 ( 0.00%)      2 ( 0.00%)              0                0           	int iFinalStringPos = FindOrRegisterSubStr(strIn, &varix);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	if (iFinalStringPos != strIn.length()) {
.          .                       .               .                       .                .           		_EXCEPTION1("Malformed variable: Extra characters found at end of string \"%s\"",
.          .                       .               .                       .                .           			strIn.c_str());
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	_ASSERT((varix >= 0) && (varix < m_vecVariables.size()));
.          .                       .               .                       .                .           
-- line 286 ----------------------------------------
-- line 841 ----------------------------------------
.          .                       .               .                       .                .           	if (m_fOp) {
.          .                       .               .                       .                .           		_EXCEPTION1("Cannot call GetNcVarFromNetCDF() on operator \"%s\"",
.          .                       .               .                       .                .           			m_strName.c_str());
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Find the NcVar in all open NcFiles with this name
.          .                       .               .                       .                .           	NcVar * var;
.          .                       .               .                       .                .           	size_t sPos =
0          0                 195,908 ( 0.00%)  5,848 ( 0.00%)        195,908 ( 0.00%)   5,848 ( 0.00%)  		ncfilevec.FindContainingVariable(
.          .                       .               .                       .                .           			m_strName,
.          .                       .               .                       .                .           			&var);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	if (sPos == NcFileVector::InvalidIndex) {
.          .                       .               .                       .                .           		_EXCEPTION1("Variable \"%s\" not found in input files",
.          .                       .               .                       .                .           			m_strName.c_str());
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
-- line 857 ----------------------------------------
-- line 864 ----------------------------------------
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Get the time index
.          .                       .               .                       .                .           	long lTime;
.          .                       .               .                       .                .           	if (!NcIsTimeDimension(var->get_dim(0))) {
.          .                       .               .                       .                .           		lTime = NcFileVector::NoTimeIndex;
.          .                       .               .                       .                .           		m_fNoTimeInNcFile = true;
.          .                       .               .                       .                .           	} else {
0          0                 345,032 ( 0.00%) 29,240 ( 0.01%)      7,081,928 ( 0.02%)  52,632 ( 0.01%)  		lTime = ncfilevec.GetTimeIx(sPos);
.          .                       .               .                       .                .           		m_fNoTimeInNcFile = false;
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Verify correct dimensionality
.          .                       .               .                       .                .           	int nRequestedVarDims = m_strArg.size() + grid.DimCount();
.          .                       .               .                       .                .           	if (lTime != NcFileVector::NoTimeIndex) {
.          .                       .               .                       .                .           		nRequestedVarDims++;
.          .                       .               .                       .                .           	}
-- line 880 ----------------------------------------
-- line 884 ----------------------------------------
.          .                       .               .                       .                .           			ncfilevec.GetFilename(sPos).c_str(),
.          .                       .               .                       .                .           			nVarDims,
.          .                       .               .                       .                .           			nRequestedVarDims);
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Set the current index position for this variable
.          .                       .               .                       .                .           	int nSetDims = 0;
.          .                       .               .                       .                .           	std::vector<long> lDim;
0          0                  70,176 ( 0.00%)  2,924 ( 0.00%)              0                0           	lDim.resize(nVarDims, 0);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	if (lTime != NcFileVector::NoTimeIndex) {
.          .                       .               .                       .                .           		lDim[0] = lTime;
.          .                       .               .                       .                .           		nSetDims++;
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	for (int a = 0; a < m_strArg.size(); a++) {
.          .                       .               .                       .                .           
-- line 900 ----------------------------------------
-- line 927 ----------------------------------------
.          .                       .               .                       .                .           	for (int d = 0; d < lDim.size(); d++) {
.          .                       .               .                       .                .           		printf("%lu",lDim[d]);
.          .                       .               .                       .                .           		if (d != lDim.size()-1) {
.          .                       .               .                       .                .           			printf(",");
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           	printf("]\n");
.          .                       .               .                       .                .           */
0          0                 280,704 ( 0.00%) 23,392 ( 0.01%)      7,017,600 ( 0.02%)  46,784 ( 0.01%)  	var->set_cur(&(lDim[0]));
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	NcError err;
.          .                       .               .                       .                .           	if (err.get_err() != NC_NOERR) {
.          .                       .               .                       .                .           		_EXCEPTION1("NetCDF Fatal Error (%i)", err.get_err());
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	return var;
0          0                       0               0                  70,176 ( 0.00%)   2,924 ( 0.00%)  }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           void Variable::LoadGridData(
.          .                       .               .                       .                .           	VariableRegistry & varreg,
.          .                       .               .                       .                .           	const NcFileVector & vecFiles,
.          .                       .               .                       .                .           	const SimpleGrid & grid
.          .                       .               .                       .                .           ) {
.          .                       .               .                       .                .           	// Check if data already loaded
.          .                       .               .                       .                .           	const Time & time = vecFiles.GetTime();
.          .                       .               .                       .                .           	if (time.GetCalendarType() == Time::CalendarUnknown) {
.          .                       .               .                       .                .           		_EXCEPTIONT("Invalid time specified");
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
0          0                 327,488 ( 0.00%)  2,924 ( 0.00%)              0                0           	std::string strSourceFilenamesArg = vecFiles.GetConcatenatedFilenames();
.          .                       .               .                       .                .           	if (strSourceFilenamesArg == m_strSourceFilenames) {
.          .                       .               .                       .                .           		if (time == m_timeStored) {
.          .                       .               .                       .                .           			if (m_data.GetRows() != grid.GetSize()) {
.          .                       .               .                       .                .           				_EXCEPTIONT("Logic error");
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           			return;
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           		if ((m_fNoTimeInNcFile) && (m_timeStored.GetCalendarType() != Time::CalendarUnknown)) {
-- line 966 ----------------------------------------
-- line 969 ----------------------------------------
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           			return;
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	//std::cout << "Loading " << ToString(varreg) << " " << lTime << std::endl;
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Allocate data
0          0          12,143,255,040 (38.33%)  2,924 ( 0.00%) 12,139,102,080 (38.31%)   2,923 ( 0.00%)  	m_data.Allocate(grid.GetSize());
.          .                       .               .                       .                .           	//m_lTime = lTime;
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Get the data directly from a variable
.          .                       .               .                       .                .           	if (!m_fOp) {
.          .                       .               .                       .                .           		// Get pointer to variable
0          0                 891,820 ( 0.00%) 61,404 ( 0.02%)     14,365,612 ( 0.05%) 108,188 ( 0.03%)  		NcVar * var = GetNcVarFromNcFileVector(vecFiles, grid);
.          .                       .               .                       .                .           		if (var == NULL) {
.          .                       .               .                       .                .           			_EXCEPTION1("Variable \"%s\" not found in NetCDF file",
.          .                       .               .                       .                .           				m_strName.c_str());
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Check grid dimensions
.          .                       .               .                       .                .           		int nVarDims = var->num_dims();
.          .                       .               .                       .                .           		if (nVarDims < grid.m_nGridDim.size()) {
-- line 991 ----------------------------------------
-- line 993 ----------------------------------------
.          .                       .               .                       .                .           				m_strName.c_str());
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		int nSize = 0;
.          .                       .               .                       .                .           		int nLat = 0;
.          .                       .               .                       .                .           		int nLon = 0;
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		std::vector<long> nDataSize;
0          0                  70,176 ( 0.00%)  2,924 ( 0.00%)              0                0           		nDataSize.resize(nVarDims, 1);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Rectilinear grid
.          .                       .               .                       .                .           		if (grid.m_nGridDim.size() == 2) {
.          .                       .               .                       .                .           			nLat = grid.m_nGridDim[0];
.          .                       .               .                       .                .           			nLon = grid.m_nGridDim[1];
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           			int nVarDimX0 = var->get_dim(nVarDims-2)->size();
.          .                       .               .                       .                .           			int nVarDimX1 = var->get_dim(nVarDims-1)->size();
-- line 1009 ----------------------------------------
-- line 1033 ----------------------------------------
.          .                       .               .                       .                .           					" \"%s\" on \"ncol\" -- possible mismatch between connectivity file and data",
.          .                       .               .                       .                .           					m_strName.c_str());
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           			nDataSize[nVarDims-1] = nSize;
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Load the data
0          0           3,036,164,640 ( 9.58%) 38,012 ( 0.01%)  3,037,825,472 ( 9.59%)  38,012 ( 0.01%)  		var->get(&(m_data[0]), &(nDataSize[0]));
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Turn off errors as we check attributes
.          .                       .               .                       .                .           		NcError err(NcError::silent_nonfatal);
.          .                       .               .                       .                .           		if (err.get_err() != NC_NOERR) {
.          .                       .               .                       .                .           			_EXCEPTION1("NetCDF Fatal Error (%i)", err.get_err());
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Check for _FillValue
0          0                 277,780 ( 0.00%) 11,696 ( 0.00%)        277,780 ( 0.00%)  11,696 ( 0.00%)  		NcAtt * attFillValue = var->get_att("_FillValue");
.          .                       .               .                       .                .           		if (attFillValue != NULL) {
.          .                       .               .                       .                .           			m_data.SetFillValue(attFillValue->as_float(0));
.          .                       .               .                       .                .           		} else {
0          0                 330,412 ( 0.00%) 11,696 ( 0.00%)        330,412 ( 0.00%)  11,696 ( 0.00%)  			attFillValue = var->get_att("missing_value");
.          .                       .               .                       .                .           			if (attFillValue != NULL) {
.          .                       .               .                       .                .           				m_data.SetFillValue(attFillValue->as_float(0));
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Check for scale_factor attribute
0          0                 312,868 ( 0.00%) 11,696 ( 0.00%)        312,868 ( 0.00%)  11,696 ( 0.00%)  		NcAtt * attScaleFactor = var->get_att("scale_factor");
.          .                       .               .                       .                .           		if (attScaleFactor != NULL) {
.          .                       .               .                       .                .           			float dScaleFactor = attScaleFactor->as_float(0);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           			for (int i = 0; i < m_data.GetRows(); i++) {
.          .                       .               .                       .                .           				m_data[i] *= dScaleFactor;
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           			if (m_data.HasFillValue()) {
.          .                       .               .                       .                .           				m_data.SetFillValue(m_data.GetFillValue() * dScaleFactor);
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Check for add_offset attribute
0          0                 277,780 ( 0.00%) 11,696 ( 0.00%)        277,780 ( 0.00%)  11,696 ( 0.00%)  		NcAtt * attAddOffset = var->get_att("add_offset");
.          .                       .               .                       .                .           		if (attAddOffset != NULL) {
.          .                       .               .                       .                .           			float dAddOffset = attAddOffset->as_float(0);
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           			for (int i = 0; i < m_data.GetRows(); i++) {
.          .                       .               .                       .                .           				m_data[i] += dAddOffset;
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           			if (m_data.HasFillValue()) {
.          .                       .               .                       .                .           				m_data.SetFillValue(m_data.GetFillValue() + dAddOffset);
.          .                       .               .                       .                .           			}
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Evaluate a data operator to get the contents of this variable
0          0                       0               0                  70,176 ( 0.00%)   2,924 ( 0.00%)  	} else {
.          .                       .               .                       .                .           		// Get the associated operator
.          .                       .               .                       .                .           		DataOp * pop = varreg.GetDataOp(m_strName);
.          .                       .               .                       .                .           		if (pop == NULL) {
.          .                       .               .                       .                .           			_EXCEPTION1("Unexpected operator \"%s\"", m_strName.c_str());
.          .                       .               .                       .                .           		}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           		// Build argument list
.          .                       .               .                       .                .           		std::vector<DataArray1D<float> const *> vecArgData;
-- line 1095 ----------------------------------------
-- line 1107 ----------------------------------------
.          .                       .               .                       .                .           		// Apply the DataOp
.          .                       .               .                       .                .           		pop->Apply(grid, m_strArg, vecArgData, m_data);
.          .                       .               .                       .                .           	}
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Store the time
.          .                       .               .                       .                .           	m_timeStored = time;
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Store the filenames
0          0                     112 ( 0.00%)      1 ( 0.00%)              0                0           	m_strSourceFilenames = strSourceFilenamesArg;
0          0                       0               0                 327,488 ( 0.00%)   2,924 ( 0.00%)  }
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           ///////////////////////////////////////////////////////////////////////////////
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           void Variable::UnloadGridData() {
.          .                       .               .                       .                .           
.          .                       .               .                       .                .           	// Force data to be loaded within this structure
.          .                       .               .                       .                .           	m_timeStored = Time(Time::CalendarUnknown);
.          .                       .               .                       .                .           	m_strSourceFilenames = "";
-- line 1124 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/DataArray1D.h
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk          totFdB                  totFdBk        

-- line 51 ----------------------------------------
.          .                       .              .                       .              .           	) :
.          .                       .              .                       .              .           		m_fOwnsData(true),
.          .                       .              .                       .              .           		m_sSize(sSize),
.          .                       .              .                       .              .           		m_fHasFillValue(false),
.          .                       .              .                       .              .           		m_dFillValue(T()),
.          .                       .              .                       .              .           		m_data(NULL)
.          .                       .              .                       .              .           	{
.          .                       .              .                       .              .           		if (fAllocate) {
0          0                 455,592 ( 0.00%)    74 ( 0.00%)              0              0           			Allocate(sSize);
.          .                       .              .                       .              .           		}
.          .                       .              .                       .              .           	}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           	///	<summary>
.          .                       .              .                       .              .           	///		Copy constructor.
.          .                       .              .                       .              .           	///	</summary>
.          .                       .              .                       .              .           	DataArray1D(const DataArray1D<T> & da) :
.          .                       .              .                       .              .           		m_fOwnsData(true),
-- line 67 ----------------------------------------
-- line 70 ----------------------------------------
.          .                       .              .                       .              .           	{
.          .                       .              .                       .              .           		Assign(da);
.          .                       .              .                       .              .           	}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           	///	<summary>
.          .                       .              .                       .              .           	///		Destructor.
.          .                       .              .                       .              .           	///	</summary>
.          .                       .              .                       .              .           	virtual ~DataArray1D() {
0          0                       0              0              29,526,312 ( 0.09%)    78 ( 0.00%)  		Detach();
.          .                       .              .                       .              .           	}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           	///	<summary>
.          .                       .              .                       .              .           	///		Get the size of the data, in bytes.
.          .                       .              .                       .              .           	///	</summary>
.          .                       .              .                       .              .           	virtual size_t GetByteSize() const {
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           		// Verify data aligns on word boundaries
-- line 86 ----------------------------------------
-- line 97 ----------------------------------------
.          .                       .              .                       .              .           	///	</summary>
.          .                       .              .                       .              .           	void Allocate(
.          .                       .              .                       .              .           		size_t sSize
.          .                       .              .                       .              .           	) {
.          .                       .              .                       .              .           		if (!m_fOwnsData) {
.          .                       .              .                       .              .           			_EXCEPTIONT("Attempting to Allocate() on attached DataArray1D");
.          .                       .              .                       .              .           		}
.          .                       .              .                       .              .           
0          0                       0              0          12,139,102,080 (38.31%) 2,923 ( 0.00%)  		Detach();
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           		if (sSize == 0) {
.          .                       .              .                       .              .           			m_sSize = 0;
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           			return;
.          .                       .              .                       .              .           		}
.          .                       .              .                       .              .           		if ((m_data == NULL) || (m_sSize != sSize)) {
.          .                       .              .                       .              .           			m_sSize = sSize;
.          .                       .              .                       .              .           
0          0          12,268,323,816 (38.72%) 3,075 ( 0.00%)              0              0           			m_data = reinterpret_cast<T *>(malloc(GetByteSize()));
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           			if (m_data == NULL) {
.          .                       .              .                       .              .           				_EXCEPTION1("Failed malloc call (%lu bytes)", GetByteSize());
.          .                       .              .                       .              .           			}
.          .                       .              .                       .              .           		}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           		Zero();
.          .                       .              .                       .              .           	}
-- line 123 ----------------------------------------
-- line 155 ----------------------------------------
.          .                       .              .                       .              .           		m_fOwnsData = false;
.          .                       .              .                       .              .           	}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           	///	<summary>
.          .                       .              .                       .              .           	///		Detach data from this DataChunk.
.          .                       .              .                       .              .           	///	</summary>
.          .                       .              .                       .              .           	virtual void Detach() {
.          .                       .              .                       .              .           		if ((m_fOwnsData) && (m_data != NULL)) {
0          0                       0              0          12,268,323,816 (38.72%) 3,075 ( 0.00%)  			delete[] m_data;
.          .                       .              .                       .              .           		}
.          .                       .              .                       .              .           		m_fOwnsData = true;
.          .                       .              .                       .              .           		m_data = NULL;
.          .                       .              .                       .              .           	}
.          .                       .              .                       .              .           
.          .                       .              .                       .              .           	///	<summary>
.          .                       .              .                       .              .           	///		Deallocate data from this DataChunk.
.          .                       .              .                       .              .           	///	</summary>
-- line 171 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/alloc_traits.h
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk                totFdB                  totFdBk              

-- line 474 ----------------------------------------
.          .                       .                    .                       .                    .                  *  @param  __a  An allocator.
.          .                       .                    .                       .                    .                  *  @param  __n  The number of objects to allocate space for.
.          .                       .                    .                       .                    .                  *
.          .                       .                    .                       .                    .                  *  Calls @c a.allocate(n)
.          .                       .                    .                       .                    .                 */
.          .                       .                    .                       .                    .                 [[__nodiscard__,__gnu__::__always_inline__]]
.          .                       .                    .                       .                    .                 static _GLIBCXX20_CONSTEXPR pointer
.          .                       .                    .                       .                    .                 allocate(allocator_type& __a, size_type __n)
0          0          15,794,695,088 (49.85%) 396,443,801 (99.92%)              0                    0                 { return __a.allocate(__n); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 /**
.          .                       .                    .                       .                    .                  *  @brief  Allocate memory.
.          .                       .                    .                       .                    .                  *  @param  __a  An allocator.
.          .                       .                    .                       .                    .                  *  @param  __n  The number of objects to allocate space for.
.          .                       .                    .                       .                    .                  *  @param  __hint Aid to locality.
.          .                       .                    .                       .                    .                  *  @return Memory of suitable size and alignment for @a n objects
.          .                       .                    .                       .                    .                  *          of type @c value_type
-- line 490 ----------------------------------------
-- line 509 ----------------------------------------
.          .                       .                    .                       .                    .                  *  @param  __p  Pointer to the memory to deallocate.
.          .                       .                    .                       .                    .                  *  @param  __n  The number of objects space was allocated for.
.          .                       .                    .                       .                    .                  *
.          .                       .                    .                       .                    .                  *  Calls <tt> a.deallocate(p, n) </tt>
.          .                       .                    .                       .                    .                 */
.          .                       .                    .                       .                    .                 [[__gnu__::__always_inline__]]
.          .                       .                    .                       .                    .                 static _GLIBCXX20_CONSTEXPR void
.          .                       .                    .                       .                    .                 deallocate(allocator_type& __a, pointer __p, size_type __n)
0          0                       0                    0          15,794,695,088 (49.85%) 396,443,801 (99.92%)        { __a.deallocate(__p, __n); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 /**
.          .                       .                    .                       .                    .                  *  @brief  Construct an object of type `_Up`
.          .                       .                    .                       .                    .                  *  @param  __a  An allocator.
.          .                       .                    .                       .                    .                  *  @param  __p  Pointer to memory of suitable size and alignment for
.          .                       .                    .                       .                    .                  *	       an object of type `_Up`.
.          .                       .                    .                       .                    .                  *  @param  __args Constructor arguments.
.          .                       .                    .                       .                    .                  *
-- line 525 ----------------------------------------
-- line 940 ----------------------------------------
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           #if _GLIBCXX_HOSTED
.          .                       .                    .                       .                    .             template<typename _ForwardIterator, typename _Tp>
.          .                       .                    .                       .                    .               __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
.          .                       .                    .                       .                    .               inline void
.          .                       .                    .                       .                    .               _Destroy(_ForwardIterator __first, _ForwardIterator __last,
.          .                       .                    .                       .                    .           	     allocator<_Tp>&)
.          .                       .                    .                       .                    .               {
0          0                       0                    0             120,490,800 ( 0.38%)   3,540,984 ( 0.89%)        std::_Destroy(__first, __last);
.          .                       .                    .                       .                    .               }
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .             /// @endcond
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           _GLIBCXX_END_NAMESPACE_VERSION
.          .                       .                    .                       .                    .           } // namespace std
.          .                       .                    .                       .                    .           #endif // _ALLOC_TRAITS_H

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/vector.tcc
--------------------------------------------------------------------------------
curB       curBk      totB                totBk              totFdB              totFdBk            

-- line 115 ----------------------------------------
.          .                   .                  .                   .                  .           	  {
.          .                   .                  .                   .                  .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
.          .                   .                  .                   .                  .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
.          .                   .                  .                   .                  .           				     std::forward<_Args>(__args)...);
.          .                   .                  .                   .                  .           	    ++this->_M_impl._M_finish;
.          .                   .                  .                   .                  .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
.          .                   .                  .                   .                  .           	  }
.          .                   .                  .                   .                  .           	else
0          0          29,140,552 ( 0.09%) 3,114,839 ( 0.79%) 12,491,888 ( 0.04%) 2,076,497 ( 0.52%)  	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
.          .                   .                  .                   .                  .           #if __cplusplus > 201402L
.          .                   .                  .                   .                  .           	return back();
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .             template<typename _Tp, typename _Alloc>
.          .                   .                  .                   .                  .               _GLIBCXX20_CONSTEXPR
-- line 131 ----------------------------------------
-- line 230 ----------------------------------------
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           	      std::__alloc_on_copy(_M_get_Tp_allocator(),
.          .                   .                  .                   .                  .           				   __x._M_get_Tp_allocator());
.          .                   .                  .                   .                  .           	    }
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .           	  const size_type __xlen = __x.size();
.          .                   .                  .                   .                  .           	  if (__xlen > capacity())
.          .                   .                  .                   .                  .           	    {
0          0             140,928 ( 0.00%)         3 ( 0.00%)          0                  0           	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
.          .                   .                  .                   .                  .           						   __x.end());
.          .                   .                  .                   .                  .           	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
.          .                   .                  .                   .                  .           			    _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           	      _M_deallocate(this->_M_impl._M_start,
.          .                   .                  .                   .                  .           			    this->_M_impl._M_end_of_storage
.          .                   .                  .                   .                  .           			    - this->_M_impl._M_start);
.          .                   .                  .                   .                  .           	      this->_M_impl._M_start = __tmp;
.          .                   .                  .                   .                  .           	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
-- line 246 ----------------------------------------
-- line 451 ----------------------------------------
.          .                   .                  .                   .                  .               _M_realloc_insert(iterator __position, const _Tp& __x)
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .               {
.          .                   .                  .                   .                  .                 const size_type __len =
.          .                   .                  .                   .                  .           	_M_check_len(size_type(1), "vector::_M_realloc_insert");
.          .                   .                  .                   .                  .                 pointer __old_start = this->_M_impl._M_start;
.          .                   .                  .                   .                  .                 pointer __old_finish = this->_M_impl._M_finish;
.          .                   .                  .                   .                  .                 const size_type __elems_before = __position - begin();
0          0          29,675,416 ( 0.09%) 3,115,596 ( 0.79%)          0                  0                 pointer __new_start(this->_M_allocate(__len));
.          .                   .                  .                   .                  .                 pointer __new_finish(__new_start);
.          .                   .                  .                   .                  .                 __try
.          .                   .                  .                   .                  .           	{
.          .                   .                  .                   .                  .           	  // The order of the three operations is dictated by the C++11
.          .                   .                  .                   .                  .           	  // case, where the moves could alter a new element belonging
.          .                   .                  .                   .                  .           	  // to the existing vector.  This is an issue only for callers
.          .                   .                  .                   .                  .           	  // taking the element by lvalue ref (see last bullet of C++11
.          .                   .                  .                   .                  .           	  // [res.on.arguments]).
-- line 467 ----------------------------------------
-- line 511 ----------------------------------------
.          .                   .                  .                   .                  .           	  _M_deallocate(__new_start, __len);
.          .                   .                  .                   .                  .           	  __throw_exception_again;
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           #if __cplusplus >= 201103L
.          .                   .                  .                   .                  .                 if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .           	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
.          .                   .                  .                   .                  .                 _GLIBCXX_ASAN_ANNOTATE_REINIT;
0          0                   0                  0          12,757,016 ( 0.04%) 2,077,025 ( 0.52%)        _M_deallocate(__old_start,
.          .                   .                  .                   .                  .           		    this->_M_impl._M_end_of_storage - __old_start);
.          .                   .                  .                   .                  .                 this->_M_impl._M_start = __new_start;
.          .                   .                  .                   .                  .                 this->_M_impl._M_finish = __new_finish;
.          .                   .                  .                   .                  .                 this->_M_impl._M_end_of_storage = __new_start + __len;
.          .                   .                  .                   .                  .               }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .             template<typename _Tp, typename _Alloc>
.          .                   .                  .                   .                  .               _GLIBCXX20_CONSTEXPR
-- line 527 ----------------------------------------
-- line 579 ----------------------------------------
.          .                   .                  .                   .                  .           	      // the allocator can alter them if 'this' is globally reachable.
.          .                   .                  .                   .                  .           	      pointer __old_start = this->_M_impl._M_start;
.          .                   .                  .                   .                  .           	      pointer __old_finish = this->_M_impl._M_finish;
.          .                   .                  .                   .                  .           	      const pointer __pos = __position.base();
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	      const size_type __len =
.          .                   .                  .                   .                  .           		_M_check_len(__n, "vector::_M_fill_insert");
.          .                   .                  .                   .                  .           	      const size_type __elems_before = __pos - __old_start;
0          0           2,546,016 ( 0.01%)    17,840 ( 0.00%)          0                  0           	      pointer __new_start(this->_M_allocate(__len));
.          .                   .                  .                   .                  .           	      pointer __new_finish(__new_start);
.          .                   .                  .                   .                  .           	      __try
.          .                   .                  .                   .                  .           		{
.          .                   .                  .                   .                  .           		  // See _M_realloc_insert above.
.          .                   .                  .                   .                  .           		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
.          .                   .                  .                   .                  .           						__n, __x,
.          .                   .                  .                   .                  .           						_M_get_Tp_allocator());
.          .                   .                  .                   .                  .           		  __new_finish = pointer();
-- line 595 ----------------------------------------
-- line 613 ----------------------------------------
.          .                   .                  .                   .                  .           		  else
.          .                   .                  .                   .                  .           		    std::_Destroy(__new_start, __new_finish,
.          .                   .                  .                   .                  .           				  _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           		  _M_deallocate(__new_start, __len);
.          .                   .                  .                   .                  .           		  __throw_exception_again;
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           	      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
0          0                   0                  0           1,132,656 ( 0.00%)     9,068 ( 0.00%)  	      _M_deallocate(__old_start,
.          .                   .                  .                   .                  .           			    this->_M_impl._M_end_of_storage - __old_start);
.          .                   .                  .                   .                  .           	      this->_M_impl._M_start = __new_start;
.          .                   .                  .                   .                  .           	      this->_M_impl._M_finish = __new_finish;
.          .                   .                  .                   .                  .           	      this->_M_impl._M_end_of_storage = __new_start + __len;
.          .                   .                  .                   .                  .           	    }
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .               }
.          .                   .                  .                   .                  .           
-- line 629 ----------------------------------------
-- line 655 ----------------------------------------
.          .                   .                  .                   .                  .           	    {
.          .                   .                  .                   .                  .           	      // Make local copies of these members because the compiler thinks
.          .                   .                  .                   .                  .           	      // the allocator can alter them if 'this' is globally reachable.
.          .                   .                  .                   .                  .           	      pointer __old_start = this->_M_impl._M_start;
.          .                   .                  .                   .                  .           	      pointer __old_finish = this->_M_impl._M_finish;
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	      const size_type __len =
.          .                   .                  .                   .                  .           		_M_check_len(__n, "vector::_M_default_append");
0          0          27,778,652 ( 0.09%)    15,024 ( 0.00%)          0                  0           	      pointer __new_start(this->_M_allocate(__len));
.          .                   .                  .                   .                  .           	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
.          .                   .                  .                   .                  .           		{
.          .                   .                  .                   .                  .           		  __try
.          .                   .                  .                   .                  .           		    {
.          .                   .                  .                   .                  .           		      std::__uninitialized_default_n_a(__new_start + __size,
.          .                   .                  .                   .                  .           			      __n, _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           		    }
.          .                   .                  .                   .                  .           		  __catch(...)
-- line 671 ----------------------------------------
-- line 695 ----------------------------------------
.          .                   .                  .                   .                  .           				      _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           		      _M_deallocate(__new_start, __len);
.          .                   .                  .                   .                  .           		      __throw_exception_again;
.          .                   .                  .                   .                  .           		    }
.          .                   .                  .                   .                  .           		  std::_Destroy(__old_start, __old_finish,
.          .                   .                  .                   .                  .           				_M_get_Tp_allocator());
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
0          0                   0                  0           1,132,656 ( 0.00%)     9,068 ( 0.00%)  	      _M_deallocate(__old_start,
.          .                   .                  .                   .                  .           			    this->_M_impl._M_end_of_storage - __old_start);
.          .                   .                  .                   .                  .           	      this->_M_impl._M_start = __new_start;
.          .                   .                  .                   .                  .           	      this->_M_impl._M_finish = __new_start + __size + __n;
.          .                   .                  .                   .                  .           	      this->_M_impl._M_end_of_storage = __new_start + __len;
.          .                   .                  .                   .                  .           	    }
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .               }
.          .                   .                  .                   .                  .           
-- line 711 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/CommandLine.h
--------------------------------------------------------------------------------
curB       curBk      totB         totBk      totFdB         totFdBk     

-- line 55 ----------------------------------------
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Default constructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	CommandLineArgument(
.          .            .          .              .           .           		std::string strName,
.          .            .          .              .           .           		std::string strDescription
.          .            .          .              .           .           	) :
0          0          155 ( 0.00%) 5 ( 0.00%)     0           0           		m_strName(std::string("--") + strName),
0          0           28 ( 0.00%) 1 ( 0.00%)     0           0           		m_strDescription(strDescription),
.          .            .          .              .           .           		m_fHidden(false)
.          .            .          .              .           .           	{
.          .            .          .              .           .           		if ((strName.length() > 0) && (strName[0] == '*')) {
.          .            .          .              .           .           			m_strName = std::string("--") + strName.substr(1);
.          .            .          .              .           .           			m_fHidden = true;
.          .            .          .              .           .           		}
.          .            .          .              .           .           	}
.          .            .          .              .           .           
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Virtual destructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	virtual ~CommandLineArgument() {
0          0            0          0            183 ( 0.00%)  6 ( 0.00%)  	}
.          .            .          .              .           .           
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Identify the type of parameter.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	virtual ArgumentType GetArgumentType() {
.          .            .          .              .           .           		return ArgumentTypeNone;
.          .            .          .              .           .           	}
.          .            .          .              .           .           
-- line 85 ----------------------------------------
-- line 126 ----------------------------------------
.          .            .          .              .           .           	bool m_fHidden;
.          .            .          .              .           .           };
.          .            .          .              .           .           
.          .            .          .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .            .          .              .           .           
.          .            .          .              .           .           ///	<summary>
.          .            .          .              .           .           ///		A command line boolean.
.          .            .          .              .           .           ///	</summary>
0          0            0          0            440 ( 0.00%)  5 ( 0.00%)  class CommandLineArgumentBool : public CommandLineArgument {
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Constructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	CommandLineArgumentBool(
.          .            .          .              .           .           		bool & ref,
.          .            .          .              .           .           		std::string strName,
.          .            .          .              .           .           		std::string strDescription
-- line 142 ----------------------------------------
-- line 187 ----------------------------------------
.          .            .          .              .           .           	bool & m_fValue;
.          .            .          .              .           .           };
.          .            .          .              .           .           
.          .            .          .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .            .          .              .           .           
.          .            .          .              .           .           ///	<summary>
.          .            .          .              .           .           ///		A command line string.
.          .            .          .              .           .           ///	</summary>
0          0            0          0          1,262 ( 0.00%) 17 ( 0.00%)  class CommandLineArgumentString : public CommandLineArgument {
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Constructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	CommandLineArgumentString(
.          .            .          .              .           .           		std::string & ref,
.          .            .          .              .           .           		std::string strName,
.          .            .          .              .           .           	 	std::string strDefaultValue,
.          .            .          .              .           .           		std::string strDescription
.          .            .          .              .           .           	) :
.          .            .          .              .           .           		CommandLineArgument(strName, strDescription),
0          0           87 ( 0.00%) 3 ( 0.00%)    28 ( 0.00%)  1 ( 0.00%)  		m_strValue(ref)
.          .            .          .              .           .           	{
.          .            .          .              .           .           		m_strValue = strDefaultValue;
.          .            .          .              .           .           	}
.          .            .          .              .           .           
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Identify the type of parameter.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	virtual ArgumentType GetArgumentType() {
-- line 215 ----------------------------------------
-- line 240 ----------------------------------------
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	virtual void SetValue(
.          .            .          .              .           .           		int ix,
.          .            .          .              .           .           		std::string strValue
.          .            .          .              .           .           	) {
.          .            .          .              .           .           		if (ix != 0) {
.          .            .          .              .           .           			_EXCEPTIONT("Invalid value index.");
.          .            .          .              .           .           		}
0          0           91 ( 0.00%) 2 ( 0.00%)     0           0           		m_strValue = strValue.c_str();
.          .            .          .              .           .           	}
.          .            .          .              .           .           
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Argument value.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	std::string & m_strValue;
.          .            .          .              .           .           };
.          .            .          .              .           .           
.          .            .          .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .            .          .              .           .           
.          .            .          .              .           .           ///	<summary>
.          .            .          .              .           .           ///		A command line integer.
.          .            .          .              .           .           ///	</summary>
0          0            0          0             88 ( 0.00%)  1 ( 0.00%)  class CommandLineArgumentInt : public CommandLineArgument {
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Constructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	CommandLineArgumentInt(
.          .            .          .              .           .           		int & ref,
.          .            .          .              .           .           		std::string strName,
.          .            .          .              .           .           		int dDefaultValue,
-- line 271 ----------------------------------------
-- line 323 ----------------------------------------
.          .            .          .              .           .           	int & m_dValue;
.          .            .          .              .           .           };
.          .            .          .              .           .           
.          .            .          .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .            .          .              .           .           
.          .            .          .              .           .           ///	<summary>
.          .            .          .              .           .           ///		A command line double.
.          .            .          .              .           .           ///	</summary>
0          0            0          0          1,040 ( 0.00%) 17 ( 0.00%)  class CommandLineArgumentDouble : public CommandLineArgument {
.          .            .          .              .           .           public:
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Constructor.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	CommandLineArgumentDouble(
.          .            .          .              .           .           		double & ref,
.          .            .          .              .           .           		std::string strName,
.          .            .          .              .           .           		double dDefaultValue,
.          .            .          .              .           .           		std::string strDescription
.          .            .          .              .           .           	) :
.          .            .          .              .           .           		CommandLineArgument(strName, strDescription),
0          0          192 ( 0.00%) 8 ( 0.00%)    68 ( 0.00%)  4 ( 0.00%)  		m_dValue(ref)
.          .            .          .              .           .           	{
.          .            .          .              .           .           		m_dValue = dDefaultValue;
.          .            .          .              .           .           	}
.          .            .          .              .           .           
.          .            .          .              .           .           	///	<summary>
.          .            .          .              .           .           	///		Identify the type of parameter.
.          .            .          .              .           .           	///	</summary>
.          .            .          .              .           .           	virtual ArgumentType GetArgumentType() const {
-- line 351 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/NcFileVector.cpp
--------------------------------------------------------------------------------
curB           curBk        totB                totBk           totFdB              totFdBk         

-- line 25 ----------------------------------------
    .            .                   .               .                   .               .           const long NcFileVector::NoTimeIndex = (-1);
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           const size_t NcFileVector::InvalidIndex = (-1);
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           ///////////////////////////////////////////////////////////////////////////////
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           void NcFileVector::clear() {
    .            .                   .               .                   .               .           	for (size_t i = 0; i < size(); i++) {
    0            0                   0               0          36,817,450 ( 0.12%) 10,150 ( 0.00%)  		m_vecNcFile[i]->close();
    0            0                   0               0               2,400 ( 0.00%)     50 ( 0.00%)  		delete m_vecNcFile[i];
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           	m_vecNcFile.resize(0);
    0            0                   0               0               5,600 ( 0.00%)     50 ( 0.00%)  	m_vecFilenames.resize(0);
    .            .                   .               .                   .               .           	m_vecFileType.resize(0);
    .            .                   .               .                   .               .           	m_time = Time(Time::CalendarUnknown);
    .            .                   .               .                   .               .           	m_vecTimeIxs.resize(0);
    .            .                   .               .                   .               .           }
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           ///////////////////////////////////////////////////////////////////////////////
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           void NcFileVector::InsertFile(
    .            .                   .               .                   .               .           	const std::string & strFile,
    .            .                   .               .                   .               .           	long lTimeIndex
    .            .                   .               .                   .               .           ) {
    0            0          38,952,491 ( 0.12%)  6,373 ( 0.00%)  3,972,031 ( 0.01%)  3,032 ( 0.00%)  	NcFile * pNewFile = new NcFile(strFile.c_str());
    .            .                   .               .                   .               .           	if (pNewFile == NULL) {
    .            .                   .               .                   .               .           		_EXCEPTIONT("Unable to allocate new NcFile");
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           	if (!pNewFile->is_valid()) {
    .            .                   .               .                   .               .           		_EXCEPTION1("Cannot open input file \"%s\"", strFile.c_str());
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           
    0            0                 400 ( 0.00%)     50 ( 0.00%)          0               0           	m_vecNcFile.push_back(pNewFile);
    0            0               7,200 ( 0.00%)    100 ( 0.00%)          0               0           	m_vecFilenames.push_back(strFile);
    0            0                 400 ( 0.00%)     50 ( 0.00%)          0               0           	m_vecTimeIxs.push_back(lTimeIndex);
    0            0               3,600 ( 0.00%)     50 ( 0.00%)          0               0           	m_vecFileTime.push_back(NcTimeDimension());
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	// If a time index is already specified no need to read in the "time" variable
    .            .                   .               .                   .               .           	if (lTimeIndex != InvalidTimeIndex) {
    .            .                   .               .                   .               .           		m_vecFileType.push_back(FileType_Unknown);
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	// Identify the FileType by the properties of the "time" variable
    .            .                   .               .                   .               .           	} else {
    0            0               1,100 ( 0.00%)    100 ( 0.00%)      1,100 ( 0.00%)    100 ( 0.00%)  		NcDim * dimTime = NcGetTimeDimension(*pNewFile);
    .            .                   .               .                   .               .           		if (dimTime == NULL) {
    .            .                   .               .                   .               .           			NcVar * varTime = NcGetTimeVariable(*pNewFile);
    .            .                   .               .                   .               .           			if (varTime != NULL) {
    .            .                   .               .                   .               .           				ReadCFTimeDataFromNcFile(
    .            .                   .               .                   .               .           					pNewFile,
    .            .                   .               .                   .               .           					strFile,
    .            .                   .               .                   .               .           					m_vecFileTime[m_vecFileTime.size()-1],
    .            .                   .               .                   .               .           					false);
    .            .                   .               .                   .               .           				m_vecFileType.push_back(FileType_Standard);
    .            .                   .               .                   .               .           			} else {
    .            .                   .               .                   .               .           				m_vecFileType.push_back(FileType_NoTimeDim);
    .            .                   .               .                   .               .           			}
    .            .                   .               .                   .               .           		} else {
    0            0               1,100 ( 0.00%)    100 ( 0.00%)      1,100 ( 0.00%)    100 ( 0.00%)  			NcVar * varTime = NcGetTimeVariable(*pNewFile);
    .            .                   .               .                   .               .           			if (varTime == NULL) {
    .            .                   .               .                   .               .           				m_vecFileType.push_back(FileType_NoTimeVar);
    .            .                   .               .                   .               .           			} else {
    .            .                   .               .                   .               .           				// If the time variable exists read it in
6,050 ( 5.12%) 300 (23.90%)    543,820 ( 0.00%)  9,297 ( 0.00%)    617,954 ( 0.00%)  9,996 ( 0.00%)  				ReadCFTimeDataFromNcFile(
    .            .                   .               .                   .               .           					pNewFile,
    .            .                   .               .                   .               .           					strFile,
    .            .                   .               .                   .               .           					m_vecFileTime[m_vecFileTime.size()-1],
    .            .                   .               .                   .               .           					false);
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           				// Check time type
    0            0               2,950 ( 0.00%)    200 ( 0.00%)      2,950 ( 0.00%)    200 ( 0.00%)  				NcAtt * attType = varTime->get_att("type");
    .            .                   .               .                   .               .           				if (attType == NULL) {
    0            0                 200 ( 0.00%)     50 ( 0.00%)          0               0           					m_vecFileType.push_back(FileType_Standard);
    .            .                   .               .                   .               .           				} else {
    .            .                   .               .                   .               .           					std::string strType = attType->as_string(0);
    .            .                   .               .                   .               .           					if (strType == "daily mean climatology") {
    .            .                   .               .                   .               .           						m_vecFileType.push_back(FileType_DailyMeanClimo);
    .            .                   .               .                   .               .           					} else if (strType == "annual mean climatology") {
    .            .                   .               .                   .               .           						m_vecFileType.push_back(FileType_AnnualMeanClimo);
    .            .                   .               .                   .               .           					} else {
    .            .                   .               .                   .               .           						m_vecFileType.push_back(FileType_Standard);
-- line 104 ----------------------------------------
-- line 124 ----------------------------------------
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	int iLast = 0;
    .            .                   .               .                   .               .           	for (int i = 0; i <= strFiles.length(); i++) {
    .            .                   .               .                   .               .           		if ((i == strFiles.length()) ||
    .            .                   .               .                   .               .           		    (strFiles[i] == ';')
    .            .                   .               .                   .               .           		) {
    .            .                   .               .                   .               .           			std::string strFile =
    0            0               5,600 ( 0.00%)     50 ( 0.00%)          0               0           				strFiles.substr(iLast, i - iLast);
    .            .                   .               .                   .               .           
6,050 ( 5.12%) 300 (23.90%) 39,449,545 ( 0.12%) 14,905 ( 0.00%)  3,924,053 ( 0.01%) 11,022 ( 0.00%)  			InsertFile(strFile);
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           			iLast = i+1;
    0            0                   0               0               5,600 ( 0.00%)     50 ( 0.00%)  		}
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	if (size() == 0) {
    .            .                   .               .                   .               .           		_EXCEPTION1("No input files found in \"%s\"",
    .            .                   .               .                   .               .           			strFiles.c_str());
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           	_ASSERT(size() == m_vecFilenames.size());
    .            .                   .               .                   .               .           }
-- line 145 ----------------------------------------
-- line 146 ----------------------------------------
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           ///////////////////////////////////////////////////////////////////////////////
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           size_t NcFileVector::FindContainingVariable(
    .            .                   .               .                   .               .           	const std::string & strVariable,
    .            .                   .               .                   .               .           	NcVar ** pvar
    .            .                   .               .                   .               .           ) const {
    .            .                   .               .                   .               .           	for (size_t s = 0; s < m_vecNcFile.size(); s++) {
    0            0             195,908 ( 0.00%)  5,848 ( 0.00%)    195,908 ( 0.00%)  5,848 ( 0.00%)  		NcVar * var = m_vecNcFile[s]->get_var(strVariable.c_str());
    .            .                   .               .                   .               .           		if (var != NULL) {
    .            .                   .               .                   .               .           			if (pvar != NULL) {
    .            .                   .               .                   .               .           				*pvar = var;
    .            .                   .               .                   .               .           			}
    .            .                   .               .                   .               .           			return s;
    .            .                   .               .                   .               .           		}
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           	if (pvar != NULL) {
-- line 162 ----------------------------------------
-- line 165 ----------------------------------------
    .            .                   .               .                   .               .           	return InvalidIndex;
    .            .                   .               .                   .               .           }
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           ///////////////////////////////////////////////////////////////////////////////
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           std::string NcFileVector::GetConcatenatedFilenames() const {
    .            .                   .               .                   .               .           	std::string strConcatFilenames;
    .            .                   .               .                   .               .           	for (size_t s = 0; s < m_vecFilenames.size(); s++) {
    0            0             327,488 ( 0.00%)  2,924 ( 0.00%)          0               0           		strConcatFilenames += m_vecFilenames[s];
    .            .                   .               .                   .               .           		if (s != m_vecFilenames.size()-1) {
    .            .                   .               .                   .               .           			strConcatFilenames += ";";
    .            .                   .               .                   .               .           		}
    .            .                   .               .                   .               .           	}
    .            .                   .               .                   .               .           	return strConcatFilenames;
    .            .                   .               .                   .               .           }
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           ///////////////////////////////////////////////////////////////////////////////
-- line 181 ----------------------------------------
-- line 183 ----------------------------------------
    .            .                   .               .                   .               .           long NcFileVector::GetTimeIx(size_t pos) const {
    .            .                   .               .                   .               .           	_ASSERT(pos < m_vecTimeIxs.size());
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	if (m_vecTimeIxs[pos] != InvalidTimeIndex) {
    .            .                   .               .                   .               .           		if (m_vecTimeIxs[pos] == NoTimeIndex) {
    .            .                   .               .                   .               .           			return NoTimeIndex;
    .            .                   .               .                   .               .           		}
    .            .                   .               .                   .               .           
    0            0              64,328 ( 0.00%)  5,848 ( 0.00%)     64,328 ( 0.00%)  5,848 ( 0.00%)  		NcDim * dimTime = NcGetTimeDimension(*m_vecNcFile[pos]);
    .            .                   .               .                   .               .           		if (dimTime == NULL) {
    .            .                   .               .                   .               .           			_EXCEPTIONT("Logic error: Dimension \"time\" missing in file");
    .            .                   .               .                   .               .           		}
    0            0             280,704 ( 0.00%) 23,392 ( 0.01%)  7,017,600 ( 0.02%) 46,784 ( 0.01%)  		if ((m_vecTimeIxs[pos] < 0) || (m_vecTimeIxs[pos] >= dimTime->size())) {
    .            .                   .               .                   .               .           			_EXCEPTIONT("Logic error: Time index out of range");
    .            .                   .               .                   .               .           		}
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           		return m_vecTimeIxs[pos];
    .            .                   .               .                   .               .           
    .            .                   .               .                   .               .           	} else {
    .            .                   .               .                   .               .           		_ASSERT(m_vecNcFile.size() == m_vecFilenames.size());
    .            .                   .               .                   .               .           		_ASSERT(m_vecNcFile.size() == m_vecFileType.size());
-- line 203 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/basic_string.h
--------------------------------------------------------------------------------
curB       curBk      totB         totBk      totFdB     totFdBk    

-- line 3631 ----------------------------------------
.          .            .          .          .          .               }
.          .            .          .          .          .           
.          .            .          .          .          .           #if __cplusplus >= 201103L
.          .            .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
.          .            .          .          .          .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
.          .            .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
.          .            .          .          .          .               operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
.          .            .          .          .          .           	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
0          0          155 ( 0.00%) 5 ( 0.00%) 0          0               { return std::move(__lhs.append(__rhs)); }
.          .            .          .          .          .           
.          .            .          .          .          .             template<typename _CharT, typename _Traits, typename _Alloc>
.          .            .          .          .          .               _GLIBCXX20_CONSTEXPR
.          .            .          .          .          .               inline basic_string<_CharT, _Traits, _Alloc>
.          .            .          .          .          .               operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
.          .            .          .          .          .           	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
.          .            .          .          .          .               { return std::move(__rhs.insert(0, __lhs)); }
.          .            .          .          .          .           
-- line 3647 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/DataOp.cpp
--------------------------------------------------------------------------------
curB       curBk      totB           totBk       totFdB         totFdBk     

-- line 29 ----------------------------------------
.          .              .           .              .           .           #include <queue>
.          .              .           .              .           .           
.          .              .           .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .              .           .              .           .           // DataOpManager
.          .              .           .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .              .           .              .           .           
.          .              .           .              .           .           DataOpManager::~DataOpManager() {
.          .              .           .              .           .           	for (iterator iter = begin(); iter != end(); iter++) {
0          0              0           0            640 ( 0.00%) 16 ( 0.00%)  		delete iter->second;
.          .              .           .              .           .           	}
0          0              0           0          1,152 ( 0.00%) 16 ( 0.00%)  }
.          .              .           .              .           .           
.          .              .           .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .              .           .              .           .           
.          .              .           .              .           .           DataOp * DataOpManager::Add(DataOp * pdo) {
.          .              .           .              .           .           	if (pdo == NULL) {
.          .              .           .              .           .           		_EXCEPTIONT("Invalid pointer");
.          .              .           .              .           .           	}
.          .              .           .              .           .           
.          .              .           .              .           .           	iterator iter = find(pdo->GetName());
.          .              .           .              .           .           	if (iter != end()) {
.          .              .           .              .           .           		_EXCEPTION1("DataOp with given name \"%s\" already exists",
.          .              .           .              .           .           			pdo->GetName().c_str());
.          .              .           .              .           .           	}
.          .              .           .              .           .           
0          0          1,152 ( 0.00%) 16 ( 0.00%)     0           0           	insert(DataOpMapPair(pdo->GetName(), pdo));
.          .              .           .              .           .           
.          .              .           .              .           .           	return pdo;
.          .              .           .              .           .           }
.          .              .           .              .           .           
.          .              .           .              .           .           ///////////////////////////////////////////////////////////////////////////////
.          .              .           .              .           .           
.          .              .           .              .           .           DataOp * DataOpManager::Add(
.          .              .           .              .           .           	const std::string & strName
.          .              .           .              .           .           ) {
.          .              .           .              .           .           	if (strName == "_VECMAG") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_VECMAG);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_ABS") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_ABS);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_SIGN") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_SIGN);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_ALLPOS") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_ALLPOS);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_SUM") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_SUM);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_AVG") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_AVG);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_DIFF") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_DIFF);
.          .              .           .              .           .           		
.          .              .           .              .           .           	} else if (strName == "_PROD") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_PROD);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_DIV") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_DIV);
.          .              .           .              .           .           		
.          .              .           .              .           .           	} else if (strName == "_MIN") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_MIN);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_MAX") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_MAX);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_COND") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_COND);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_EQUALS") {
.          .              .           .              .           .           		return Add(new DataOp_EQUALS);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_SQRT") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_SQRT);
.          .              .           .              .           .           	
.          .              .           .              .           .           	} else if (strName == "_POW") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_POW);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_LAT") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_LAT);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_LON") {
.          .              .           .              .           .           		return Add(new DataOp_LON);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_AREA") {
.          .              .           .              .           .           		return Add(new DataOp_AREA);
.          .              .           .              .           .           
.          .              .           .              .           .           	} else if (strName == "_F") {
0          0            112 ( 0.00%)  2 ( 0.00%)     0           0           		return Add(new DataOp_F);
.          .              .           .              .           .           
.          .              .           .              .           .           	// Laplacian operator
.          .              .           .              .           .           	} else if (strName.substr(0,10) == "_LAPLACIAN") {
.          .              .           .              .           .           		int nPoints = 0;
.          .              .           .              .           .           		double dDist = 0.0;
.          .              .           .              .           .           
.          .              .           .              .           .           		int iMode = 0;
.          .              .           .              .           .           		int iLast = 0;
-- line 127 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_map.h
--------------------------------------------------------------------------------
curB       curBk      totB               totBk           totFdB           totFdBk        

-- line 306 ----------------------------------------
.          .                  .               .                .              .           	{ _M_t._M_insert_range_unique(__first, __last); }
.          .                  .               .                .              .           
.          .                  .               .                .              .           #if __cplusplus >= 201103L
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  The dtor only erases the elements, and note that if the elements
.          .                  .               .                .              .                  *  themselves are pointers, the pointed-to memory is not touched in any
.          .                  .               .                .              .                  *  way.  Managing the pointer is the user's responsibility.
.          .                  .               .                .              .                  */
0          0                  0               0          318,168 ( 0.00%) 5,677 ( 0.00%)        ~map() = default;
.          .                  .               .                .              .           #endif
.          .                  .               .                .              .           
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  @brief  %Map assignment operator.
.          .                  .               .                .              .                  *
.          .                  .               .                .              .                  *  Whether the allocator is copied depends on the allocator traits.
.          .                  .               .                .              .                  */
.          .                  .               .                .              .           #if __cplusplus < 201103L
-- line 322 ----------------------------------------
-- line 835 ----------------------------------------
.          .                  .               .                .              .                 insert(const value_type& __x)
.          .                  .               .                .              .                 { return _M_t._M_insert_unique(__x); }
.          .                  .               .                .              .           
.          .                  .               .                .              .           #if __cplusplus >= 201103L
.          .                  .               .                .              .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
.          .                  .               .                .              .                 // 2354. Unnecessary copying when inserting into maps with braced-init
.          .                  .               .                .              .                 std::pair<iterator, bool>
.          .                  .               .                .              .                 insert(value_type&& __x)
0          0              1,152 ( 0.00%)     16 ( 0.00%)       0              0                 { return _M_t._M_insert_unique(std::move(__x)); }
.          .                  .               .                .              .           
.          .                  .               .                .              .                 template<typename _Pair>
.          .                  .               .                .              .           	__enable_if_t<is_constructible<value_type, _Pair>::value,
.          .                  .               .                .              .           		      pair<iterator, bool>>
.          .                  .               .                .              .           	insert(_Pair&& __x)
.          .                  .               .                .              .           	{
.          .                  .               .                .              .           #if __cplusplus >= 201703L
.          .                  .               .                .              .           	  using _P2 = remove_reference_t<_Pair>;
-- line 851 ----------------------------------------
-- line 858 ----------------------------------------
.          .                  .               .                .              .           		  if (__i == end() || key_comp()(__k, (*__i).first))
.          .                  .               .                .              .           		    {
.          .                  .               .                .              .           		      __i = emplace_hint(__i, std::forward<_Pair>(__x));
.          .                  .               .                .              .           		      return {__i, true};
.          .                  .               .                .              .           		    }
.          .                  .               .                .              .           		  return {__i, false};
.          .                  .               .                .              .           		}
.          .                  .               .                .              .           #endif
0          0          1,133,832 ( 0.00%) 20,247 ( 0.01%)       0              0           	  return _M_t._M_emplace_unique(std::forward<_Pair>(__x));
.          .                  .               .                .              .           	}
.          .                  .               .                .              .           #endif
.          .                  .               .                .              .                 /// @}
.          .                  .               .                .              .           
.          .                  .               .                .              .           #if __cplusplus >= 201103L
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  @brief Attempts to insert a list of std::pairs into the %map.
.          .                  .               .                .              .                  *  @param  __list  A std::initializer_list<value_type> of pairs to be
-- line 874 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/blobs/BlobUtilities.h
--------------------------------------------------------------------------------
curB           curBk        totB             totBk          totFdB           totFdBk        

-- line 96 ----------------------------------------
    .            .                .              .                .              .           	_ASSERT(pdim1 != NULL);
    .            .                .              .                .              .           	_ASSERT(pvarTag != NULL);
    .            .                .              .                .              .           
    .            .                .              .                .              .           	NcDim * dim0 = NULL;
    .            .                .              .                .              .           	NcDim * dim1 = NULL;
    .            .                .              .                .              .           	NcVar * varTag = NULL;
    .            .                .              .                .              .           
    .            .                .              .                .              .           	// Copy latitude and longitude arrays
3,960 ( 3.35%) 192 (15.30%) 706,488 ( 0.00%) 1,992 ( 0.00%) 186,408 ( 0.00%) 1,752 ( 0.00%)  	CopyNcVarIfExists(ncInput, ncOutput, strLatitudeName, true);
2,952 ( 2.50%) 144 (11.47%) 840,984 ( 0.00%) 1,752 ( 0.00%) 321,768 ( 0.00%) 1,440 ( 0.00%)  	CopyNcVarIfExists(ncInput, ncOutput, strLongitudeName, true);
    .            .                .              .                .              .           
    .            .                .              .                .              .           	// Allocate tag variable (unstructured grids)
    .            .                .              .                .              .           	if (grid.m_nGridDim.size() == 1) {
    .            .                .              .                .              .           		dim0 = ncOutput.get_dim("ncol");
    .            .                .              .                .              .           		if (dim0 == NULL) {
    .            .                .              .                .              .           			dim0 = ncOutput.add_dim("ncol", grid.GetSize());
    .            .                .              .                .              .           		}
    .            .                .              .                .              .           		if (dim0 == NULL) {
-- line 113 ----------------------------------------
-- line 135 ----------------------------------------
    .            .                .              .                .              .           				nctype,
    .            .                .              .                .              .           				dim0);
    .            .                .              .                .              .           		}
    .            .                .              .                .              .           
    .            .                .              .                .              .           	// Allocate tag variable (latitude-longitude grids)
    .            .                .              .                .              .           	} else if (grid.m_nGridDim.size() == 2) {
    .            .                .              .                .              .           
    .            .                .              .                .              .           		// Get output dimensions
    0            0            1,008 ( 0.00%)    48 ( 0.00%)   1,008 ( 0.00%)    48 ( 0.00%)  		NcVar * varLat = ncOutput.get_var(strLatitudeName.c_str());
    .            .                .              .                .              .           		if ((varLat != NULL) && (varLat->num_dims() == 2)) {
    .            .                .              .                .              .           			dim0 = varLat->get_dim(0);
    .            .                .              .                .              .           			dim1 = varLat->get_dim(1);
    .            .                .              .                .              .           
    .            .                .              .                .              .           		} else {
    0            0            1,008 ( 0.00%)    48 ( 0.00%)   1,008 ( 0.00%)    48 ( 0.00%)  			dim0 = ncOutput.get_dim(strLatitudeName.c_str());
    .            .                .              .                .              .           			if (dim0 == NULL) {
    .            .                .              .                .              .           				_EXCEPTION1("Unable to copy variable \"%s\" to output file",
    .            .                .              .                .              .           					strLatitudeName.c_str());
    .            .                .              .                .              .           			}
    0            0            1,128 ( 0.00%)    48 ( 0.00%)   1,128 ( 0.00%)    48 ( 0.00%)  			dim1 = ncOutput.get_dim(strLongitudeName.c_str());
    .            .                .              .                .              .           			if (dim1 == NULL) {
    .            .                .              .                .              .           				_EXCEPTION1("Unable to copy variable \"%s\" to output file",
    .            .                .              .                .              .           					strLongitudeName.c_str());
    .            .                .              .                .              .           			}
    .            .                .              .                .              .           		}
    .            .                .              .                .              .           
    .            .                .              .                .              .           		// Create output tag
    .            .                .              .                .              .           		if (dimTime != NULL) {
    0            0          541,464 ( 0.00%)   552 ( 0.00%)   1,128 ( 0.00%)    48 ( 0.00%)  			varTag = ncOutput.add_var(
    .            .                .              .                .              .           				strTagVar.c_str(),
    .            .                .              .                .              .           				nctype,
    .            .                .              .                .              .           				dimTime,
    .            .                .              .                .              .           				dim0,
    .            .                .              .                .              .           				dim1);
    .            .                .              .                .              .           
    .            .                .              .                .              .           		} else {
    .            .                .              .                .              .           			varTag = ncOutput.add_var(
-- line 171 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/netcdf-cxx-4.2/ncvalues.cpp
--------------------------------------------------------------------------------
curB           curBk        totB           totBk        totFdB          totFdBk      

-- line 30 ----------------------------------------
    .            .              .            .               .            .           	return the_number;
    .            .              .            .               .            .           }
    .            .              .            .               .            .           
    .            .              .            .               .            .           std::ostream& operator<< (std::ostream& os, const NcValues& vals) {
    .            .              .            .               .            .           	return vals.print(os);
    .            .              .            .               .            .           }
    .            .              .            .               .            .           
    .            .              .            .               .            .           implement(NcValues,ncbyte)
    0            0          3,375 ( 0.00%) 269 ( 0.00%) 15,358 ( 0.00%) 807 ( 0.00%)  implement(NcValues,char)
    .            .              .            .               .            .           implement(NcValues,short)
    .            .              .            .               .            .           implement(NcValues,int)
    .            .              .            .               .            .           implement(NcValues,nclong)
    .            .              .            .               .            .           implement(NcValues,long)
    .            .              .            .               .            .           implement(NcValues,float)
    .            .              .            .               .            .           implement(NcValues,double)
    .            .              .            .               .            .           implement(NcValues,ncint64)
    .            .              .            .               .            .           implement(NcValues,ncuint64)
-- line 46 ----------------------------------------
-- line 346 ----------------------------------------
    .            .              .            .               .            .           inline char* NcValues_ncbyte::as_string( long n ) const {
    .            .              .            .               .            .           	char* s = new char[the_number + 1];
    .            .              .            .               .            .           	s[the_number] = '\0';
    .            .              .            .               .            .           	strncpy(s, (const char*)the_values + n, (int)the_number);
    .            .              .            .               .            .           	return s;
    .            .              .            .               .            .           }
    .            .              .            .               .            .           
    .            .              .            .               .            .           inline char* NcValues_char::as_string( long n ) const {
2,132 ( 1.80%) 101 ( 8.05%) 2,132 ( 0.00%) 101 ( 0.00%)      0            0           	char* s = new char[the_number + 1];
    .            .              .            .               .            .           	s[the_number] = '\0';
    .            .              .            .               .            .           	strncpy(s, (const char*)the_values + n, (int)the_number);
    .            .              .            .               .            .           	return s;
    .            .              .            .               .            .           }
    .            .              .            .               .            .           
    .            .              .            .               .            .           inline char* NcValues_ncstring::as_string( long n ) const {
    .            .              .            .               .            .           	char* s = new char[the_number + 1];
    .            .              .            .               .            .           	s[the_number] = '\0';
-- line 362 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
curB       curBk      totB                totBk              totFdB              totFdBk            

-- line 324 ----------------------------------------
.          .                   .                  .                   .                  .                 _Vector_base(size_t __n)
.          .                   .                  .                   .                  .                 : _M_impl()
.          .                   .                  .                   .                  .                 { _M_create_storage(__n); }
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 _Vector_base(size_t __n, const allocator_type& __a)
.          .                   .                  .                   .                  .                 : _M_impl(__a)
0          0           1,296,692 ( 0.00%)     5,872 ( 0.00%)          0                  0                 { _M_create_storage(__n); }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           #if __cplusplus >= 201103L
.          .                   .                  .                   .                  .                 _Vector_base(_Vector_base&&) = default;
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 // Kept for ABI compatibility.
.          .                   .                  .                   .                  .           # if !_GLIBCXX_INLINE_VERSION
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
-- line 340 ----------------------------------------
-- line 358 ----------------------------------------
.          .                   .                  .                   .                  .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
.          .                   .                  .                   .                  .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
.          .                   .                  .                   .                  .                 { }
.          .                   .                  .                   .                  .           #endif
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 ~_Vector_base() _GLIBCXX_NOEXCEPT
.          .                   .                  .                   .                  .                 {
0          0                   0                  0          46,415,376 ( 0.15%) 1,059,174 ( 0.27%)  	_M_deallocate(_M_impl._M_start,
.          .                   .                  .                   .                  .           		      _M_impl._M_end_of_storage - _M_impl._M_start);
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .               public:
.          .                   .                  .                   .                  .                 _Vector_impl _M_impl;
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 pointer
-- line 374 ----------------------------------------
-- line 387 ----------------------------------------
.          .                   .                  .                   .                  .           	  _Tr::deallocate(_M_impl, __p, __n);
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .               protected:
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 void
.          .                   .                  .                   .                  .                 _M_create_storage(size_t __n)
.          .                   .                  .                   .                  .                 {
0          0           1,296,692 ( 0.00%)     5,872 ( 0.00%)          0                  0           	this->_M_impl._M_start = this->_M_allocate(__n);
.          .                   .                  .                   .                  .           	this->_M_impl._M_finish = this->_M_impl._M_start;
.          .                   .                  .                   .                  .           	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .               };
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .             /**
.          .                   .                  .                   .                  .              *  @brief A standard container which offers fixed time access to
.          .                   .                  .                   .                  .              *  individual elements in any order.
-- line 403 ----------------------------------------
-- line 592 ----------------------------------------
.          .                   .                  .                   .                  .                  *  (i.e. capacity() == size() in the new %vector).
.          .                   .                  .                   .                  .                  *
.          .                   .                  .                   .                  .                  *  The newly-created %vector uses a copy of the allocator object used
.          .                   .                  .                   .                  .                  *  by @a __x (unless the allocator traits dictate a different object).
.          .                   .                  .                   .                  .                  */
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 vector(const vector& __x)
.          .                   .                  .                   .                  .                 : _Base(__x.size(),
0          0           1,296,692 ( 0.00%)     5,872 ( 0.00%)          0                  0           	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
.          .                   .                  .                   .                  .                 {
.          .                   .                  .                   .                  .           	this->_M_impl._M_finish =
.          .                   .                  .                   .                  .           	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
.          .                   .                  .                   .                  .           				      this->_M_impl._M_start,
.          .                   .                  .                   .                  .           				      _M_get_Tp_allocator());
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           #if __cplusplus >= 201103L
-- line 608 ----------------------------------------
-- line 727 ----------------------------------------
.          .                   .                  .                   .                  .                  *  responsibility.
.          .                   .                  .                   .                  .                  */
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 ~vector() _GLIBCXX_NOEXCEPT
.          .                   .                  .                   .                  .                 {
.          .                   .                  .                   .                  .           	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
.          .                   .                  .                   .                  .           		      _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
0          0                   0                  0          46,415,376 ( 0.15%) 1,059,174 ( 0.27%)        }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 /**
.          .                   .                  .                   .                  .                  *  @brief  %Vector assignment operator.
.          .                   .                  .                   .                  .                  *  @param  __x  A %vector of identical element and allocator types.
.          .                   .                  .                   .                  .                  *
.          .                   .                  .                   .                  .                  *  All the elements of @a __x are copied, but any unused capacity in
.          .                   .                  .                   .                  .                  *  @a __x will not be copied.
.          .                   .                  .                   .                  .                  *
-- line 743 ----------------------------------------
-- line 1005 ----------------------------------------
.          .                   .                  .                   .                  .                  *  %vector's current size the %vector is truncated, otherwise
.          .                   .                  .                   .                  .                  *  default constructed elements are appended.
.          .                   .                  .                   .                  .                  */
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 void
.          .                   .                  .                   .                  .                 resize(size_type __new_size)
.          .                   .                  .                   .                  .                 {
.          .                   .                  .                   .                  .           	if (__new_size > size())
0          0          27,778,652 ( 0.09%)    15,024 ( 0.00%)  1,132,656 ( 0.00%)     9,068 ( 0.00%)  	  _M_default_append(__new_size - size());
.          .                   .                  .                   .                  .           	else if (__new_size < size())
0          0                   0                  0               5,600 ( 0.00%)        50 ( 0.00%)  	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 /**
.          .                   .                  .                   .                  .                  *  @brief  Resizes the %vector to the specified number of elements.
.          .                   .                  .                   .                  .                  *  @param  __new_size  Number of elements the %vector should contain.
.          .                   .                  .                   .                  .                  *  @param  __x  Data with which new elements should be populated.
.          .                   .                  .                   .                  .                  *
.          .                   .                  .                   .                  .                  *  This function will %resize the %vector to the specified
-- line 1023 ----------------------------------------
-- line 1026 ----------------------------------------
.          .                   .                  .                   .                  .                  *  the %vector is extended and new elements are populated with
.          .                   .                  .                   .                  .                  *  given data.
.          .                   .                  .                   .                  .                  */
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 void
.          .                   .                  .                   .                  .                 resize(size_type __new_size, const value_type& __x)
.          .                   .                  .                   .                  .                 {
.          .                   .                  .                   .                  .           	if (__new_size > size())
0          0           2,546,016 ( 0.01%)    17,840 ( 0.00%)  1,132,656 ( 0.00%)     9,068 ( 0.00%)  	  _M_fill_insert(end(), __new_size - size(), __x);
.          .                   .                  .                   .                  .           	else if (__new_size < size())
.          .                   .                  .                   .                  .           	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           #else
.          .                   .                  .                   .                  .                 /**
.          .                   .                  .                   .                  .                  *  @brief  Resizes the %vector to the specified number of elements.
.          .                   .                  .                   .                  .                  *  @param  __new_size  Number of elements the %vector should contain.
.          .                   .                  .                   .                  .                  *  @param  __x  Data with which new elements should be populated.
-- line 1042 ----------------------------------------
-- line 1281 ----------------------------------------
.          .                   .                  .                   .                  .           	  {
.          .                   .                  .                   .                  .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
.          .                   .                  .                   .                  .           	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
.          .                   .                  .                   .                  .           				     __x);
.          .                   .                  .                   .                  .           	    ++this->_M_impl._M_finish;
.          .                   .                  .                   .                  .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
.          .                   .                  .                   .                  .           	  }
.          .                   .                  .                   .                  .           	else
0          0             541,880 ( 0.00%)       819 ( 0.00%)    265,128 ( 0.00%)       528 ( 0.00%)  	  _M_realloc_insert(end(), __x);
.          .                   .                  .                   .                  .                 }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           #if __cplusplus >= 201103L
.          .                   .                  .                   .                  .                 _GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .                 void
.          .                   .                  .                   .                  .                 push_back(value_type&& __x)
0          0          29,140,552 ( 0.09%) 3,114,839 ( 0.79%) 12,491,888 ( 0.04%) 2,076,497 ( 0.52%)        { emplace_back(std::move(__x)); }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .                 template<typename... _Args>
.          .                   .                  .                   .                  .           #if __cplusplus > 201402L
.          .                   .                  .                   .                  .           	_GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .           	reference
.          .                   .                  .                   .                  .           #else
.          .                   .                  .                   .                  .           	void
.          .                   .                  .                   .                  .           #endif
-- line 1304 ----------------------------------------
-- line 1608 ----------------------------------------
.          .                   .                  .                   .                  .                  *  obtain @a n bytes of memory, and then copies [first,last) into it.
.          .                   .                  .                   .                  .                  */
.          .                   .                  .                   .                  .                 template<typename _ForwardIterator>
.          .                   .                  .                   .                  .           	_GLIBCXX20_CONSTEXPR
.          .                   .                  .                   .                  .           	pointer
.          .                   .                  .                   .                  .           	_M_allocate_and_copy(size_type __n,
.          .                   .                  .                   .                  .           			     _ForwardIterator __first, _ForwardIterator __last)
.          .                   .                  .                   .                  .           	{
0          0             140,928 ( 0.00%)         3 ( 0.00%)          0                  0           	  pointer __result = this->_M_allocate(__n);
.          .                   .                  .                   .                  .           	  __try
.          .                   .                  .                   .                  .           	    {
0          0           1,296,692 ( 0.00%)     5,872 ( 0.00%)          0                  0           	      std::__uninitialized_copy_a(__first, __last, __result,
.          .                   .                  .                   .                  .           					  _M_get_Tp_allocator());
.          .                   .                  .                   .                  .           	      return __result;
.          .                   .                  .                   .                  .           	    }
.          .                   .                  .                   .                  .           	  __catch(...)
.          .                   .                  .                   .                  .           	    {
.          .                   .                  .                   .                  .           	      _M_deallocate(__result, __n);
.          .                   .                  .                   .                  .           	      __throw_exception_again;
.          .                   .                  .                   .                  .           	    }
-- line 1627 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/FilenameList.h
--------------------------------------------------------------------------------
curB       curBk      totB             totBk       totFdB           totFdBk     

-- line 20 ----------------------------------------
.          .                .           .                .           .           #include "Exception.h"
.          .                .           .                .           .           
.          .                .           .                .           .           #include <string>
.          .                .           .                .           .           #include <fstream>
.          .                .           .                .           .           #include <vector>
.          .                .           .                .           .           
.          .                .           .                .           .           ///////////////////////////////////////////////////////////////////////////////
.          .                .           .                .           .           
0          0                0           0            7,712 ( 0.00%) 50 ( 0.00%)  class FilenameList : public std::vector<std::string> {
.          .                .           .                .           .           
.          .                .           .                .           .           public:
.          .                .           .                .           .           	///	<summary>
.          .                .           .                .           .           	///		Parse the filename list from a file containing a list of filenames.
.          .                .           .                .           .           	///	</summary>
.          .                .           .                .           .           	void FromFile(
.          .                .           .                .           .           		const std::string & strFileListFile,
.          .                .           .                .           .           		bool fAllowMultipleFilesPerLine = true
.          .                .           .                .           .           	) {
0          0           26,229 ( 0.00%) 16 ( 0.00%)   8,357 ( 0.00%)  4 ( 0.00%)  		std::ifstream ifFileList(strFileListFile.c_str());
.          .                .           .                .           .           		if (!ifFileList.is_open()) {
.          .                .           .                .           .           			_EXCEPTION1("Unable to open file \"%s\"",
.          .                .           .                .           .           				strFileListFile.c_str());
.          .                .           .                .           .           		}
.          .                .           .                .           .           		std::string strFileLine;
0          0            3,092 ( 0.00%) 32 ( 0.00%)      48 ( 0.00%)  1 ( 0.00%)  		while (std::getline(ifFileList, strFileLine)) {
.          .                .           .                .           .           			if (strFileLine.length() == 0) {
.          .                .           .                .           .           				continue;
.          .                .           .                .           .           			}
.          .                .           .                .           .           			if (strFileLine[0] == '#') {
.          .                .           .                .           .           				continue;
.          .                .           .                .           .           			}
.          .                .           .                .           .           			if (!fAllowMultipleFilesPerLine) {
.          .                .           .                .           .           				if (strFileLine.find(';') != std::string::npos) {
.          .                .           .                .           .           					_EXCEPTION1("Only one filename allowed per line in \"%s\"",
.          .                .           .                .           .           						strFileListFile.c_str());
.          .                .           .                .           .           				}
.          .                .           .                .           .           			}
0          0            9,696 ( 0.00%) 60 ( 0.00%)   1,984 ( 0.00%) 10 ( 0.00%)  			push_back(strFileLine);
.          .                .           .                .           .           		}
.          .                .           .                .           .           		if (size() == 0) {
.          .                .           .                .           .           			_EXCEPTION1("No filenames found in \"%s\"",
.          .                .           .                .           .           				strFileListFile.c_str());
.          .                .           .                .           .           
.          .                .           .                .           .           		}
0          0          131,136 ( 0.00%)  4 ( 0.00%) 148,780 ( 0.00%) 10 ( 0.00%)  	}
.          .                .           .                .           .           };
.          .                .           .                .           .           
.          .                .           .                .           .           ///////////////////////////////////////////////////////////////////////////////
.          .                .           .                .           .           
.          .                .           .                .           .           #endif
.          .                .           .                .           .           

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_tree.h
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk                totFdB                  totFdBk              

-- line 523 ----------------------------------------
.          .                       .                    .                       .                    .                 struct _Alloc_node
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	_Alloc_node(_Rb_tree& __t)
.          .                       .                    .                       .                    .           	: _M_t(__t) { }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           	template<typename _Arg>
.          .                       .                    .                       .                    .           	  _Link_type
.          .                       .                    .                       .                    .           	  operator()(_GLIBCXX_FWDREF(_Arg) __arg) const
0          0          15,730,097,136 (49.65%) 393,233,033 (99.11%)              0                    0           	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 private:
.          .                       .                    .                       .                    .           	_Rb_tree& _M_t;
.          .                       .                    .                       .                    .                 };
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .               public:
.          .                       .                    .                       .                    .                 typedef _Key 				key_type;
.          .                       .                    .                       .                    .                 typedef _Val 				value_type;
-- line 539 ----------------------------------------
-- line 605 ----------------------------------------
.          .                       .                    .                       .                    .           	      __throw_exception_again;
.          .                       .                    .                       .                    .           	    }
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 template<typename... _Args>
.          .                       .                    .                       .                    .           	_Link_type
.          .                       .                    .                       .                    .           	_M_create_node(_Args&&... __args)
.          .                       .                    .                       .                    .           	{
0          0          15,733,257,384 (49.66%) 393,289,466 (99.12%)              0                    0           	  _Link_type __tmp = _M_get_node();
.          .                       .                    .                       .                    .           	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
.          .                       .                    .                       .                    .           	  return __tmp;
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
.          .                       .                    .                       .                    .                 {
-- line 621 ----------------------------------------
-- line 626 ----------------------------------------
.          .                       .                    .                       .                    .           	__p->~_Rb_tree_node<_Val>();
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	_M_destroy_node(__p);
0          0                       0                    0          15,733,257,384 (49.66%) 393,289,466 (99.12%)  	_M_put_node(__p);
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 template<bool _MoveValue, typename _NodeGen>
.          .                       .                    .                       .                    .           	_Link_type
.          .                       .                    .                       .                    .           	_M_clone_node(_Link_type __x, _NodeGen& __node_gen)
.          .                       .                    .                       .                    .           	{
.          .                       .                    .                       .                    .           #if __cplusplus >= 201103L
.          .                       .                    .                       .                    .           	  using _Vp = __conditional_t<_MoveValue,
.          .                       .                    .                       .                    .           				      value_type&&,
.          .                       .                    .                       .                    .           				      const value_type&>;
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .           	  _Link_type __tmp
0          0           4,549,066,080 (14.36%) 113,726,652 (28.66%)              0                    0           	    = __node_gen(_GLIBCXX_FORWARD(_Vp, *__x->_M_valptr()));
.          .                       .                    .                       .                    .           	  __tmp->_M_color = __x->_M_color;
.          .                       .                    .                       .                    .           	  __tmp->_M_left = 0;
.          .                       .                    .                       .                    .           	  __tmp->_M_right = 0;
.          .                       .                    .                       .                    .           	  return __tmp;
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .               protected:
.          .                       .                    .                       .                    .           #if _GLIBCXX_INLINE_VERSION
-- line 655 ----------------------------------------
-- line 884 ----------------------------------------
.          .                       .                    .                       .                    .           	_Link_type
.          .                       .                    .                       .                    .           	_M_copy(_Link_type, _Base_ptr, _NodeGen&);
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 template<bool _MoveValues, typename _NodeGen>
.          .                       .                    .                       .                    .           	_Link_type
.          .                       .                    .                       .                    .           	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
.          .                       .                    .                       .                    .           	{
.          .                       .                    .                       .                    .           	  _Link_type __root =
0          0           1,120,771,600 ( 3.54%)  28,019,290 ( 7.06%)              0                    0           	    _M_copy<_MoveValues>(__x._M_mbegin(), _M_end(), __gen);
.          .                       .                    .                       .                    .           	  _M_leftmost() = _S_minimum(__root);
.          .                       .                    .                       .                    .           	  _M_rightmost() = _S_maximum(__root);
.          .                       .                    .                       .                    .           	  _M_impl._M_node_count = __x._M_impl._M_node_count;
.          .                       .                    .                       .                    .           	  return __root;
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 _Link_type
.          .                       .                    .                       .                    .                 _M_copy(const _Rb_tree& __x)
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	_Alloc_node __an(*this);
0          0             564,293,000 ( 1.78%)  14,107,325 ( 3.56%)              0                    0           	return _M_copy<__as_lvalue>(__x, __an);
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 _M_erase(_Link_type __x);
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 iterator
.          .                       .                    .                       .                    .                 _M_lower_bound(_Link_type __x, _Base_ptr __y,
.          .                       .                    .                       .                    .           		     const _Key& __k);
-- line 911 ----------------------------------------
-- line 933 ----------------------------------------
.          .                       .                    .                       .                    .                 _Rb_tree(const _Compare& __comp,
.          .                       .                    .                       .                    .           	       const allocator_type& __a = allocator_type())
.          .                       .                    .                       .                    .                 : _M_impl(__comp, _Node_allocator(__a)) { }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 _Rb_tree(const _Rb_tree& __x)
.          .                       .                    .                       .                    .                 : _M_impl(__x._M_impl)
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	if (__x._M_root() != 0)
0          0             220,041,920 ( 0.69%)   5,501,048 ( 1.39%)              0                    0           	  _M_root() = _M_copy(__x);
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           #if __cplusplus >= 201103L
.          .                       .                    .                       .                    .                 _Rb_tree(const allocator_type& __a)
.          .                       .                    .                       .                    .                 : _M_impl(_Node_allocator(__a))
.          .                       .                    .                       .                    .                 { }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
-- line 949 ----------------------------------------
-- line 978 ----------------------------------------
.          .                       .                    .                       .                    .           	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
.          .                       .                    .                       .                    .           		 std::declval<typename _Alloc_traits::is_always_equal>())) )
.          .                       .                    .                       .                    .                 : _Rb_tree(std::move(__x), std::move(__a),
.          .                       .                    .                       .                    .           		 typename _Alloc_traits::is_always_equal{})
.          .                       .                    .                       .                    .                 { }
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 ~_Rb_tree() _GLIBCXX_NOEXCEPT
0          0                       0                    0           3,050,838,320 ( 9.63%)  76,253,009 (19.22%)        { _M_erase(_M_begin()); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 _Rb_tree&
.          .                       .                    .                       .                    .                 operator=(const _Rb_tree& __x);
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 // Accessors.
.          .                       .                    .                       .                    .                 _Compare
.          .                       .                    .                       .                    .                 key_comp() const
.          .                       .                    .                       .                    .                 { return _M_impl._M_key_compare; }
-- line 994 ----------------------------------------
-- line 1190 ----------------------------------------
.          .                       .                    .                       .                    .                 // DR 130. Associative erase should return an iterator.
.          .                       .                    .                       .                    .                 _GLIBCXX_ABI_TAG_CXX11
.          .                       .                    .                       .                    .                 iterator
.          .                       .                    .                       .                    .                 erase(const_iterator __position)
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	__glibcxx_assert(__position != end());
.          .                       .                    .                       .                    .           	const_iterator __result = __position;
.          .                       .                    .                       .                    .           	++__result;
0          0                       0                    0           8,902,894,272 (28.10%) 222,564,689 (56.09%)  	_M_erase_aux(__position);
.          .                       .                    .                       .                    .           	return __result._M_const_cast();
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 // LWG 2059.
.          .                       .                    .                       .                    .                 _GLIBCXX_ABI_TAG_CXX11
.          .                       .                    .                       .                    .                 iterator
.          .                       .                    .                       .                    .                 erase(iterator __position)
.          .                       .                    .                       .                    .                 {
-- line 1206 ----------------------------------------
-- line 1247 ----------------------------------------
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 erase(const_iterator __first, const_iterator __last)
.          .                       .                    .                       .                    .                 { _M_erase_aux(__first, __last); }
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 clear() _GLIBCXX_NOEXCEPT
.          .                       .                    .                       .                    .                 {
0          0                       0                    0           1,028,159,640 ( 3.24%)  25,703,991 ( 6.48%)  	_M_erase(_M_begin());
.          .                       .                    .                       .                    .           	_M_impl._M_reset();
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 // Set operations.
.          .                       .                    .                       .                    .                 iterator
.          .                       .                    .                       .                    .                 find(const key_type& __k);
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 const_iterator
-- line 1263 ----------------------------------------
-- line 1629 ----------------------------------------
.          .                       .                    .                       .                    .               private:
.          .                       .                    .                       .                    .           #if __cplusplus >= 201103L
.          .                       .                    .                       .                    .                 // An RAII _Node handle
.          .                       .                    .                       .                    .                 struct _Auto_node
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	template<typename... _Args>
.          .                       .                    .                       .                    .           	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
.          .                       .                    .                       .                    .           	  : _M_t(__t),
0          0               3,160,248 ( 0.01%)      56,433 ( 0.01%)              0                    0           	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
.          .                       .                    .                       .                    .           	  { }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           	~_Auto_node()
.          .                       .                    .                       .                    .           	{
.          .                       .                    .                       .                    .           	  if (_M_node)
.          .                       .                    .                       .                    .           	    _M_t._M_drop_node(_M_node);
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           
-- line 1645 ----------------------------------------
-- line 1823 ----------------------------------------
.          .                       .                    .                       .                    .           		 const _Val& __v,
.          .                       .                    .                       .                    .           #endif
.          .                       .                    .                       .                    .           		 _NodeGen& __node_gen)
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	bool __insert_left = (__x != 0 || __p == _M_end()
.          .                       .                    .                       .                    .           			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
.          .                       .                    .                       .                    .           							_S_key(__p)));
.          .                       .                    .                       .                    .           
0          0          11,181,031,056 (35.29%) 279,506,381 (70.45%)              0                    0           	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
.          .                       .                    .                       .                    .           				      this->_M_impl._M_header);
.          .                       .                    .                       .                    .           	++_M_impl._M_node_count;
.          .                       .                    .                       .                    .           	return iterator(__z);
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
-- line 1839 ----------------------------------------
-- line 1888 ----------------------------------------
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KoV,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               template<bool _MoveValues, typename _NodeGen>
.          .                       .                    .                       .                    .                 typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
.          .                       .                    .                       .                    .                 _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
.          .                       .                    .                       .                    .                 _M_copy(_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           	// Structural copy. __x and __p must be non-null.
0          0           2,276,076,200 ( 7.18%)  56,901,905 (14.34%)              0                    0           	_Link_type __top = _M_clone_node<_MoveValues>(__x, __node_gen);
.          .                       .                    .                       .                    .           	__top->_M_parent = __p;
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           	__try
.          .                       .                    .                       .                    .           	  {
.          .                       .                    .                       .                    .           	    if (__x->_M_right)
.          .                       .                    .                       .                    .           	      __top->_M_right =
0          0          11,657,453,360 (36.79%) 291,436,334 (73.45%)              0                    0           		_M_copy<_MoveValues>(_S_right(__x), __top, __node_gen);
.          .                       .                    .                       .                    .           	    __p = __top;
.          .                       .                    .                       .                    .           	    __x = _S_left(__x);
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           	    while (__x != 0)
.          .                       .                    .                       .                    .           	      {
0          0           2,272,989,880 ( 7.17%)  56,824,747 (14.32%)              0                    0           		_Link_type __y = _M_clone_node<_MoveValues>(__x, __node_gen);
.          .                       .                    .                       .                    .           		__p->_M_left = __y;
.          .                       .                    .                       .                    .           		__y->_M_parent = __p;
.          .                       .                    .                       .                    .           		if (__x->_M_right)
0          0           9,111,569,840 (28.76%) 227,789,246 (57.41%)              0                    0           		  __y->_M_right = _M_copy<_MoveValues>(_S_right(__x),
.          .                       .                    .                       .                    .           						       __y, __node_gen);
.          .                       .                    .                       .                    .           		__p = __y;
.          .                       .                    .                       .                    .           		__x = _S_left(__x);
.          .                       .                    .                       .                    .           	      }
.          .                       .                    .                       .                    .           	  }
.          .                       .                    .                       .                    .           	__catch(...)
.          .                       .                    .                       .                    .           	  {
.          .                       .                    .                       .                    .           	    _M_erase(__top);
-- line 1921 ----------------------------------------
-- line 1928 ----------------------------------------
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               void
.          .                       .                    .                       .                    .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
.          .                       .                    .                       .                    .               _M_erase(_Link_type __x)
.          .                       .                    .                       .                    .               {
.          .                       .                    .                       .                    .                 // Erase without rebalancing.
.          .                       .                    .                       .                    .                 while (__x != 0)
.          .                       .                    .                       .                    .           	{
0          0                       0                    0          37,340,714,704 (117.9%) 933,346,212 (235.2%)  	  _M_erase(_S_right(__x));
.          .                       .                    .                       .                    .           	  _Link_type __y = _S_left(__x);
0          0                       0                    0           6,830,363,112 (21.56%) 170,724,777 (43.03%)  	  _M_drop_node(__x);
.          .                       .                    .                       .                    .           	  __x = __y;
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .               }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               typename _Rb_tree<_Key, _Val, _KeyOfValue,
.          .                       .                    .                       .                    .           		      _Compare, _Alloc>::iterator
-- line 1946 ----------------------------------------
-- line 2168 ----------------------------------------
.          .                       .                    .                       .                    .               {
.          .                       .                    .                       .                    .                 typedef pair<iterator, bool> _Res;
.          .                       .                    .                       .                    .                 pair<_Base_ptr, _Base_ptr> __res
.          .                       .                    .                       .                    .           	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 if (__res.second)
.          .                       .                    .                       .                    .           	{
.          .                       .                    .                       .                    .           	  _Alloc_node __an(*this);
0          0          11,181,031,056 (35.29%) 279,506,381 (70.45%)              0                    0           	  return _Res(_M_insert_(__res.first, __res.second,
.          .                       .                    .                       .                    .           				 _GLIBCXX_FORWARD(_Arg, __v), __an),
.          .                       .                    .                       .                    .           		      true);
.          .                       .                    .                       .                    .           	}
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 return _Res(iterator(__res.first), false);
.          .                       .                    .                       .                    .               }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
-- line 2184 ----------------------------------------
-- line 2426 ----------------------------------------
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               template<typename... _Args>
.          .                       .                    .                       .                    .                 auto
.          .                       .                    .                       .                    .                 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
.          .                       .                    .                       .                    .                 _M_emplace_unique(_Args&&... __args)
.          .                       .                    .                       .                    .                 -> pair<iterator, bool>
.          .                       .                    .                       .                    .                 {
0          0               1,133,832 ( 0.00%)      20,247 ( 0.01%)              0                    0           	_Auto_node __z(*this, std::forward<_Args>(__args)...);
.          .                       .                    .                       .                    .           	auto __res = _M_get_insert_unique_pos(__z._M_key());
.          .                       .                    .                       .                    .           	if (__res.second)
.          .                       .                    .                       .                    .           	  return {__z._M_insert(__res), true};
.          .                       .                    .                       .                    .           	return {iterator(__res.first), false};
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               template<typename... _Args>
.          .                       .                    .                       .                    .                 auto
.          .                       .                    .                       .                    .                 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
.          .                       .                    .                       .                    .                 _M_emplace_equal(_Args&&... __args)
.          .                       .                    .                       .                    .                 -> iterator
.          .                       .                    .                       .                    .                 {
0          0               2,026,416 ( 0.01%)      36,186 ( 0.01%)              0                    0           	_Auto_node __z(*this, std::forward<_Args>(__args)...);
.          .                       .                    .                       .                    .           	auto __res = _M_get_insert_equal_pos(__z._M_key());
.          .                       .                    .                       .                    .           	return __z._M_insert(__res);
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               template<typename... _Args>
.          .                       .                    .                       .                    .                 auto
-- line 2457 ----------------------------------------
-- line 2488 ----------------------------------------
.          .                       .                    .                       .                    .               void
.          .                       .                    .                       .                    .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
.          .                       .                    .                       .                    .               _M_erase_aux(const_iterator __position)
.          .                       .                    .                       .                    .               {
.          .                       .                    .                       .                    .                 _Link_type __y =
.          .                       .                    .                       .                    .           	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
.          .                       .                    .                       .                    .           				(const_cast<_Base_ptr>(__position._M_node),
.          .                       .                    .                       .                    .           				 this->_M_impl._M_header));
0          0                       0                    0           8,902,894,272 (28.10%) 222,564,689 (56.09%)        _M_drop_node(__y);
.          .                       .                    .                       .                    .                 --_M_impl._M_node_count;
.          .                       .                    .                       .                    .               }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .             template<typename _Key, typename _Val, typename _KeyOfValue,
.          .                       .                    .                       .                    .           	   typename _Compare, typename _Alloc>
.          .                       .                    .                       .                    .               void
.          .                       .                    .                       .                    .               _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
.          .                       .                    .                       .                    .               _M_erase_aux(const_iterator __first, const_iterator __last)
-- line 2504 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/Variable.h
--------------------------------------------------------------------------------
curB       curBk      totB       totBk      totFdB             totFdBk    

-- line 500 ----------------------------------------
.          .          .          .                  .          .           ///	<summary>
.          .          .          .                  .          .           ///		A map between auxiliary indices and the data stored therein.
.          .          .          .                  .          .           ///	</summary>
.          .          .          .                  .          .           typedef std::map<VariableAuxIndex, DataArray1D<float> *> DataMap;
.          .          .          .                  .          .           
.          .          .          .                  .          .           ///	<summary>
.          .          .          .                  .          .           ///		A class for storing a 2D slice of data, and associated metadata.
.          .          .          .                  .          .           ///	</summary>
0          0          0          0          4,153,072 ( 0.01%) 2 ( 0.00%)  class Variable {
.          .          .          .                  .          .           
.          .          .          .                  .          .           friend class VariableRegistry;
.          .          .          .                  .          .           
.          .          .          .                  .          .           public:
.          .          .          .                  .          .           	///	<summary>
.          .          .          .                  .          .           	///		Default constructor.
.          .          .          .                  .          .           	///	</summary>
.          .          .          .                  .          .           	Variable() :
-- line 516 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/NcFileVector.h
--------------------------------------------------------------------------------
curB       curBk      totB       totBk      totFdB              totFdBk        

-- line 80 ----------------------------------------
.          .          .          .                   .              .           	NcFileVector() :
.          .          .          .                   .              .           		m_time(Time::CalendarUnknown)
.          .          .          .                   .              .           	{ }
.          .          .          .                   .              .           
.          .          .          .                   .              .           	///	<summary>
.          .          .          .                   .              .           	///		Destructor.
.          .          .          .                   .              .           	///	</summary>
.          .          .          .                   .              .           	~NcFileVector() {
0          0          0          0          35,704,200 ( 0.11%) 8,950 ( 0.00%)  		NcFileVector::clear();
0          0          0          0             187,000 ( 0.00%)   350 ( 0.00%)  	}
.          .          .          .                   .              .           
.          .          .          .                   .              .           	///	<summary>
.          .          .          .                   .              .           	///		Size of this NcFileVector.
.          .          .          .                   .              .           	///	</summary>
.          .          .          .                   .              .           	size_t size() const {
.          .          .          .                   .              .           		return m_vecNcFile.size();
.          .          .          .                   .              .           	}
.          .          .          .                   .              .           
-- line 97 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/NetCDFUtilities.h
--------------------------------------------------------------------------------
curB       curBk      totB       totBk      totFdB           totFdBk      

-- line 120 ----------------------------------------
.          .          .          .                .            .           			str = "[]";
.          .          .          .                .            .           		}
.          .          .          .                .            .           		return str;
.          .          .          .                .            .           	}
.          .          .          .                .            .           };
.          .          .          .                .            .           
.          .          .          .                .            .           ////////////////////////////////////////////////////////////////////////////////
.          .          .          .                .            .           
0          0          0          0          180,800 ( 0.00%) 100 ( 0.00%)  class NcTimeDimension : public std::vector<Time> {
.          .          .          .                .            .           
.          .          .          .                .            .           public:
.          .          .          .                .            .           	///	<summary>
.          .          .          .                .            .           	///		Type of time dimension.
.          .          .          .                .            .           	///	</summary>
.          .          .          .                .            .           	enum TimeDimType {
.          .          .          .                .            .           		TimeDimType_Standard,
.          .          .          .                .            .           		TimeDimType_DailyMean,
-- line 136 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_set.h
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk                totFdB                 totFdBk              

-- line 217 ----------------------------------------
.          .                       .                    .                      .                    .                  *  @brief  %Set copy constructor.
.          .                       .                    .                      .                    .                  *
.          .                       .                    .                      .                    .                  *  Whether the allocator is copied depends on the allocator traits.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .           #if __cplusplus < 201103L
.          .                       .                    .                      .                    .                 set(const set& __x)
.          .                       .                    .                      .                    .                 : _M_t(__x._M_t) { }
.          .                       .                    .                      .                    .           #else
0          0              61,119,520 ( 0.19%)   1,527,988 ( 0.39%)             0                    0                 set(const set&) = default;
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .                /**
.          .                       .                    .                      .                    .                  *  @brief %Set move constructor
.          .                       .                    .                      .                    .                  *
.          .                       .                    .                      .                    .                  *  The newly-created %set contains the exact contents of the moved
.          .                       .                    .                      .                    .                  *  instance. The moved instance is a valid, but unspecified, %set.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .                 set(set&&) = default;
-- line 233 ----------------------------------------
-- line 275 ----------------------------------------
.          .                       .                    .                      .                    .           	: _M_t(_Key_alloc_type(__a))
.          .                       .                    .                      .                    .           	{ _M_t._M_insert_range_unique(__first, __last); }
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .                 /**
.          .                       .                    .                      .                    .                  *  The dtor only erases the elements, and note that if the elements
.          .                       .                    .                      .                    .                  *  themselves are pointers, the pointed-to memory is not touched in any
.          .                       .                    .                      .                    .                  *  way. Managing the pointer is the user's responsibility.
.          .                       .                    .                      .                    .                  */
0          0                       0                    0          2,335,021,536 ( 7.37%)  58,366,933 (14.71%)        ~set() = default;
.          .                       .                    .                      .                    .           #endif
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .                 /**
.          .                       .                    .                      .                    .                  *  @brief  %Set assignment operator.
.          .                       .                    .                      .                    .                  *
.          .                       .                    .                      .                    .                  *  Whether the allocator is copied depends on the allocator traits.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .           #if __cplusplus < 201103L
-- line 291 ----------------------------------------
-- line 506 ----------------------------------------
.          .                       .                    .                      .                    .                  *  not already present in the %set.
.          .                       .                    .                      .                    .                  *
.          .                       .                    .                      .                    .                  *  Insertion requires logarithmic time.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .                 std::pair<iterator, bool>
.          .                       .                    .                      .                    .                 insert(const value_type& __x)
.          .                       .                    .                      .                    .                 {
.          .                       .                    .                      .                    .           	std::pair<typename _Rep_type::iterator, bool> __p =
0          0          11,181,029,904 (35.29%) 279,506,365 (70.45%)             0                    0           	  _M_t._M_insert_unique(__x);
.          .                       .                    .                      .                    .           	return std::pair<iterator, bool>(__p.first, __p.second);
.          .                       .                    .                      .                    .                 }
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .           #if __cplusplus >= 201103L
.          .                       .                    .                      .                    .                 std::pair<iterator, bool>
.          .                       .                    .                      .                    .                 insert(value_type&& __x)
.          .                       .                    .                      .                    .                 {
.          .                       .                    .                      .                    .           	std::pair<typename _Rep_type::iterator, bool> __p =
-- line 522 ----------------------------------------
-- line 649 ----------------------------------------
.          .                       .                    .                      .                    .                  *  from a %set.  Note that this function only erases the element, and
.          .                       .                    .                      .                    .                  *  that if the element is itself a pointer, the pointed-to memory is not
.          .                       .                    .                      .                    .                  *  touched in any way.  Managing the pointer is the user's
.          .                       .                    .                      .                    .                  *  responsibility.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .                 _GLIBCXX_ABI_TAG_CXX11
.          .                       .                    .                      .                    .                 iterator
.          .                       .                    .                      .                    .                 erase(const_iterator __position)
0          0                       0                    0          8,902,894,272 (28.10%) 222,564,689 (56.09%)        { return _M_t.erase(__position); }
.          .                       .                    .                      .                    .           #else
.          .                       .                    .                      .                    .                 /**
.          .                       .                    .                      .                    .                  *  @brief Erases an element from a %set.
.          .                       .                    .                      .                    .                  *  @param  position  An iterator pointing to the element to be erased.
.          .                       .                    .                      .                    .                  *
.          .                       .                    .                      .                    .                  *  This function erases an element, pointed to by the given iterator,
.          .                       .                    .                      .                    .                  *  from a %set.  Note that this function only erases the element, and
.          .                       .                    .                      .                    .                  *  that if the element is itself a pointer, the pointed-to memory is not
-- line 665 ----------------------------------------
-- line 728 ----------------------------------------
.          .                       .                    .                      .                    .                 /**
.          .                       .                    .                      .                    .                  *  Erases all elements in a %set.  Note that this function only erases
.          .                       .                    .                      .                    .                  *  the elements, and that if the elements themselves are pointers, the
.          .                       .                    .                      .                    .                  *  pointed-to memory is not touched in any way.  Managing the pointer is
.          .                       .                    .                      .                    .                  *  the user's responsibility.
.          .                       .                    .                      .                    .                  */
.          .                       .                    .                      .                    .                 void
.          .                       .                    .                      .                    .                 clear() _GLIBCXX_NOEXCEPT
0          0                       0                    0            659,157,040 ( 2.08%)  16,478,926 ( 4.15%)        { _M_t.clear(); }
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .                 // set operations:
.          .                       .                    .                      .                    .           
.          .                       .                    .                      .                    .                 ///@{
.          .                       .                    .                      .                    .                 /**
.          .                       .                    .                      .                    .                  *  @brief  Finds the number of elements.
.          .                       .                    .                      .                    .                  *  @param  __x  Element to located.
.          .                       .                    .                      .                    .                  *  @return  Number of elements with specified key.
-- line 744 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /global/homes/h/hyvchen/tempestextremes/src/blobs/../../src/base/DataArray1D.h
--------------------------------------------------------------------------------
curB       curBk      totB                totBk       totFdB              totFdBk     

-- line 51 ----------------------------------------
.          .                   .           .                   .           .           	) :
.          .                   .           .                   .           .           		m_fOwnsData(true),
.          .                   .           .                   .           .           		m_sSize(sSize),
.          .                   .           .                   .           .           		m_fHasFillValue(false),
.          .                   .           .                   .           .           		m_dFillValue(T()),
.          .                   .           .                   .           .           		m_data(NULL)
.          .                   .           .                   .           .           	{
.          .                   .           .                   .           .           		if (fAllocate) {
0          0          99,671,040 ( 0.31%) 24 ( 0.00%)          0           0           			Allocate(sSize);
.          .                   .           .                   .           .           		}
.          .                   .           .                   .           .           	}
.          .                   .           .                   .           .           
.          .                   .           .                   .           .           	///	<summary>
.          .                   .           .                   .           .           	///		Copy constructor.
.          .                   .           .                   .           .           	///	</summary>
.          .                   .           .                   .           .           	DataArray1D(const DataArray1D<T> & da) :
.          .                   .           .                   .           .           		m_fOwnsData(true),
-- line 67 ----------------------------------------
-- line 70 ----------------------------------------
.          .                   .           .                   .           .           	{
.          .                   .           .                   .           .           		Assign(da);
.          .                   .           .                   .           .           	}
.          .                   .           .                   .           .           
.          .                   .           .                   .           .           	///	<summary>
.          .                   .           .                   .           .           	///		Destructor.
.          .                   .           .                   .           .           	///	</summary>
.          .                   .           .                   .           .           	virtual ~DataArray1D() {
0          0                   0           0          99,695,424 ( 0.31%) 74 ( 0.00%)  		Detach();
.          .                   .           .                   .           .           	}
.          .                   .           .                   .           .           
.          .                   .           .                   .           .           	///	<summary>
.          .                   .           .                   .           .           	///		Get the size of the data, in bytes.
.          .                   .           .                   .           .           	///	</summary>
.          .                   .           .                   .           .           	virtual size_t GetByteSize() const {
.          .                   .           .                   .           .           
.          .                   .           .                   .           .           		// Verify data aligns on word boundaries
-- line 86 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_uninitialized.h
--------------------------------------------------------------------------------
curB       curBk      totB               totBk          totFdB     totFdBk    

-- line 112 ----------------------------------------
.          .                  .              .          .          .               _ForwardIterator
.          .                  .              .          .          .               __do_uninit_copy(_InputIterator __first, _InputIterator __last,
.          .                  .              .          .          .           		     _ForwardIterator __result)
.          .                  .              .          .          .               {
.          .                  .              .          .          .                 _ForwardIterator __cur = __result;
.          .                  .              .          .          .                 __try
.          .                  .              .          .          .           	{
.          .                  .              .          .          .           	  for (; __first != __last; ++__first, (void)++__cur)
0          0          1,296,692 ( 0.00%) 5,872 ( 0.00%) 0          0           	    std::_Construct(std::__addressof(*__cur), *__first);
.          .                  .              .          .          .           	  return __cur;
.          .                  .              .          .          .           	}
.          .                  .              .          .          .                 __catch(...)
.          .                  .              .          .          .           	{
.          .                  .              .          .          .           	  std::_Destroy(__result, __cur);
.          .                  .              .          .          .           	  __throw_exception_again;
.          .                  .              .          .          .           	}
.          .                  .              .          .          .               }
-- line 128 ----------------------------------------
-- line 129 ----------------------------------------
.          .                  .              .          .          .           
.          .                  .              .          .          .             template<bool _TrivialValueTypes>
.          .                  .              .          .          .               struct __uninitialized_copy
.          .                  .              .          .          .               {
.          .                  .              .          .          .                 template<typename _InputIterator, typename _ForwardIterator>
.          .                  .              .          .          .                   static _ForwardIterator
.          .                  .              .          .          .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
.          .                  .              .          .          .           		      _ForwardIterator __result)
0          0          1,296,692 ( 0.00%) 5,872 ( 0.00%) 0          0           	{ return std::__do_uninit_copy(__first, __last, __result); }
.          .                  .              .          .          .               };
.          .                  .              .          .          .           
.          .                  .              .          .          .             template<>
.          .                  .              .          .          .               struct __uninitialized_copy<true>
.          .                  .              .          .          .               {
.          .                  .              .          .          .                 template<typename _InputIterator, typename _ForwardIterator>
.          .                  .              .          .          .                   static _ForwardIterator
.          .                  .              .          .          .                   __uninit_copy(_InputIterator __first, _InputIterator __last,
-- line 145 ----------------------------------------
-- line 177 ----------------------------------------
.          .                  .              .          .          .                 typedef typename iterator_traits<_InputIterator>::reference _From;
.          .                  .              .          .          .           #else
.          .                  .              .          .          .                 using _From = decltype(*__first);
.          .                  .              .          .          .           #endif
.          .                  .              .          .          .                 const bool __assignable
.          .                  .              .          .          .           	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
.          .                  .              .          .          .           
.          .                  .              .          .          .                 return std::__uninitialized_copy<__can_memmove && __assignable>::
0          0          1,296,692 ( 0.00%) 5,872 ( 0.00%) 0          0           	__uninit_copy(__first, __last, __result);
.          .                  .              .          .          .               }
.          .                  .              .          .          .           
.          .                  .              .          .          .             /// @cond undocumented
.          .                  .              .          .          .           
.          .                  .              .          .          .             template<typename _ForwardIterator, typename _Tp>
.          .                  .              .          .          .               _GLIBCXX20_CONSTEXPR void
.          .                  .              .          .          .               __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
.          .                  .              .          .          .           		     const _Tp& __x)
-- line 193 ----------------------------------------
-- line 365 ----------------------------------------
.          .                  .              .          .          .               inline _ForwardIterator
.          .                  .              .          .          .               __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
.          .                  .              .          .          .           			   _ForwardIterator __result, allocator<_Tp>&)
.          .                  .              .          .          .               {
.          .                  .              .          .          .           #ifdef __cpp_lib_is_constant_evaluated
.          .                  .              .          .          .                 if (std::is_constant_evaluated())
.          .                  .              .          .          .           	return std::__do_uninit_copy(__first, __last, __result);
.          .                  .              .          .          .           #endif
0          0          1,296,692 ( 0.00%) 5,872 ( 0.00%) 0          0                 return std::uninitialized_copy(__first, __last, __result);
.          .                  .              .          .          .               }
.          .                  .              .          .          .           #endif
.          .                  .              .          .          .           
.          .                  .              .          .          .             template<typename _InputIterator, typename _ForwardIterator,
.          .                  .              .          .          .           	   typename _Allocator>
.          .                  .              .          .          .               _GLIBCXX20_CONSTEXPR
.          .                  .              .          .          .               inline _ForwardIterator
.          .                  .              .          .          .               __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
-- line 381 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/NetCDFUtilities.cpp
--------------------------------------------------------------------------------
curB           curBk        totB               totBk          totFdB           totFdBk        

-- line 29 ----------------------------------------
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           size_t NcGetVarFromList(
    .            .                  .              .                .              .           	NcFile & ncFile,
    .            .                  .              .                .              .           	const std::vector<std::string> & vecVarNames,
    .            .                  .              .                .              .           	NcVar ** pvar,
    .            .                  .              .                .              .           	NcDim ** pdim
    .            .                  .              .                .              .           ) {
    .            .                  .              .                .              .           	for (size_t v = 0; v < vecVarNames.size(); v++) {
    0            0                 89 ( 0.00%)     4 ( 0.00%)      89 ( 0.00%)     4 ( 0.00%)  		NcVar * var = ncFile.get_var(vecVarNames[v].c_str());
    .            .                  .              .                .              .           		if (var != NULL) {
    .            .                  .              .                .              .           			if (pvar != NULL) {
    .            .                  .              .                .              .           				(*pvar) = var;
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           			if (pdim != NULL) {
    0            0                 89 ( 0.00%)     4 ( 0.00%)      89 ( 0.00%)     4 ( 0.00%)  				NcDim * dim = ncFile.get_dim(vecVarNames[v].c_str());
    .            .                  .              .                .              .           				if (dim != NULL) {
    .            .                  .              .                .              .           					(*pdim) = dim;
    .            .                  .              .                .              .           				} else {
    .            .                  .              .                .              .           					(*pdim) = NULL;
    .            .                  .              .                .              .           				}
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           			return v;
    .            .                  .              .                .              .           		}
-- line 52 ----------------------------------------
-- line 108 ----------------------------------------
    .            .                  .              .                .              .           	return false;
    .            .                  .              .                .              .           }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           NcDim * NcGetTimeDimension(
    .            .                  .              .                .              .           	NcFile & ncFile
    .            .                  .              .                .              .           ) {
    0            0             66,528 ( 0.00%) 6,048 ( 0.00%)  66,528 ( 0.00%) 6,048 ( 0.00%)  	NcDim * dim = ncFile.get_dim("time");
    .            .                  .              .                .              .           	if (dim != NULL) {
    .            .                  .              .                .              .           		return dim;
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	dim = ncFile.get_dim("Time");
    .            .                  .              .                .              .           	if (dim != NULL) {
    .            .                  .              .                .              .           		return dim;
    .            .                  .              .                .              .           	}
-- line 124 ----------------------------------------
-- line 136 ----------------------------------------
    .            .                  .              .                .              .           	return NULL;
    .            .                  .              .                .              .           }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           NcVar * NcGetTimeVariable(
    .            .                  .              .                .              .           	NcFile & ncFile
    .            .                  .              .                .              .           ) {
    0            0              2,728 ( 0.00%)   248 ( 0.00%)   2,728 ( 0.00%)   248 ( 0.00%)  	NcVar * var = ncFile.get_var("time");
    .            .                  .              .                .              .           	if (var != NULL) {
    .            .                  .              .                .              .           		return var;
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	var = ncFile.get_var("Time");
    .            .                  .              .                .              .           	if (var != NULL) {
    .            .                  .              .                .              .           		return var;
    .            .                  .              .                .              .           	}
-- line 152 ----------------------------------------
-- line 227 ----------------------------------------
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           void CopyNcVarAttributes(
    .            .                  .              .                .              .           	NcVar * varIn,
    .            .                  .              .                .              .           	NcVar * varOut
    .            .                  .              .                .              .           ) {
    .            .                  .              .                .              .           	for (int a = 0; a < varIn->num_atts(); a++) {
6,912 ( 5.85%) 336 (26.77%)    15,624 ( 0.00%)   840 ( 0.00%)   8,712 ( 0.00%)   504 ( 0.00%)  		NcAtt * att = varIn->get_att(a);
    0            0              7,176 ( 0.00%)   336 ( 0.00%)   7,176 ( 0.00%)   336 ( 0.00%)  		long num_vals = att->num_vals();
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		// Sometimes we can have strings of length zero.  It seems that this
    .            .                  .              .                .              .           		// check isn't actually necessary to prevent segfaults, so it's
    .            .                  .              .                .              .           		// commented out for now.
    .            .                  .              .                .              .           		//_ASSERT(num_vals > 0);
    .            .                  .              .                .              .           
    0            0             42,600 ( 0.00%) 2,016 ( 0.00%)  35,880 ( 0.00%) 1,680 ( 0.00%)  		NcValues * pValues = att->values();
    .            .                  .              .                .              .           		if (pValues == NULL) {
    .            .                  .              .                .              .           			_EXCEPTION2("Invalid attribute type \"%s::%s\"",
    .            .                  .              .                .              .           				varIn->name(), att->name());
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		// Do not copy over _FillValue if input/output variable types are different
    .            .                  .              .                .              .           		if (std::string(att->name()) == "_FillValue") {
    .            .                  .              .                .              .           			if (varIn->type() != varOut->type()) {
    .            .                  .              .                .              .           				continue;
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		// Otherwise copy over attributes
    0            0              7,176 ( 0.00%)   336 ( 0.00%)   7,176 ( 0.00%)   336 ( 0.00%)  		if (att->type() == ncByte) {
    .            .                  .              .                .              .           			varOut->add_att(att->name(), num_vals,
    .            .                  .              .                .              .           				(const ncbyte*)(pValues->base()));
    .            .                  .              .                .              .           
    0            0              7,176 ( 0.00%)   336 ( 0.00%)   7,176 ( 0.00%)   336 ( 0.00%)  		} else if (att->type() == ncChar) {
    0            0             23,688 ( 0.00%) 1,176 ( 0.00%)   7,176 ( 0.00%)   336 ( 0.00%)  			varOut->add_att(att->name(), num_vals,
    .            .                  .              .                .              .           				(const char*)(pValues->base()));
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		} else if (att->type() == ncShort) {
    .            .                  .              .                .              .           			varOut->add_att(att->name(), num_vals,
    .            .                  .              .                .              .           				(const short*)(pValues->base()));
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		} else if (att->type() == ncInt) {
    .            .                  .              .                .              .           			varOut->add_att(att->name(), num_vals,
-- line 270 ----------------------------------------
-- line 285 ----------------------------------------
    .            .                  .              .                .              .           		} else if (att->type() == ncString) {
    .            .                  .              .                .              .           			varOut->add_att(att->name(), strlen((const char *)pValues->base()),
    .            .                  .              .                .              .           				(const char*)(pValues->base()));
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		} else {
    .            .                  .              .                .              .           			_EXCEPTIONT("Invalid attribute type");
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    0            0                  0              0            6,720 ( 0.00%)   336 ( 0.00%)  		delete pValues;
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           NcDim * AddNcDimOrUseExisting(
    .            .                  .              .                .              .           	NcFile & ncFile,
    .            .                  .              .                .              .           	const std::string & strDimName,
-- line 301 ----------------------------------------
-- line 325 ----------------------------------------
    .            .                  .              .                .              .           	bool fCopyData
    .            .                  .              .                .              .           ) {
    .            .                  .              .                .              .           	if (!ncIn.is_valid()) {
    .            .                  .              .                .              .           		_EXCEPTIONT("Invalid input file specified");
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           	if (!ncOut.is_valid()) {
    .            .                  .              .                .              .           		_EXCEPTIONT("Invalid output file specified");
    .            .                  .              .                .              .           	}
    0            0              2,136 ( 0.00%)    96 ( 0.00%)   2,136 ( 0.00%)    96 ( 0.00%)  	NcVar * var = ncIn.get_var(strVarName.c_str());
    .            .                  .              .                .              .           	if (var == NULL) {
    .            .                  .              .                .              .           		_EXCEPTION1("NetCDF file does not contain variable \"%s\"",
    .            .                  .              .                .              .           			strVarName.c_str());
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	NcVar * varOut;
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	std::vector<NcDim *> dimOut;
    0            0                384 ( 0.00%)    48 ( 0.00%)       0              0           	dimOut.resize(var->num_dims());
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	std::vector<long> counts;
    0            0                384 ( 0.00%)    48 ( 0.00%)       0              0           	counts.resize(var->num_dims());
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	long nDataSize = 1;
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	for (int d = 0; d < var->num_dims(); d++) {
    .            .                  .              .                .              .           		NcDim * dimA = var->get_dim(d);
    .            .                  .              .                .              .           
    0            0              2,136 ( 0.00%)    96 ( 0.00%)   2,136 ( 0.00%)    96 ( 0.00%)  		dimOut[d] = ncOut.get_dim(dimA->name());
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		if (dimOut[d] == NULL) {
    .            .                  .              .                .              .           			if (dimA->is_unlimited()) {
    .            .                  .              .                .              .           				dimOut[d] = ncOut.add_dim(dimA->name());
    .            .                  .              .                .              .           			} else {
    0            0             10,992 ( 0.00%)   432 ( 0.00%)   2,712 ( 0.00%)   144 ( 0.00%)  				dimOut[d] = ncOut.add_dim(dimA->name(), dimA->size());
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           			if (dimOut[d] == NULL) {
    .            .                  .              .                .              .           				_EXCEPTION2("Failed to add dimension \"%s\" (%i) to file",
    .            .                  .              .                .              .           					dimA->name(), dimA->size());
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           			if (strVarName != dimA->name()) {
-- line 366 ----------------------------------------
-- line 390 ----------------------------------------
    .            .                  .              .                .              .           			}
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		counts[d] = dimA->size();
    .            .                  .              .                .              .           		nDataSize *= counts[d];
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Check for existence of variable
    0            0              2,136 ( 0.00%)    96 ( 0.00%)   2,136 ( 0.00%)    96 ( 0.00%)  	if (ncOut.get_var(var->name()) != NULL) {
    .            .                  .              .                .              .           		_EXCEPTION1("Variable \"%s\" already exists in output file", var->name());
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// ncByte / ncChar type
    .            .                  .              .                .              .           	if ((var->type() == ncByte) || (var->type() == ncChar)) {
    .            .                  .              .                .              .           		DataArray1D<char> data(nDataSize);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		varOut =
-- line 406 ----------------------------------------
-- line 484 ----------------------------------------
    .            .                  .              .                .              .           			var->get(&(data[0]), &(counts[0]));
    .            .                  .              .                .              .           			varOut->put(&(data[0]), &(counts[0]));
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// ncDouble type
    .            .                  .              .                .              .           	if (var->type() == ncDouble) {
    .            .                  .              .                .              .           		varOut =
    0            0          1,080,576 ( 0.00%) 1,104 ( 0.00%)   2,328 ( 0.00%)   144 ( 0.00%)  			ncOut.add_var(
    .            .                  .              .                .              .           				var->name(), var->type(),
    .            .                  .              .                .              .           				dimOut.size(), (const NcDim**)&(dimOut[0]));
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		if (varOut == NULL) {
    .            .                  .              .                .              .           			_EXCEPTION1("Cannot create variable \"%s\"", var->name());
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		if (fCopyAttributes) {
6,912 ( 5.85%) 336 (26.77%)    81,912 ( 0.00%) 4,032 ( 0.00%)  63,096 ( 0.00%) 3,360 ( 0.00%)  			CopyNcVarAttributes(var, varOut);
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		if (fCopyData) {
    0            0            414,912 ( 0.00%)    48 ( 0.00%)       0              0           			DataArray1D<double> data(nDataSize);
    0            0              1,152 ( 0.00%)   192 ( 0.00%)  28,416 ( 0.00%)   192 ( 0.00%)  			var->get(&(data[0]), &(counts[0]));
    0            0              1,200 ( 0.00%)   193 ( 0.00%)  28,800 ( 0.00%)   240 ( 0.00%)  			varOut->put(&(data[0]), &(counts[0]));
    0            0                  0              0          414,912 ( 0.00%)    48 ( 0.00%)  		}
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// ncInt64 type
    .            .                  .              .                .              .           	if (var->type() == ncInt64) {
    .            .                  .              .                .              .           		varOut =
    .            .                  .              .                .              .           			ncOut.add_var(
    .            .                  .              .                .              .           				var->name(), var->type(),
    .            .                  .              .                .              .           				dimOut.size(), (const NcDim**)&(dimOut[0]));
-- line 516 ----------------------------------------
-- line 530 ----------------------------------------
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Check output variable exists
    .            .                  .              .                .              .           	if (varOut == NULL) {
    .            .                  .              .                .              .           		_EXCEPTION1("Unable to create output variable \"%s\"",
    .            .                  .              .                .              .           			var->name());
    .            .                  .              .                .              .           	}
    0            0                  0              0              768 ( 0.00%)    96 ( 0.00%)  }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           void CopyNcVarIfExists(
    .            .                  .              .                .              .           	NcFile & ncIn,
    .            .                  .              .                .              .           	NcFile & ncOut,
    .            .                  .              .                .              .           	const std::string & strVarName,
    .            .                  .              .                .              .           	bool fCopyAttributes,
    .            .                  .              .                .              .           	bool fCopyData
    .            .                  .              .                .              .           ) {
    .            .                  .              .                .              .           	// Turn off fatal errors in NetCDF
    .            .                  .              .                .              .           	NcError error(NcError::silent_nonfatal);
    .            .                  .              .                .              .           
    0            0              2,136 ( 0.00%)    96 ( 0.00%)   2,136 ( 0.00%)    96 ( 0.00%)  	NcVar * var = ncIn.get_var(strVarName.c_str());
    .            .                  .              .                .              .           	if (var != NULL) {
6,912 ( 5.85%) 336 (26.77%) 1,583,520 ( 0.00%) 5,712 ( 0.00%) 534,240 ( 0.00%) 3,936 ( 0.00%)  		CopyNcVar(ncIn, ncOut, strVarName, fCopyAttributes, fCopyData);
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           void CopyNcVarTimeSubset(
    .            .                  .              .                .              .           	NcFile & ncIn,
    .            .                  .              .                .              .           	NcFile & ncOut,
-- line 562 ----------------------------------------
-- line 668 ----------------------------------------
    .            .                  .              .                .              .           ) {
    .            .                  .              .                .              .           	_ASSERT(ncfile != NULL);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Empty existing Time vector
    .            .                  .              .                .              .           	vecTimes.clear();
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Get time dimension and  variable
    .            .                  .              .                .              .           	long lTimeCount = 0;
    0            0              1,100 ( 0.00%)   100 ( 0.00%)   1,100 ( 0.00%)   100 ( 0.00%)  	NcDim * dimTime = NcGetTimeDimension(*ncfile);
    0            0              1,100 ( 0.00%)   100 ( 0.00%)   1,100 ( 0.00%)   100 ( 0.00%)  	NcVar * varTime = NcGetTimeVariable(*ncfile);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	if (varTime == NULL) {
    .            .                  .              .                .              .           		_EXCEPTION1("Variable \"time\" not found in file \"%s\"",
    .            .                  .              .                .              .           			strFilename.c_str());
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           	if (dimTime == NULL) {
    .            .                  .              .                .              .           		if (varTime->num_dims() != 0) {
    .            .                  .              .                .              .           			_EXCEPTION1("Dimension \"time\" not found in file \"%s\"",
-- line 685 ----------------------------------------
-- line 691 ----------------------------------------
    .            .                  .              .                .              .           		if (varTime->num_dims() != 1) {
    .            .                  .              .                .              .           			_EXCEPTION1("Variable \"time\" has more than one dimension in file \"%s\"",
    .            .                  .              .                .              .           				strFilename.c_str());
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           		if (!NcIsTimeDimension(varTime->get_dim(0))) {
    .            .                  .              .                .              .           			_EXCEPTION1("Variable \"time\" does not have time dimension in file \"%s\"",
    .            .                  .              .                .              .           				strFilename.c_str());
    .            .                  .              .                .              .           		}
    0            0              4,800 ( 0.00%)   400 ( 0.00%) 120,000 ( 0.00%)   800 ( 0.00%)  		lTimeCount = dimTime->size();
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Calendar attribute
2,050 ( 1.73%) 100 ( 7.97%)     4,150 ( 0.00%)   200 ( 0.00%)   2,100 ( 0.00%)   100 ( 0.00%)  	NcAtt * attTimeCal = varTime->get_att("calendar");
    .            .                  .              .                .              .           	std::string strCalendar;
    .            .                  .              .                .              .           	if (attTimeCal == NULL) {
    .            .                  .              .                .              .           		if (fWarnOnMissingCalendar) {
    .            .                  .              .                .              .           			Announce("WARNING: Variable \"time\" is missing \"calendar\" attribute; assuming \"standard\"");
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           		strCalendar = "standard";
    .            .                  .              .                .              .           	} else {
  500 ( 0.42%)  50 ( 3.98%)     8,850 ( 0.00%)   450 ( 0.00%)   9,250 ( 0.00%)   500 ( 0.00%)  		strCalendar = attTimeCal->as_string(0);
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           	Time::CalendarType eCalendarType =
    .            .                  .              .                .              .           		Time::CalendarTypeFromString(strCalendar);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Units attribute
1,900 ( 1.61%) 100 ( 7.97%)     3,250 ( 0.00%)   200 ( 0.00%)   1,350 ( 0.00%)   100 ( 0.00%)  	NcAtt * attTimeUnits = varTime->get_att("units");
    .            .                  .              .                .              .           	if (attTimeUnits == NULL) {
    .            .                  .              .                .              .           		_EXCEPTION1("Variable \"time\" is missing \"units\" attribute in file \"%s\"",
    .            .                  .              .                .              .           			strFilename.c_str());
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Type attribute
    0            0              2,950 ( 0.00%)   200 ( 0.00%)   2,950 ( 0.00%)   200 ( 0.00%)  	NcAtt * attTimeType = varTime->get_att("type");
    .            .                  .              .                .              .           	if (attTimeType != NULL) {
    .            .                  .              .                .              .           		std::string strTimeType = attTimeType->as_string(0);
    .            .                  .              .                .              .           		if (strTimeType == "daily mean climatology") {
    .            .                  .              .                .              .           			vecTimes.m_dimtype = NcTimeDimension::TimeDimType_DailyMean;
    .            .                  .              .                .              .           		} else if (strTimeType == "monthly mean climatology") {
    .            .                  .              .                .              .           			vecTimes.m_dimtype = NcTimeDimension::TimeDimType_MonthlyMean;
    .            .                  .              .                .              .           		} else if (strTimeType == "seasonal mean climatology") {
    .            .                  .              .                .              .           			vecTimes.m_dimtype = NcTimeDimension::TimeDimType_SeasonalMean;
    .            .                  .              .                .              .           		} else if (strTimeType == "annual mean climatology") {
    .            .                  .              .                .              .           			vecTimes.m_dimtype = NcTimeDimension::TimeDimType_AnnualMean;
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Store details of time dimension
    .            .                  .              .                .              .           	vecTimes.m_nctype = varTime->type();
1,600 ( 1.35%)  50 ( 3.98%)    10,400 ( 0.00%)   500 ( 0.00%)   7,800 ( 0.00%)   500 ( 0.00%)  	vecTimes.m_units = attTimeUnits->as_string(0);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	// Load in time data
    .            .                  .              .                .              .           	DataArray1D<int> vecTimeInt;
    .            .                  .              .                .              .           	DataArray1D<float> vecTimeFloat;
    .            .                  .              .                .              .           	DataArray1D<double> vecTimeDouble;
    .            .                  .              .                .              .           	DataArray1D<ncint64> vecTimeInt64;
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	if (varTime->type() == ncInt) {
    0            0             24,384 ( 0.00%)    50 ( 0.00%)       0              0           		vecTimeInt.Allocate(lTimeCount);
    0            0              4,800 ( 0.00%)   400 ( 0.00%) 120,000 ( 0.00%)   800 ( 0.00%)  		varTime->set_cur((long)0);
    0            0              8,608 ( 0.00%)   602 ( 0.00%)  34,400 ( 0.00%)   600 ( 0.00%)  		varTime->get(&(vecTimeInt[0]), lTimeCount);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	} else if (varTime->type() == ncFloat) {
    .            .                  .              .                .              .           		vecTimeFloat.Allocate(lTimeCount);
    .            .                  .              .                .              .           		varTime->set_cur((long)0);
    .            .                  .              .                .              .           		varTime->get(&(vecTimeFloat[0]), lTimeCount);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	} else if (varTime->type() == ncDouble) {
    .            .                  .              .                .              .           		vecTimeDouble.Allocate(lTimeCount);
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
    .            .                  .              .                .              .           		_EXCEPTION1("Variable \"time\" has invalid type "
    .            .                  .              .                .              .           			"(expected \"int\", \"int64\", \"float\" or \"double\")"
    .            .                  .              .                .              .           			" in file \"%s\"", strFilename.c_str());
    .            .                  .              .                .              .           	}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           	for (int t = 0; t < lTimeCount; t++) {
    .            .                  .              .                .              .           		Time time(eCalendarType);
    .            .                  .              .                .              .           		if (varTime->type() == ncInt) {
    0            0            121,920 ( 0.00%) 6,096 ( 0.00%) 121,920 ( 0.00%) 6,096 ( 0.00%)  			time.FromCFCompliantUnitsOffsetInt(
    .            .                  .              .                .              .           				vecTimes.m_units,
    .            .                  .              .                .              .           				vecTimeInt[t]);
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		} else if (varTime->type() == ncFloat) {
    .            .                  .              .                .              .           			time.FromCFCompliantUnitsOffsetDouble(
    .            .                  .              .                .              .           				vecTimes.m_units,
    .            .                  .              .                .              .           				static_cast<double>(vecTimeFloat[t]));
    .            .                  .              .                .              .           
-- line 785 ----------------------------------------
-- line 794 ----------------------------------------
    .            .                  .              .                .              .           				(int)(vecTimeInt64[t]));
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           		}
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           #if defined(ROUND_TIMES_TO_NEAREST_MINUTE)
    .            .                  .              .                .              .           		time.RoundToNearestMinute();
    .            .                  .              .                .              .           #endif
    .            .                  .              .                .              .           
    0            0            357,000 ( 0.00%)   400 ( 0.00%) 177,800 ( 0.00%)   350 ( 0.00%)  		vecTimes.push_back(time);
    .            .                  .              .                .              .           	}
    0            0                  0              0           24,384 ( 0.00%)    50 ( 0.00%)  }
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           ////////////////////////////////////////////////////////////////////////////////
    .            .                  .              .                .              .           
    .            .                  .              .                .              .           void WriteCFTimeDataToNcFile(
    .            .                  .              .                .              .           	NcFile * ncfile,
    .            .                  .              .                .              .           	const std::string & strFilename,
    .            .                  .              .                .              .           	NcTimeDimension & vecTimes,
    .            .                  .              .                .              .           	bool fRecordDim
-- line 812 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/new_allocator.h
--------------------------------------------------------------------------------
curB       curBk      totB                    totBk                totFdB                  totFdBk              

-- line 143 ----------------------------------------
.          .                       .                    .                       .                    .           #if __cpp_aligned_new
.          .                       .                    .                       .                    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
.          .                       .                    .                       .                    .           	  {
.          .                       .                    .                       .                    .           	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
.          .                       .                    .                       .                    .           	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
.          .                       .                    .                       .                    .           							   __al));
.          .                       .                    .                       .                    .           	  }
.          .                       .                    .                       .                    .           #endif
0          0          15,794,695,088 (49.85%) 396,443,801 (99.92%)              0                    0           	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 // __p is not permitted to be a null pointer.
.          .                       .                    .                       .                    .                 void
.          .                       .                    .                       .                    .                 deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
.          .                       .                    .                       .                    .                 {
.          .                       .                    .                       .                    .           #if __cpp_sized_deallocation
.          .                       .                    .                       .                    .           # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
-- line 159 ----------------------------------------
-- line 164 ----------------------------------------
.          .                       .                    .                       .                    .           #if __cpp_aligned_new
.          .                       .                    .                       .                    .           	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
.          .                       .                    .                       .                    .           	  {
.          .                       .                    .                       .                    .           	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
.          .                       .                    .                       .                    .           				     std::align_val_t(alignof(_Tp)));
.          .                       .                    .                       .                    .           	    return;
.          .                       .                    .                       .                    .           	  }
.          .                       .                    .                       .                    .           #endif
0          0                       0                    0          15,794,695,088 (49.85%) 396,443,801 (99.92%)  	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
.          .                       .                    .                       .                    .                 }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           #undef _GLIBCXX_SIZED_DEALLOC
.          .                       .                    .                       .                    .           #undef _GLIBCXX_OPERATOR_DELETE
.          .                       .                    .                       .                    .           #undef _GLIBCXX_OPERATOR_NEW
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           #if __cplusplus <= 201703L
.          .                       .                    .                       .                    .                 __attribute__((__always_inline__))
-- line 180 ----------------------------------------
-- line 183 ----------------------------------------
.          .                       .                    .                       .                    .                 { return _M_max_size(); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .           #if __cplusplus >= 201103L
.          .                       .                    .                       .                    .                 template<typename _Up, typename... _Args>
.          .                       .                    .                       .                    .           	__attribute__((__always_inline__))
.          .                       .                    .                       .                    .           	void
.          .                       .                    .                       .                    .           	construct(_Up* __p, _Args&&... __args)
.          .                       .                    .                       .                    .           	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
0          0                  11,264 ( 0.00%)          98 ( 0.00%)              0                    0           	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
.          .                       .                    .                       .                    .           
.          .                       .                    .                       .                    .                 template<typename _Up>
.          .                       .                    .                       .                    .           	__attribute__((__always_inline__))
.          .                       .                    .                       .                    .           	void
.          .                       .                    .                       .                    .           	destroy(_Up* __p)
.          .                       .                    .                       .                    .           	noexcept(std::is_nothrow_destructible<_Up>::value)
.          .                       .                    .                       .                    .           	{ __p->~_Up(); }
.          .                       .                    .                       .                    .           #else
-- line 199 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_construct.h
--------------------------------------------------------------------------------
curB       curBk      totB               totBk            totFdB                 totFdBk             

-- line 111 ----------------------------------------
.          .                  .                .                      .                   .           #if __cplusplus >= 202002L
.          .                  .                .                      .                   .                 if (std::__is_constant_evaluated())
.          .                  .                .                      .                   .           	{
.          .                  .                .                      .                   .           	  // Allow std::_Construct to be used in constant expressions.
.          .                  .                .                      .                   .           	  std::construct_at(__p, std::forward<_Args>(__args)...);
.          .                  .                .                      .                   .           	  return;
.          .                  .                .                      .                   .           	}
.          .                  .                .                      .                   .           #endif
0          0          9,810,172 ( 0.03%) 218,709 ( 0.06%)             0                   0                 ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
.          .                  .                .                      .                   .               }
.          .                  .                .                      .                   .           #else
.          .                  .                .                      .                   .             template<typename _T1, typename _T2>
.          .                  .                .                      .                   .               inline void
.          .                  .                .                      .                   .               _Construct(_T1* __p, const _T2& __value)
.          .                  .                .                      .                   .               {
.          .                  .                .                      .                   .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
.          .                  .                .                      .                   .                 // 402. wrong new expression in [some_]allocator::construct
-- line 127 ----------------------------------------
-- line 143 ----------------------------------------
.          .                  .                .                      .                   .              */
.          .                  .                .                      .                   .             template<typename _Tp>
.          .                  .                .                      .                   .               _GLIBCXX14_CONSTEXPR inline void
.          .                  .                .                      .                   .               _Destroy(_Tp* __pointer)
.          .                  .                .                      .                   .               {
.          .                  .                .                      .                   .           #if __cplusplus > 201703L
.          .                  .                .                      .                   .                 std::destroy_at(__pointer);
.          .                  .                .                      .                   .           #else
0          0                  0                0          1,574,513,200 ( 4.97%) 39,891,544 (10.05%)        __pointer->~_Tp();
.          .                  .                .                      .                   .           #endif
.          .                  .                .                      .                   .               }
.          .                  .                .                      .                   .           
.          .                  .                .                      .                   .             template<bool>
.          .                  .                .                      .                   .               struct _Destroy_aux
.          .                  .                .                      .                   .               {
.          .                  .                .                      .                   .                 template<typename _ForwardIterator>
.          .                  .                .                      .                   .           	static _GLIBCXX20_CONSTEXPR void
.          .                  .                .                      .                   .           	__destroy(_ForwardIterator __first, _ForwardIterator __last)
.          .                  .                .                      .                   .           	{
.          .                  .                .                      .                   .           	  for (; __first != __last; ++__first)
0          0                  0                0            847,638,160 ( 2.68%) 21,719,668 ( 5.47%)  	    std::_Destroy(std::__addressof(*__first));
.          .                  .                .                      .                   .           	}
.          .                  .                .                      .                   .               };
.          .                  .                .                      .                   .           
.          .                  .                .                      .                   .             template<>
.          .                  .                .                      .                   .               struct _Destroy_aux<true>
.          .                  .                .                      .                   .               {
.          .                  .                .                      .                   .                 template<typename _ForwardIterator>
.          .                  .                .                      .                   .                   static void
-- line 171 ----------------------------------------
-- line 188 ----------------------------------------
.          .                  .                .                      .                   .                 static_assert(is_destructible<_Value_type>::value,
.          .                  .                .                      .                   .           		    "value type is destructible");
.          .                  .                .                      .                   .           #endif
.          .                  .                .                      .                   .           #if __cplusplus >= 202002L
.          .                  .                .                      .                   .                 if (std::__is_constant_evaluated())
.          .                  .                .                      .                   .           	return std::_Destroy_aux<false>::__destroy(__first, __last);
.          .                  .                .                      .                   .           #endif
.          .                  .                .                      .                   .                 std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
0          0                  0                0            362,562,480 ( 1.14%)  9,592,776 ( 2.42%)  	__destroy(__first, __last);
.          .                  .                .                      .                   .               }
.          .                  .                .                      .                   .           
.          .                  .                .                      .                   .             template<bool>
.          .                  .                .                      .                   .               struct _Destroy_n_aux
.          .                  .                .                      .                   .               {
.          .                  .                .                      .                   .                 template<typename _ForwardIterator, typename _Size>
.          .                  .                .                      .                   .           	static _GLIBCXX20_CONSTEXPR _ForwardIterator
.          .                  .                .                      .                   .           	__destroy_n(_ForwardIterator __first, _Size __count)
-- line 204 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/SimpleGrid.cpp
--------------------------------------------------------------------------------
curB       curBk      totB                totBk              totFdB              totFdBk            

-- line 39 ----------------------------------------
.          .                   .                  .                   .                  .           	"#TempestGridConnectivityFileV2.0";
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           ///////////////////////////////////////////////////////////////////////////////
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           SimpleGrid::~SimpleGrid() {
.          .                   .                  .                   .                  .           	if (m_kdtree != NULL) {
.          .                   .                  .                   .                  .           		kd_free(m_kdtree);
.          .                   .                  .                   .                  .           	}
0          0                   0                  0          66,447,376 ( 0.21%) 1,038,245 ( 0.26%)  }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           ///////////////////////////////////////////////////////////////////////////////
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           bool SimpleGrid::IsInitialized() const {
.          .                   .                  .                   .                  .           	if ((m_nGridDim.size() != 0) ||
.          .                   .                  .                   .                  .           	    m_dLon.IsAttached() ||
.          .                   .                  .                   .                  .           	    m_dLat.IsAttached() ||
.          .                   .                  .                   .                  .           	    m_dArea.IsAttached() ||
-- line 55 ----------------------------------------
-- line 65 ----------------------------------------
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           void SimpleGrid::GenerateRectilinearConnectivity(
.          .                   .                  .                   .                  .           	int nLat,
.          .                   .                  .                   .                  .           	int nLon,
.          .                   .                  .                   .                  .           	bool fRegional,
.          .                   .                  .                   .                  .           	bool fDiagonalConnectivity
.          .                   .                  .                   .                  .           ) {
.          .                   .                  .                   .                  .           	m_vecConnectivity.clear();
0          0          24,917,760 ( 0.08%)         1 ( 0.00%)          0                  0           	m_vecConnectivity.resize(nLon * nLat);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	size_t ixs = 0;
.          .                   .                  .                   .                  .           	for (int j = 0; j < nLat; j++) {
.          .                   .                  .                   .                  .           	for (int i = 0; i < nLon; i++) {
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		// Connectivity in eight directions
.          .                   .                  .                   .                  .           		if (fDiagonalConnectivity) {
.          .                   .                  .                   .                  .           			if (fRegional) {
-- line 81 ----------------------------------------
-- line 122 ----------------------------------------
.          .                   .                  .                   .                  .           					m_vecConnectivity[ixs].push_back(jnew * nLon + inew);
.          .                   .                  .                   .                  .           				}
.          .                   .                  .                   .                  .           				}
.          .                   .                  .                   .                  .           			}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		// Connectivity in the four primary directions
.          .                   .                  .                   .                  .           		} else {
.          .                   .                  .                   .                  .           			if (j != 0) {
0          0           4,147,200 ( 0.01%) 1,036,800 ( 0.26%)          0                  0           				m_vecConnectivity[ixs].push_back((j-1) * nLon + i);
.          .                   .                  .                   .                  .           			}
.          .                   .                  .                   .                  .           			if (j != nLat-1) {
0          0           8,288,640 ( 0.03%) 1,036,800 ( 0.26%)  4,141,440 ( 0.01%) 1,035,360 ( 0.26%)  				m_vecConnectivity[ixs].push_back((j+1) * nLon + i);
.          .                   .                  .                   .                  .           			}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           			if ((!fRegional) ||
.          .                   .                  .                   .                  .           			    ((i != 0) && (i != nLon-1))
.          .                   .                  .                   .                  .           			) {
0          0          16,588,800 ( 0.05%) 1,038,240 ( 0.26%)  8,294,400 ( 0.03%) 1,038,240 ( 0.26%)  				m_vecConnectivity[ixs].push_back(
.          .                   .                  .                   .                  .           					j * nLon + ((i + 1) % nLon));
0          0              46,080 ( 0.00%)     2,880 ( 0.00%)     23,040 ( 0.00%)     2,880 ( 0.00%)  				m_vecConnectivity[ixs].push_back(
.          .                   .                  .                   .                  .           					j * nLon + ((i + nLon - 1) % nLon));
.          .                   .                  .                   .                  .           			}
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		ixs++;
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           }
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
.          .                   .                  .                   .                  .           	if (strLatitudeName == "[auto]") {
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("lat");
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("latitude");
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("LAT");
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("latitude0");
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("Latitude");
.          .                   .                  .                   .                  .           		vecLatitudeNames.push_back("XLAT");
.          .                   .                  .                   .                  .           	} else {
0          0                  32 ( 0.00%)         1 ( 0.00%)          0                  0           		vecLatitudeNames.push_back(strLatitudeName);
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
0          0                  84 ( 0.00%)         4 ( 0.00%)         84 ( 0.00%)         4 ( 0.00%)  	size_t sLatIx = NcGetVarFromList(*ncFile, vecLatitudeNames, pvarLat, pdimLat);
.          .                   .                  .                   .                  .           	if (sLatIx == vecLatitudeNames.size()) {
.          .                   .                  .                   .                  .           		_EXCEPTION1("No variable %s found in input file",
.          .                   .                  .                   .                  .           			STLStringHelper::ConcatenateStringVector(vecLatitudeNames, ", ").c_str());
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	if (((*pvarLat)->num_dims() < 1) || ((*pvarLat)->num_dims() > 2)) {
.          .                   .                  .                   .                  .           		_EXCEPTION1("In NetCDF file latitude variable \"%s\" must have either one or two dimensions",
.          .                   .                  .                   .                  .           			(*pvarLat)->name());
-- line 183 ----------------------------------------
-- line 185 ----------------------------------------
.          .                   .                  .                   .                  .           	} else if ((*pvarLat)->num_dims() == 1) {
.          .                   .                  .                   .                  .           		if ((*pdimLat) == NULL) {
.          .                   .                  .                   .                  .           			_EXCEPTION1("In NetCDF file 1D latitude variable \"%s\" must have dimension with same name",
.          .                   .                  .                   .                  .           				(*pvarLat)->name());
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	strLatitudeName = vecLatitudeNames[sLatIx];
0          0                   0                  0                  32 ( 0.00%)         1 ( 0.00%)  }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           ///////////////////////////////////////////////////////////////////////////////
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           void SimpleGrid::GetLongitudeFromNcFile(
.          .                   .                  .                   .                  .           	NcFile * ncFile,
.          .                   .                  .                   .                  .           	std::string & strLongitudeName,
.          .                   .                  .                   .                  .           	NcVar ** pvarLon,
.          .                   .                  .                   .                  .           	NcDim ** pdimLon
-- line 201 ----------------------------------------
-- line 208 ----------------------------------------
.          .                   .                  .                   .                  .           	if (strLongitudeName == "[auto]") {
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("lon");
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("longitude");
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("LON");
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("longitude0");
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("Longitude");
.          .                   .                  .                   .                  .           		vecLongitudeNames.push_back("XLONG");
.          .                   .                  .                   .                  .           	} else {
0          0                  32 ( 0.00%)         1 ( 0.00%)          0                  0           		vecLongitudeNames.push_back(strLongitudeName);
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
0          0                  94 ( 0.00%)         4 ( 0.00%)         94 ( 0.00%)         4 ( 0.00%)  	size_t sLonIx = NcGetVarFromList(*ncFile, vecLongitudeNames, pvarLon, pdimLon);
.          .                   .                  .                   .                  .           	if (sLonIx == vecLongitudeNames.size()) {
.          .                   .                  .                   .                  .           		_EXCEPTION1("No variable %s found in input file",
.          .                   .                  .                   .                  .           			STLStringHelper::ConcatenateStringVector(vecLongitudeNames, ", ").c_str());
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	if (((*pvarLon)->num_dims() < 1) || ((*pvarLon)->num_dims() > 2)) {
.          .                   .                  .                   .                  .           		_EXCEPTION1("In NetCDF file longitude variable \"%s\" must have either one or two dimensions",
.          .                   .                  .                   .                  .           			(*pvarLon)->name());
-- line 227 ----------------------------------------
-- line 229 ----------------------------------------
.          .                   .                  .                   .                  .           	} else if ((*pvarLon)->num_dims() == 1) {
.          .                   .                  .                   .                  .           		if ((*pdimLon) == NULL) {
.          .                   .                  .                   .                  .           			_EXCEPTION1("In NetCDF file 1D longitude variable \"%s\" must have dimension with same name",
.          .                   .                  .                   .                  .           				(*pvarLon)->name());
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	strLongitudeName = vecLongitudeNames[sLonIx];
0          0                   0                  0                  32 ( 0.00%)         1 ( 0.00%)  }
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           ///////////////////////////////////////////////////////////////////////////////
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           void SimpleGrid::GenerateLatitudeLongitude(
.          .                   .                  .                   .                  .           	const DataArray1D<double> & vecLat,
.          .                   .                  .                   .                  .           	const DataArray1D<double> & vecLon,
.          .                   .                  .                   .                  .           	bool fRegional,
.          .                   .                  .                   .                  .           	bool fDiagonalConnectivity,
-- line 245 ----------------------------------------
-- line 254 ----------------------------------------
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	if (nLat < 2) {
.          .                   .                  .                   .                  .           		_EXCEPTIONT("At least two latitudes needed to generate grid.");
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           	if (nLon < 2) {
.          .                   .                  .                   .                  .           		_EXCEPTIONT("At least two longitudes needed to generate grid.");
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
0          0           8,305,920 ( 0.03%)         1 ( 0.00%)          0                  0           	m_dLat.Allocate(nLon * nLat);
0          0           8,305,920 ( 0.03%)         1 ( 0.00%)          0                  0           	m_dLon.Allocate(nLon * nLat);
0          0           8,305,920 ( 0.03%)         1 ( 0.00%)          0                  0           	m_dArea.Allocate(nLon * nLat);
.          .                   .                  .                   .                  .           
0          0                  16 ( 0.00%)         1 ( 0.00%)          0                  0           	m_nGridDim.resize(2);
.          .                   .                  .                   .                  .           	m_nGridDim[0] = nLat;
.          .                   .                  .                   .                  .           	m_nGridDim[1] = nLon;
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// Verify units of latitude and longitude
.          .                   .                  .                   .                  .           	bool fCalculateArea = true;
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	for (int j = 0; j < nLat; j++) {
.          .                   .                  .                   .                  .           		if (fabs(vecLat[j]) > 0.5 * M_PI + 1.0e-12) {
-- line 274 ----------------------------------------
-- line 382 ----------------------------------------
.          .                   .                  .                   .                  .           			m_dArea[ixs] = 1.0;
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		ixs++;
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// Generate connectivity
0          0          53,988,480 ( 0.17%) 3,114,721 ( 0.79%) 12,458,880 ( 0.04%) 2,076,480 ( 0.52%)  	GenerateRectilinearConnectivity(nLat, nLon, fRegional, fDiagonalConnectivity);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// Output total area
.          .                   .                  .                   .                  .           	{
.          .                   .                  .                   .                  .           		double dTotalArea = 0.0;
.          .                   .                  .                   .                  .           		for (size_t i = 0; i < m_dArea.GetRows(); i++) {
.          .                   .                  .                   .                  .           			dTotalArea += m_dArea[i];
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           		if (fVerbose) {
-- line 398 ----------------------------------------
-- line 415 ----------------------------------------
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	if (IsInitialized()) {
.          .                   .                  .                   .                  .           		_EXCEPTIONT("Attempting to call GenerateLatitudeLongitude() on previously initialized grid");
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// Load latitude and longitude variables
.          .                   .                  .                   .                  .           	NcVar * varLat;
.          .                   .                  .                   .                  .           	NcDim * dimLat;
0          0                 116 ( 0.00%)         5 ( 0.00%)        116 ( 0.00%)         5 ( 0.00%)  	GetLatitudeFromNcFile(ncFile, strLatitudeName, &varLat, &dimLat);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	NcVar * varLon;
.          .                   .                  .                   .                  .           	NcDim * dimLon;
0          0                 126 ( 0.00%)         5 ( 0.00%)        126 ( 0.00%)         5 ( 0.00%)  	GetLongitudeFromNcFile(ncFile, strLongitudeName, &varLon, &dimLon);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	if (varLat->num_dims() != varLon->num_dims()) {
.          .                   .                  .                   .                  .           		_EXCEPTION2("Latitude variable \"%s\" and longitude variable \"%s\" must have same number of dimensions",
.          .                   .                  .                   .                  .           			varLat->name(), varLon->name());
.          .                   .                  .                   .                  .           	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// RLL mesh (lat and lon are vectors)
.          .                   .                  .                   .                  .           	if (varLat->num_dims() == 1) {
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		// Load lat/lon data
.          .                   .                  .                   .                  .           		int nLat = dimLat->size();
.          .                   .                  .                   .                  .           		int nLon = dimLon->size();
.          .                   .                  .                   .                  .           
0          0               5,768 ( 0.00%)         1 ( 0.00%)          0                  0           		DataArray1D<double> vecLat(nLat);
0          0                  24 ( 0.00%)         4 ( 0.00%)        592 ( 0.00%)         4 ( 0.00%)  		varLat->get(vecLat, nLat);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		for (int j = 0; j < nLat; j++) {
.          .                   .                  .                   .                  .           			vecLat[j] *= M_PI / 180.0;
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           
0          0              11,520 ( 0.00%)         1 ( 0.00%)          0                  0           		DataArray1D<double> vecLon(nLon);
0          0                  24 ( 0.00%)         4 ( 0.00%)        592 ( 0.00%)         4 ( 0.00%)  		varLon->get(vecLon, nLon);
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		for (int i = 0; i < nLon; i++) {
.          .                   .                  .                   .                  .           			vecLon[i] *= M_PI / 180.0;
.          .                   .                  .                   .                  .           		}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		// Generate the SimpleGrid
0          0          78,906,256 ( 0.25%) 3,114,725 ( 0.79%) 12,458,880 ( 0.04%) 2,076,480 ( 0.52%)  		GenerateLatitudeLongitude(
.          .                   .                  .                   .                  .           			vecLat,
.          .                   .                  .                   .                  .           			vecLon,
.          .                   .                  .                   .                  .           			fRegional,
.          .                   .                  .                   .                  .           			fDiagonalConnectivity,
.          .                   .                  .                   .                  .           			true);                  // Verbosity enabled
0          0                   0                  0              17,288 ( 0.00%)         2 ( 0.00%)  	}
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           	// Other rectilinear projection (lat and lon are arrays)
.          .                   .                  .                   .                  .           	if (varLat->num_dims() == 2) {
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		long lY = varLat->get_dim(0)->size();
.          .                   .                  .                   .                  .           		long lX = varLat->get_dim(1)->size();
.          .                   .                  .                   .                  .           
.          .                   .                  .                   .                  .           		m_nGridDim.resize(2);
-- line 470 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_multimap.h
--------------------------------------------------------------------------------
curB       curBk      totB               totBk           totFdB           totFdBk        

-- line 295 ----------------------------------------
.          .                  .               .                .              .           	{ _M_t._M_insert_range_equal(__first, __last); }
.          .                  .               .                .              .           
.          .                  .               .                .              .           #if __cplusplus >= 201103L
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  The dtor only erases the elements, and note that if the elements
.          .                  .               .                .              .                  *  themselves are pointers, the pointed-to memory is not touched in any
.          .                  .               .                .              .                  *  way. Managing the pointer is the user's responsibility.
.          .                  .               .                .              .                  */
0          0                  0               0          427,840 ( 0.00%) 7,640 ( 0.00%)        ~multimap() = default;
.          .                  .               .                .              .           #endif
.          .                  .               .                .              .           
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  @brief  %Multimap assignment operator.
.          .                  .               .                .              .                  *
.          .                  .               .                .              .                  *  Whether the allocator is copied depends on the allocator traits.
.          .                  .               .                .              .                  */
.          .                  .               .                .              .           #if __cplusplus < 201103L
-- line 311 ----------------------------------------
-- line 550 ----------------------------------------
.          .                  .               .                .              .                 // 2354. Unnecessary copying when inserting into maps with braced-init
.          .                  .               .                .              .                 iterator
.          .                  .               .                .              .                 insert(value_type&& __x)
.          .                  .               .                .              .                 { return _M_t._M_insert_equal(std::move(__x)); }
.          .                  .               .                .              .           
.          .                  .               .                .              .                 template<typename _Pair>
.          .                  .               .                .              .           	__enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
.          .                  .               .                .              .           	insert(_Pair&& __x)
0          0          2,026,416 ( 0.01%) 36,186 ( 0.01%)       0              0           	{ return _M_t._M_emplace_equal(std::forward<_Pair>(__x)); }
.          .                  .               .                .              .           #endif
.          .                  .               .                .              .                 /// @}
.          .                  .               .                .              .           
.          .                  .               .                .              .                 /**
.          .                  .               .                .              .                  *  @brief Inserts a std::pair into the %multimap.
.          .                  .               .                .              .                  *  @param  __position  An iterator that serves as a hint as to where the
.          .                  .               .                .              .                  *                      pair should be inserted.
.          .                  .               .                .              .                  *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
-- line 566 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/blobs/StitchBlobs.cpp
--------------------------------------------------------------------------------
curB             curBk        totB                    totBk                totFdB                  totFdBk              

-- line 609 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Construct the Operator with vecAllBlobTags
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm and this->_vecAllBlobTags based on the input communicator and vecAllBlobTags
      .            .                       .                    .                       .                    .           		///		And also construct the derived MPI_Datatype for Tag and commit it.
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		TagExchangeOP(MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           					  const std::vector< std::vector<Tag> > & vecAllBlobTags){
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecAllBlobTags = vecAllBlobTags;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           			//Initialize the size for the sendTags:
      0            0                      48 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags.resize(2);
      0            0                      84 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags[0].resize(_vecAllBlobTags[0].size());
      0            0                      84 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags[1].resize(_vecAllBlobTags[_vecAllBlobTags.size()-1].size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			//Initialize the size for the recvTags:
      0            0                      48 ( 0.00%)           1 ( 0.00%)              0                    0           			recvTags.resize(2);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			//Create an MPI datatype for the Tag:
      .            .                       .                    .                       .                    .           			struct Tag sampleTag;
      .            .                       .                    .                       .                    .           			int tagFieldsCount = 3;	
      .            .                       .                    .                       .                    .           			MPI_Datatype Tag_typesig[3] = {MPI_INT,MPI_INT,MPI_INT};
      .            .                       .                    .                       .                    .           			int Tag_block_lengths[3] = {1,1,1};
      .            .                       .                    .                       .                    .           			MPI_Aint Tag_displacements[3];
      .            .                       .                    .                       .                    .           	
-- line 633 ----------------------------------------
-- line 634 ----------------------------------------
      .            .                       .                    .                       .                    .           			MPI_Aint base_address;
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag, &base_address);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.id, &Tag_displacements[0]);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.time, &Tag_displacements[1]);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.global_id, &Tag_displacements[2]);
      .            .                       .                    .                       .                    .           			Tag_displacements[0] = MPI_Aint_diff(Tag_displacements[0], base_address);
      .            .                       .                    .                       .                    .           			Tag_displacements[1] = MPI_Aint_diff(Tag_displacements[1], base_address);
      .            .                       .                    .                       .                    .           			Tag_displacements[2] = MPI_Aint_diff(Tag_displacements[2], base_address);
      0            0                      88 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)           1 ( 0.00%)  			MPI_Type_create_struct(tagFieldsCount, Tag_block_lengths, Tag_displacements, Tag_typesig, &MPI_Tag_type);
      .            .                       .                    .                       .                    .           
      0            0                     128 ( 0.00%)           3 ( 0.00%)             48 ( 0.00%)           2 ( 0.00%)  			int result = MPI_Type_commit(&MPI_Tag_type);
      .            .                       .                    .                       .                    .           			if (result != MPI_SUCCESS) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("The MPI routine MPI_Type_commit(&MPI_Tag_type) failed (code %i)", result);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~TagExchangeOP(){
      0            0                       0                    0                     152 ( 0.00%)           2 ( 0.00%)  			MPI_Type_free(&MPI_Tag_type);
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      0            0                       0                    0                 313,404 ( 0.00%)       2,929 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Return the original unexchanged vecAllBlobTags
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		std::vector< std::vector<Tag> > GetOriginalVecAllBlobTags(){
      .            .                       .                    .                       .                    .           			return _vecAllBlobTags;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
-- line 666 ----------------------------------------
-- line 1276 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	public:
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Construct the Operator with BlobsExchangeOp
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm and this->_vecAllBlobs based on the input communicator and vecAllBlobs	
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		BlobsExchangeOp(MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           						const std::vector< std::vector<IndicatorSet> > & vecAllBlobs){
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecAllBlobs = vecAllBlobs;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor for BlobsExchangeOp
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~BlobsExchangeOp(){
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      .            .                       .                    .                       .                    .           			
      0            0                       0                    0               1,042,032 ( 0.00%)       2,925 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Start the exchange process.
      .            .                       .                    .                       .                    .           		/// 	this function is non-blocking and the data values in the BlobsExchangeOp should not be modified
      .            .                       .                    .                       .                    .           		/// 	The exchange values are not guaranteed to be current when this function returns and need to be used with the EndExchange()
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		void StartExchange() {			
-- line 1304 ----------------------------------------
-- line 1571 ----------------------------------------
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm this->_vecGlobalTimes this->fileLowerBound and this->fileUpperBound based on the input.
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		GlobalTimesExchangeOp(
      .            .                       .                    .                       .                    .           			MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           			const std::vector< std::vector<Time> > & vecGlobalTimes, 
      .            .                       .                    .                       .                    .           			const int & processorResponsibalForFile_LB, 
      .            .                       .                    .                       .                    .           			const int & processorResponsibalForFile_UB
      .            .                       .                    .                       .                    .           		) {
      0            0                     576 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecGlobalTimes = vecGlobalTimes;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           			this->fileLowerBound = processorResponsibalForFile_LB;
      .            .                       .                    .                       .                    .           			this->fileUpperBound = processorResponsibalForFile_UB;
      0            0                      56 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTimes.resize(2);
      0            0                      56 ( 0.00%)           1 ( 0.00%)              0                    0           			recvTimes.resize(2);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~GlobalTimesExchangeOp(){
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      0            0                       0                    0                  82,560 ( 0.00%)          27 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Start the exchange process.
      .            .                       .                    .                       .                    .           		/// 	this function is non-blocking and the data values in the GlobalTimesExchangeOp should not be modified
      .            .                       .                    .                       .                    .           		/// 	The exchange values are not guaranteed to be current when this function returns and need to be used with the EndExchange()
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		void StartExchange() {
      .            .                       .                    .                       .                    .           			int rank, size;
-- line 1601 ----------------------------------------
-- line 2384 ----------------------------------------
      .            .                       .                    .                       .                    .           	// from input file, it will also write the result of
      .            .                       .                    .                       .                    .           	// 1979/01/01/00~1979/01/31/23 to the output file.
      .            .                       .                    .                       .                    .           	//########################### End HPC Notes (Hongyu Chen) ##################
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           int main(int argc, char** argv) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           		// Initialize MPI
105,199 (88.98%) 616 (49.08%)     24,070,370 ( 0.08%)         833 ( 0.00%)         45,714 ( 0.00%)         115 ( 0.00%)  		int result = MPI_Init(&argc, &argv);
      .            .                       .                    .                       .                    .           		if (result != MPI_SUCCESS) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("The MPI routine MPI_Init failed (code %i)", result);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	NcError error(NcError::silent_nonfatal);
      .            .                       .                    .                       .                    .           
-- line 2400 ----------------------------------------
-- line 2489 ----------------------------------------
      .            .                       .                    .                       .                    .           	// Time variable units
      .            .                       .                    .                       .                    .           	std::string strOutTimeUnits;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Verbose output
      .            .                       .                    .                       .                    .           	bool fVerbose;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Parse the command line
      .            .                       .                    .                       .                    .           	BeginCommandLine()
      0            0                      96 ( 0.00%)           2 ( 0.00%)              0                    0           		CommandLineString(strInputFile, "in", "");
      0            0                     104 ( 0.00%)           2 ( 0.00%)              8 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strInputFileList, "in_list", "");
      0            0                     120 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strConnectivity, "in_connect", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fDiagonalConnectivity, "diag_connect");
      0            0                     152 ( 0.00%)           2 ( 0.00%)             32 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strOutputFile, "out", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutputFileList, "out_list", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strVariable, "var", "binary_tag");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutputVariable, "outvar", "object_id");
      0            0                     216 ( 0.00%)           2 ( 0.00%)             64 ( 0.00%)           1 ( 0.00%)  		CommandLineInt(nMinBlobSize, "minsize", 1);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strMinTime, "mintime", "1");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fTagOnly, "tagonly");
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapPrev, "min_overlap_prev", 0.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapPrev, "max_overlap_prev", 100.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapNext, "min_overlap_next", 0.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapNext, "max_overlap_next", 100.0, "(%)")
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMergeDistDeg, "merge_dist", 0.0); 
      0            0                     459 ( 0.00%)           6 ( 0.00%)            184 ( 0.00%)           3 ( 0.00%)  		CommandLineStringD(strRestrictRegion, "restrict_region", "", "(lat0,lat1,lon0,lon1,count)");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fRegional, "regional");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMinLatDeg, "minlat", -90.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMaxLatDeg, "maxlat", 90.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMinLonDeg, "minlon", 0.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMaxLonDeg, "maxlon", 360.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fFlatten, "flatten");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strLatitudeName, "latname","lat");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strLongitudeName, "lonname","lon");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutTimeUnits,"outtimeunits","");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strThresholdCmd, "thresholdcmd", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fVerbose, "verbose");
      .            .                       .                    .                       .                    .           
      0            0                     182 ( 0.00%)           4 ( 0.00%)             91 ( 0.00%)           2 ( 0.00%)  		ParseCommandLine(argc, argv);
      0            0                   7,528 ( 0.00%)          28 ( 0.00%)          2,903 ( 0.00%)          35 ( 0.00%)  	EndCommandLine(argv)
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceBanner();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Create Variable registry
      0            0                   1,792 ( 0.00%)          32 ( 0.00%)              0                    0           	VariableRegistry varreg;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check input
      .            .                       .                    .                       .                    .           	if ((strInputFile == "") && (strInputFileList == "")) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("No input file (--in) or (--in_list) specified");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if ((strInputFile != "") && (strInputFileList != "")) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("Only one of input file (--in) or (--in_list) allowed");
      .            .                       .                    .                       .                    .           	}
-- line 2540 ----------------------------------------
-- line 2548 ----------------------------------------
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check variable
      .            .                       .                    .                       .                    .           	if (strVariable == "") {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("No variable name (--var) specified");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Register variable
      0            0                     248 ( 0.00%)           2 ( 0.00%)              0                    0           	int varix = varreg.FindOrRegister(strVariable);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check output variable
      .            .                       .                    .                       .                    .           	if (strOutputVariable.length() == 0) {
      .            .                       .                    .                       .                    .           		strOutputVariable = strVariable + "tag";
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Input file list
      .            .                       .                    .                       .                    .           	FilenameList vecInputFiles;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	if (strInputFile != "") {
      .            .                       .                    .                       .                    .           		vecInputFiles.push_back(strInputFile);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if (strInputFileList != "") {
      0            0                  85,681 ( 0.00%)          62 ( 0.00%)         79,601 ( 0.00%)          13 ( 0.00%)  		vecInputFiles.FromFile(strInputFileList, false);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	int nFiles = vecInputFiles.size();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Output file list
      .            .                       .                    .                       .                    .           	FilenameList vecOutputFiles;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	if (strOutputFile != "") {
      .            .                       .                    .                       .                    .           		vecOutputFiles.push_back(strOutputFile);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if (strOutputFileList != "") {
      0            0                  84,472 ( 0.00%)          50 ( 0.00%)         79,568 ( 0.00%)          12 ( 0.00%)  		vecOutputFiles.FromFile(strOutputFileList, false);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		if (vecOutputFiles.size() != vecInputFiles.size()) {
      .            .                       .                    .                       .                    .           			_EXCEPTION2("Mismatch in number of rows of --in_list (%lu) and --out_list (%lu)",
      .            .                       .                    .                       .                    .           				vecInputFiles.size(), vecOutputFiles.size());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Parse --mintime
-- line 2590 ----------------------------------------
-- line 2699 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// No connectivity file; check for latitude/longitude dimension
      .            .                       .                    .                       .                    .           	} else {
      .            .                       .                    .                       .                    .           		AnnounceStartBlock("No connectivity file specified");
      .            .                       .                    .                       .                    .           		Announce("Attempting to generate latitude-longitude grid from data file");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
    121 ( 0.10%)   6 ( 0.48%)        760,012 ( 0.00%)         272 ( 0.00%)         75,429 ( 0.00%)         199 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		if (vecNcFiles.size() < 1) {
      .            .                       .                    .                       .                    .           			_EXCEPTIONT("No data files specified; unable to generate grid");
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      0            0              78,923,834 ( 0.25%)   3,114,745 ( 0.79%)     12,477,562 ( 0.04%)   2,076,496 ( 0.52%)  		grid.GenerateLatitudeLongitude(
      .            .                       .                    .                       .                    .           			vecNcFiles[0],
      .            .                       .                    .                       .                    .           			strLatitudeName,
      .            .                       .                    .                       .                    .           			strLongitudeName,
      .            .                       .                    .                       .                    .           			fRegional,
      .            .                       .                    .                       .                    .           			fDiagonalConnectivity);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		_ASSERT(grid.m_nGridDim.size() == 2);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		AnnounceEndBlock("Done");
      0            0                       0                    0                 688,130 ( 0.00%)         125 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check for area
      .            .                       .                    .                       .                    .           	if (!grid.HasAreas()) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("SimpleGrid has no area information (needed for StitchBlobs)");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Get time dimension over all files
      .            .                       .                    .                       .                    .           	// strOutTimeUnits is either predetermined or set at the command line
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Concatenating times");
      .            .                       .                    .                       .                    .           	NcType nctypeTime;
      .            .                       .                    .                       .                    .           	std::vector< std::pair<int, int> > vecGlobalTimeIxToFileTimeIx;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	std::vector< std::vector<Time> > vecGlobalTimes;
      0            0                     576 ( 0.00%)           1 ( 0.00%)              0                    0           	vecGlobalTimes.resize(vecOutputFiles.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	
      .            .                       .                    .                       .                    .           	#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           		//============================= Spread files across nodes=================================
      .            .                       .                    .                       .                    .           		// Note: if vecInputFiles.size() < total processor numbers, only <vecInputFiles.size()>
      .            .                       .                    .                       .                    .           		//   number of processor will be used.
      .            .                       .                    .                       .                    .           		// Calculate how many files each processor should process
      .            .                       .                    .                       .                    .           		int processorResponsibalForFile_UB;
-- line 2747 ----------------------------------------
-- line 2809 ----------------------------------------
      .            .                       .                    .                       .                    .           		#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           			if ((f >= processorResponsibalForFile_UB) || f < processorResponsibalForFile_LB) {
      .            .                       .                    .                       .                    .           				continue;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		#endif 
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the time variable from all files
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;//also known as the local vecNcFiles when MPI is enabled.
  2,904 ( 2.46%) 144 (11.47%)     18,224,472 ( 0.06%)       6,017 ( 0.00%)      1,801,344 ( 0.01%)       4,508 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get the time variable
      0            0                     528 ( 0.00%)          48 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  		NcVar * varTime = NcGetTimeVariable(*(vecNcFiles[0]));
      .            .                       .                    .                       .                    .           		if (varTime == NULL) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("File \"%s\" does not contain \"time\" variable",
      .            .                       .                    .                       .                    .           				vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		nctypeTime = varTime->type();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get time units (if not specified on command line)
      .            .                       .                    .                       .                    .           		if (strOutTimeUnits == "") {
     38 ( 0.03%)   2 ( 0.16%)             65 ( 0.00%)           4 ( 0.00%)             27 ( 0.00%)           2 ( 0.00%)  			NcAtt * attTime = varTime->get_att("units");
      .            .                       .                    .                       .                    .           			if (attTime == NULL) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("File \"%s\" missing \"time:units\" attribute",
      .            .                       .                    .                       .                    .           					vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
     32 ( 0.03%)   1 ( 0.08%)            208 ( 0.00%)          10 ( 0.00%)            156 ( 0.00%)          10 ( 0.00%)  			strOutTimeUnits = attTime->as_string(0);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in CF-compliant time data
      .            .                       .                    .                       .                    .           		const NcTimeDimension & vecTimes = vecNcFiles.GetNcTimeDimension(0);
      .            .                       .                    .                       .                    .           		if (vecTimes.size() == 0) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("WARNING: File group does not contain any time data (%s)",
      .            .                       .                    .                       .                    .           				vecInputFiles[f].c_str());
      .            .                       .                    .                       .                    .           		}
-- line 2845 ----------------------------------------
-- line 2854 ----------------------------------------
      .            .                       .                    .                       .                    .           		if (vecOutputFiles.size() == 1) {
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecTimes.size(); t++) {
      .            .                       .                    .                       .                    .           				int iGlobalTime = vecGlobalTimes[0].size();
      .            .                       .                    .                       .                    .           				vecGlobalTimes[0].push_back(vecTimes[t]);
      .            .                       .                    .                       .                    .           				vecGlobalTimeIxToFileTimeIx.push_back( std::pair<int,int>(0,iGlobalTime) );
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		} else {
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecTimes.size(); t++) {
      0            0                 171,360 ( 0.00%)         192 ( 0.00%)         85,344 ( 0.00%)         168 ( 0.00%)  				vecGlobalTimes[f].push_back(vecTimes[t]);
      0            0                  65,528 ( 0.00%)          13 ( 0.00%)         32,760 ( 0.00%)          12 ( 0.00%)  				vecGlobalTimeIxToFileTimeIx.push_back( std::pair<int,int>(f,t) );
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0              16,515,120 ( 0.05%)       3,000 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	int nGlobalTimes = 0;
      .            .                       .                    .                       .                    .           	for (int f = 0; f < vecGlobalTimes.size(); f++) {
      .            .                       .                    .                       .                    .           		nGlobalTimes += vecGlobalTimes[f].size();
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	_ASSERT(nGlobalTimes > 0);
      .            .                       .                    .                       .                    .           	_ASSERT(nGlobalTimes == vecGlobalTimeIxToFileTimeIx.size());
      .            .                       .                    .                       .                    .           
-- line 2874 ----------------------------------------
-- line 2878 ----------------------------------------
      .            .                       .                    .                       .                    .           	// Build the set of nodes at each time contained in each blob
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Build blobs at each time level
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Building blob set at each time level");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Set of nodes at each time contained in each blob
      .            .                       .                    .                       .                    .           	std::vector< std::vector<IndicatorSet> > vecAllBlobs;//Sending and Receiving Blobs to nearby processors [Halo Var]
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobs.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Bounding boxes at each time for each blob
      .            .                       .                    .                       .                    .           	std::vector< std::vector< LatLonBox<double> > > vecAllBlobBoxesDeg;//[Halo Var]
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobBoxesDeg.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Time index across all files
      .            .                       .                    .                       .                    .           	int iTime = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Loop through all files
      .            .                       .                    .                       .                    .           	int startIndx = 0;//The starting index for looping through all files
      .            .                       .                    .                       .                    .           	#if defined(TEMPEST_MPIOMP) 
      .            .                       .                    .                       .                    .           		//If MPI is enabled, then modify the nFiles to the local file numbers
-- line 2898 ----------------------------------------
-- line 2901 ----------------------------------------
      .            .                       .                    .                       .                    .           	#endif 
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	for (int f = startIndx; f < nFiles; f++) {
      .            .                       .                    .                       .                    .           		// Clear existing data in the register
      .            .                       .                    .                       .                    .           		varreg.UnloadAllGridData();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
  2,904 ( 2.46%) 144 (11.47%)     18,220,608 ( 0.06%)       5,948 ( 0.00%)      1,801,344 ( 0.01%)       4,508 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           		
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Number of times in this input file
      0            0                     528 ( 0.00%)          48 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  		NcDim * dimTimeInput = vecNcFiles[0]->get_dim("time");
      .            .                       .                    .                       .                    .           		if (dimTimeInput == NULL) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("No dimension \"time\" in file \"%s\"",
      .            .                       .                    .                       .                    .           				vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           		}
      0            0                   2,304 ( 0.00%)         192 ( 0.00%)         57,600 ( 0.00%)         384 ( 0.00%)  		int nLocalTimes = dimTimeInput->size();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Loop through all times
      .            .                       .                    .                       .                    .           		for (int t = 0; t < nLocalTimes; t++, iTime++) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get the current patch vector
      .            .                       .                    .                       .                    .           			std::vector<IndicatorSet> & vecBlobs = vecAllBlobs[iTime];
      .            .                       .                    .                       .                    .           			
      .            .                       .                    .                       .                    .           
-- line 2928 ----------------------------------------
-- line 2939 ----------------------------------------
      .            .                       .                    .                       .                    .           			// New announcement block for timestep
      .            .                       .                    .                       .                    .           			if (vecGlobalTimes.size() == 1) {
      .            .                       .                    .                       .                    .           				_ASSERT((iTime >= 0) && (iTime < vecGlobalTimes[0].size()));
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Time %i (%s)", iTime, 
      .            .                       .                    .                       .                    .           					vecGlobalTimes[0][iTime].ToString().c_str());
      .            .                       .                    .                       .                    .           			} else {
      .            .                       .                    .                       .                    .           				_ASSERT((t >= 0) && (t < vecGlobalTimes[f].size()));//allow t = vecGlobalTimes[f].size())
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Time %i (%s)", iTime,
      0            0                  58,480 ( 0.00%)       2,924 ( 0.00%)         58,480 ( 0.00%)       2,924 ( 0.00%)  					vecGlobalTimes[f][t].ToString().c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Load the search variable data
      .            .                       .                    .                       .                    .           			Variable & var = varreg.Get(varix);
      .            .                       .                    .                       .                    .           			vecNcFiles.SetConstantTimeIx(t);
      0            0          15,181,843,788 (47.92%)     149,125 ( 0.04%) 15,179,319,384 (47.91%)     146,199 ( 0.04%)  			var.LoadGridData(varreg, vecNcFiles, grid);
      .            .                       .                    .                       .                    .           			const DataArray1D<float> & dataIndicator = var.GetData();
      .            .                       .                    .                       .                    .           /*
      .            .                       .                    .                       .                    .           			float dChecksum = 0.0;
      .            .                       .                    .                       .                    .           			for (int i = 0; i < dataState.GetRows(); i++) {
      .            .                       .                    .                       .                    .           				dChecksum += dataState[i];
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			std::cout << dChecksum << std::endl;
      .            .                       .                    .                       .                    .           */
-- line 2961 ----------------------------------------
-- line 3002 ----------------------------------------
      .            .                       .                    .                       .                    .           					setIndicators.insert(i);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Insert all detected locations into set
      .            .                       .                    .                       .                    .           			// (no bounds checking)
      .            .                       .                    .                       .                    .           			} else {
      .            .                       .                    .                       .                    .           				for (int i = 0; i < grid.GetSize(); i++) {
      .            .                       .                    .                       .                    .           					if (dataIndicator[i] != 0.0f) {
      0            0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)              0                    0           						setIndicators.insert(i);
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			Announce("Finding blobs (%i tagged points)", setIndicators.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Backup of original indicator set
      0            0               1,567,680 ( 0.00%)      39,192 ( 0.01%)              0                    0           			IndicatorSet setIndicatorsBackup = setIndicators;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Rejections due to insufficient node count
      .            .                       .                    .                       .                    .           			int nRejectedMinSize = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Rejections due to a given threshold
      .            .                       .                    .                       .                    .           			DataArray1D<int> nRejectedThreshold(vecThresholdOp.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Find all contiguous patches
      .            .                       .                    .                       .                    .           			for (; setIndicators.size() != 0;) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Next starting location
      .            .                       .                    .                       .                    .           				int ixNode = *(setIndicators.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Current patch
      .            .                       .                    .                       .                    .           				int ixBlob = vecBlobs.size();
      0            0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)       9,068 ( 0.00%)  				vecBlobs.resize(ixBlob+1);
      0            0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)       9,068 ( 0.00%)  				vecBlobBoxesDeg.resize(ixBlob+1, LatLonBox<double>(fRegional));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				if (dMergeDistDeg > 0.0) {
      .            .                       .                    .                       .                    .           					vecBlobPerimeters.resize(ixBlob+1);
      .            .                       .                    .                       .                    .           					vecBlobTrees.resize(ixBlob+1);
      .            .                       .                    .                       .                    .           					vecBlobTrees[ixBlob] = kd_create(3);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Initialize bounding box
-- line 3043 ----------------------------------------
-- line 3045 ----------------------------------------
      .            .                       .                    .                       .                    .           				boxDeg.lat[0] = RadToDeg(grid.m_dLat[ixNode]);
      .            .                       .                    .                       .                    .           				boxDeg.lat[1] = RadToDeg(grid.m_dLat[ixNode]);
      .            .                       .                    .                       .                    .           				boxDeg.lon[0] = LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode]));
      .            .                       .                    .                       .                    .           				boxDeg.lon[1] = LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode]));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				//printf("=================================== BLOB %i\n", ixBlob);
      .            .                       .                    .                       .                    .           				// Find all connecting nodes in patch
      .            .                       .                    .                       .                    .           				IndicatorSet setNeighbors;
      0            0                 809,880 ( 0.00%)      20,247 ( 0.01%)              0                    0           				setNeighbors.insert(ixNode);
      .            .                       .                    .                       .                    .           				while (setNeighbors.size() != 0) {
      .            .                       .                    .                       .                    .           					ixNode = *(setNeighbors.begin());
      0            0                       0                    0           6,626,520,960 (20.91%) 165,663,024 (41.75%)  					setNeighbors.erase(setNeighbors.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// This node is already included in the blob
      .            .                       .                    .                       .                    .           					if (vecBlobs[ixBlob].find(ixNode) != vecBlobs[ixBlob].end()) {
      .            .                       .                    .                       .                    .           						//printf("..%i already in set\n", ixNode);
      .            .                       .                    .                       .                    .           						continue;
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// This node has not been tagged
      .            .                       .                    .                       .                    .           					IndicatorSetIterator iterIndicator = setIndicators.find(ixNode);
      .            .                       .                    .                       .                    .           					if (iterIndicator == setIndicators.end()) {
      .            .                       .                    .                       .                    .           						//printf("..%i has not been tagged\n", ixNode);
      .            .                       .                    .                       .                    .           						continue;
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Remove this from the set of available indicators
      0            0                       0                    0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)  					setIndicators.erase(iterIndicator);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Insert the node into the blob
      0            0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)              0                    0           					vecBlobs[ixBlob].insert(ixNode);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Update bounding box
      .            .                       .                    .                       .                    .           					boxDeg.insert(
      .            .                       .                    .                       .                    .           						RadToDeg(grid.m_dLat[ixNode]),
      .            .                       .                    .                       .                    .           						LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode])));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Insert neighbors
      .            .                       .                    .                       .                    .           					bool fPerimeter = false;
-- line 3083 ----------------------------------------
-- line 3090 ----------------------------------------
      .            .                       .                    .                       .                    .           						//} else {
      .            .                       .                    .                       .                    .           						//	printf("\n");
      .            .                       .                    .                       .                    .           						//}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           						// Perimeter point
      .            .                       .                    .                       .                    .           						if (setIndicatorsBackup.find(ixNeighbor) == setIndicatorsBackup.end()) {
      .            .                       .                    .                       .                    .           							fPerimeter = true;
      .            .                       .                    .                       .                    .           						} else {
      0            0           6,625,711,080 (20.91%) 165,642,777 (41.75%)              0                    0           							setNeighbors.insert(ixNeighbor);
      .            .                       .                    .                       .                    .           						}
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           					if (fPerimeter && (vecBlobPerimeters.size() != 0)) {
      .            .                       .                    .                       .                    .           						vecBlobPerimeters[ixBlob].insert(ixNode);
      .            .                       .                    .                       .                    .           						double dX, dY, dZ;
      .            .                       .                    .                       .                    .           						RLLtoXYZ_Rad(
      .            .                       .                    .                       .                    .           							grid.m_dLon[ixNode],
      .            .                       .                    .                       .                    .           							grid.m_dLat[ixNode],
      .            .                       .                    .                       .                    .           							dX, dY, dZ);
      .            .                       .                    .                       .                    .           						kd_insert3(vecBlobTrees[ixBlob], dX, dY, dZ, NULL);
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// setIndicatorsBackup no longer needed
      0            0                       0                    0             352,516,360 ( 1.11%)   8,812,909 ( 2.22%)  			setIndicatorsBackup.clear();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Merge blobs
      .            .                       .                    .                       .                    .           			if (vecBlobTrees.size() != 0) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Merging blobs (from %lu blobs)", vecBlobs.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				Announce("Building merge graph");
      .            .                       .                    .                       .                    .           
-- line 3122 ----------------------------------------
-- line 3310 ----------------------------------------
      .            .                       .                    .                       .                    .           						vecBlobBoxesDeg[p].lon[1]);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			AnnounceEndBlock(NULL);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0              16,515,120 ( 0.05%)       3,000 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           	// Stitch blobs together in time using graph search
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Assign local tags to each blob");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Tags for each blob at each time slice
      .            .                       .                    .                       .                    .           	std::vector< std::vector<Tag> > vecAllBlobTags;
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobTags.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Next available patch tag
      .            .                       .                    .                       .                    .           	Tag tagNextBlob(1, 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Give blob tags to the initial set of blobs
      .            .                       .                    .                       .                    .           	std::set<Tag> setAllTags;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	for (int t = 0; t < nGlobalTimes; t++) {
      0            0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                    0           		vecAllBlobTags[t].resize(vecAllBlobs[t].size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		tagNextBlob.id = 0;
      .            .                       .                    .                       .                    .           		for (int p = 0; p < vecAllBlobTags[t].size(); p++) {
      .            .                       .                    .                       .                    .           			vecAllBlobTags[t][p] = tagNextBlob;
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           			setAllTags.insert(tagNextBlob);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			tagNextBlob.id++;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           		tagNextBlob.time++;
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	//================================Actual Parallization Starts===================================
      .            .                       .                    .                       .                    .           	//1. Exchang the vecAllBlobs; vecAllBlobTags; vecPrevBlobBoxesDeg; vecGlobalTimes
      .            .                       .                    .                       .                    .           	//==============================================================================================
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	//We still need the original unexchanged data for these two variables later
      0            0                     688 ( 0.00%)           3 ( 0.00%)              0                    0           	GlobalTimesExchangeOp MPI_exchangedGlobalTimes(MPI_REAL_COMM,vecGlobalTimes, processorResponsibalForFile_LB, processorResponsibalForFile_UB);//Declare here since it needs to be reverted later
      0            0                  70,656 ( 0.00%)          10 ( 0.00%)             64 ( 0.00%)           3 ( 0.00%)  	TagExchangeOP MPI_exchangedTags(MPI_REAL_COMM, vecAllBlobTags);
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	BlobsExchangeOp MPI_exchangedBlobs(MPI_REAL_COMM, vecAllBlobs);
      .            .                       .                    .                       .                    .           	if (nMPISize > 1 && valid_flag) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		//Exchange vecGlobalTimes (will be reverted after the connectivity graph is built)		
      .            .                       .                    .                       .                    .           		MPI_exchangedGlobalTimes.StartExchange();
      .            .                       .                    .                       .                    .           		MPI_exchangedGlobalTimes.EndExchange();
      .            .                       .                    .                       .                    .           		vecGlobalTimes = MPI_exchangedGlobalTimes.GetExchangedVecGlobalTimes();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		//Exchange vecAllBlobTags			
-- line 3372 ----------------------------------------
-- line 3433 ----------------------------------------
      .            .                       .                    .                       .                    .           					_ASSERT(iFileLocal < processorResponsibalForFile_UB);
      .            .                       .                    .                       .                    .           				#else
      .            .                       .                    .                       .                    .           					_ASSERT(iFileLocal < vecGlobalTimes.size());
      .            .                       .                    .                       .                    .           				#endif
      .            .                       .                    .                       .                    .           				
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			_ASSERT(iTimeLocal < vecGlobalTimes[iFileLocal].size());
      .            .                       .                    .                       .                    .           			Announce("Time %i (%s)", t,
      0            0                  58,460 ( 0.00%)       2,923 ( 0.00%)         58,460 ( 0.00%)       2,923 ( 0.00%)  				vecGlobalTimes[iFileLocal][iTimeLocal].ToString().c_str());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get the current blob vector
      .            .                       .                    .                       .                    .           		const std::vector<Tag> & vecPrevBlobTags = vecAllBlobTags[t-1];
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::vector<Tag> & vecBlobTags = vecAllBlobTags[t];
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		const std::vector<IndicatorSet> & vecPrevBlobs = vecAllBlobs[t-1];
-- line 3449 ----------------------------------------
-- line 3569 ----------------------------------------
      .            .                       .                    .                       .                    .           							setRestrictRegion.insert(vecBlobTags[p]);
      .            .                       .                    .                       .                    .           							break;
      .            .                       .                    .                       .                    .           						}
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Insert bidirectional edge in graph
      0            0               1,013,208 ( 0.00%)      18,093 ( 0.00%)              0                    0           				multimapTagGraph.insert(
      .            .                       .                    .                       .                    .           					std::pair<Tag, Tag>(
      .            .                       .                    .                       .                    .           						vecBlobTags[p], vecPrevBlobTags[q]));
      .            .                       .                    .                       .                    .           
      0            0               1,013,208 ( 0.00%)      18,093 ( 0.00%)              0                    0           				multimapTagGraph.insert(
      .            .                       .                    .                       .                    .           					std::pair<Tag, Tag>(
      .            .                       .                    .                       .                    .           						vecPrevBlobTags[q], vecBlobTags[p]));
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           	
-- line 3589 ----------------------------------------
-- line 3646 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		#endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::set<Tag> setTagsVisited;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::set<Tag> setTagsToVisit;
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           		setTagsToVisit.insert(*iterTag);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		Tag tagMinimum = *iterTag;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Check if this tag is already part of an explored component
      .            .                       .                    .                       .                    .           		if (mapEquivalentTags.find(*iterTag) != mapEquivalentTags.end()) {
      .            .                       .                    .                       .                    .           			continue;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
-- line 3662 ----------------------------------------
-- line 3674 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Out of tags to visit; done
      .            .                       .                    .                       .                    .           			if (setTagsToVisit.size() == 0) {
      .            .                       .                    .                       .                    .           				break;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get next tag to visit
      .            .                       .                    .                       .                    .           			Tag tagNext = *(setTagsToVisit.begin());
      0            0                       0                    0               1,840,272 ( 0.01%)      38,339 ( 0.01%)  			setTagsToVisit.erase(setTagsToVisit.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Verify we haven't visited this tag already
      .            .                       .                    .                       .                    .           			if (setTagsVisited.find(tagNext) != setTagsVisited.end()) {
      .            .                       .                    .                       .                    .           				continue;
      .            .                       .                    .                       .                    .           			}
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           			setTagsVisited.insert(tagNext);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Check minimum tag
      .            .                       .                    .                       .                    .           			if (tagNext < tagMinimum) {
      .            .                       .                    .                       .                    .           				tagMinimum = tagNext;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      0            0                 791,040 ( 0.00%)      19,776 ( 0.00%)              0                    0           			setBlobTimes.insert(tagNext.time);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			if (setRestrictRegion.find(tagNext) != setRestrictRegion.end()) {
      .            .                       .                    .                       .                    .           				setBlobTimesInRestrictRegion.insert(tagNext.time);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get edges from this node
      .            .                       .                    .                       .                    .           			std::pair<MapGraphIterator, MapGraphIterator> iterGraphEdges
      .            .                       .                    .                       .                    .           				= multimapTagGraph.equal_range(tagNext);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			MapGraphIterator iter = iterGraphEdges.first;
      .            .                       .                    .                       .                    .           			for (; iter != iterGraphEdges.second; iter++) {
      0            0               1,736,256 ( 0.01%)      36,172 ( 0.01%)              0                    0           				setTagsToVisit.insert(iter->second);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Apply filters to the blob
      .            .                       .                    .                       .                    .           		bool fAcceptBlob = true;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Filter on RestrictRegion count for this global_id
      .            .                       .                    .                       .                    .           		if (opRestrictRegion.IsActive()) {
-- line 3715 ----------------------------------------
-- line 3747 ----------------------------------------
      .            .                       .                    .                       .                    .           		} else {
      .            .                       .                    .                       .                    .           			tagMinimum.global_id = 0;
      .            .                       .                    .                       .                    .           			nTotalBlobCount--;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Refer all tags in component to minimum tag
      .            .                       .                    .                       .                    .           		std::set<Tag>::const_iterator iterTagsVisited = setTagsVisited.begin();
      .            .                       .                    .                       .                    .           		for (; iterTagsVisited != setTagsVisited.end(); iterTagsVisited++) {
      0            0               1,133,832 ( 0.00%)      20,247 ( 0.01%)              0                    0           			mapEquivalentTags.insert(
      .            .                       .                    .                       .                    .           				std::pair<Tag,Tag>(*iterTagsVisited, tagMinimum));
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0               2,517,496 ( 0.01%)      55,538 ( 0.01%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Merge blobs at each time step with equivalent tags
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Reassign blob tags");
      .            .                       .                    .                       .                    .           	for (int t = 0; t < nGlobalTimes; t++) {
      .            .                       .                    .                       .                    .           		#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           			if (nMPIRank != 0) {
-- line 3766 ----------------------------------------
-- line 3921 ----------------------------------------
      .            .                       .                    .                       .                    .           				vecAllBlobTags = MPI_TagScatter.GetUnserialVecAllTags(0);
      .            .                       .                    .                       .                    .           				vecAllBlobs = MPI_exchangedBlobs.GetOriginalVecAllBlobs();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		#endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
    121 ( 0.10%)   6 ( 0.48%)        759,244 ( 0.00%)         250 ( 0.00%)         75,108 ( 0.00%)         190 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Loop through all output files
      .            .                       .                    .                       .                    .           		_ASSERT(vecOutputFiles.size() == vecGlobalTimes.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		int iGlobalTimeIx = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		for (int f = 0; f < vecOutputFiles.size(); f++) {
-- line 3937 ----------------------------------------
-- line 3945 ----------------------------------------
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			#endif //[Commented out for auto-complete, need to uncomment later]
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			Announce("Writing file \"%s\"", vecOutputFiles[f].c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Open output file
      0            0               2,881,896 ( 0.01%)       1,658 ( 0.00%)         24,816 ( 0.00%)         360 ( 0.00%)  			NcFile ncOutput(vecOutputFiles[f].c_str(), NcFile::Replace);
      .            .                       .                    .                       .                    .           			if (!ncOutput.is_valid()) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("Unable to open output file \"%s\"",
      .            .                       .                    .                       .                    .           					vecOutputFiles[f].c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Output time dimension
      .            .                       .                    .                       .                    .           			int nLocalTimes = vecGlobalTimes[f].size();
      .            .                       .                    .                       .                    .           
      0            0                   4,344 ( 0.00%)         216 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  			NcDim * dimOutputTime = ncOutput.add_dim("time", nLocalTimes);
      .            .                       .                    .                       .                    .           			if (dimOutputTime == NULL) {
      .            .                       .                    .                       .                    .           				_EXCEPTIONT("Unable to create dimension \"time\" in output");
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			NcVar * varOutputTime =
      0            0                 539,328 ( 0.00%)         528 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  				ncOutput.add_var("time", ncDouble, dimOutputTime);
      .            .                       .                    .                       .                    .           
      0            0                  23,392 ( 0.00%)          24 ( 0.00%)              0                    0           			DataArray1D<double> dOutputTimes(nLocalTimes);
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecGlobalTimes[f].size(); t++) {
      .            .                       .                    .                       .                    .           				dOutputTimes[t] =
      0            0                  58,480 ( 0.00%)       2,924 ( 0.00%)         58,480 ( 0.00%)       2,924 ( 0.00%)  					vecGlobalTimes[f][t].GetCFCompliantUnitsOffsetDouble(strOutTimeUnits);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      0            0                   3,432 ( 0.00%)         168 ( 0.00%)          1,128 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("long_name","time");
      0            0                   3,408 ( 0.00%)         168 ( 0.00%)            648 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("units",strOutTimeUnits.c_str());
      0            0                   3,384 ( 0.00%)         168 ( 0.00%)          1,008 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("calendar",vecGlobalTimes[f][0].GetCalendarName().c_str());
      .            .                       .                    .                       .                    .           
      0            0                     576 ( 0.00%)          96 ( 0.00%)         14,400 ( 0.00%)         120 ( 0.00%)  			varOutputTime->put(&(dOutputTimes[0]), nLocalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Create output variable
      .            .                       .                    .                       .                    .           			NcDim * dimOut0 = NULL;
      .            .                       .                    .                       .                    .           			NcDim * dimOut1 = NULL;
      .            .                       .                    .                       .                    .           			NcVar * varTagOut = NULL;
      .            .                       .                    .                       .                    .           
  6,912 ( 5.85%) 336 (26.77%)      2,087,448 ( 0.01%)       4,128 ( 0.00%)        450,288 ( 0.00%)       2,592 ( 0.00%)  			PrepareBlobOutputVar(
      .            .                       .                    .                       .                    .           				*(vecNcFiles[0]),
      .            .                       .                    .                       .                    .           				ncOutput,
      .            .                       .                    .                       .                    .           				vecOutputFiles[f],
      .            .                       .                    .                       .                    .           				grid,
      .            .                       .                    .                       .                    .           				strOutputVariable,
      .            .                       .                    .                       .                    .           				strLatitudeName,
      .            .                       .                    .                       .                    .           				strLongitudeName,
      .            .                       .                    .                       .                    .           				ncInt,
-- line 3994 ----------------------------------------
-- line 4005 ----------------------------------------
      .            .                       .                    .                       .                    .           			if (dimOut0 != NULL) {
      .            .                       .                    .                       .                    .           				nDimOutSize0 = dimOut0->size();
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			if (dimOut1 != NULL) {
      .            .                       .                    .                       .                    .           				nDimOutSize1 = dimOut1->size();
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Write all time steps
      0            0              99,671,040 ( 0.31%)          24 ( 0.00%)              0                    0           			DataArray1D<int> dataBlobTag(grid.GetSize());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			for (int t = 0; t < nLocalTimes; t++) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				dataBlobTag.Zero();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				_ASSERT(iGlobalTimeIx + t < vecAllBlobTags.size());
      .            .                       .                    .                       .                    .           				_ASSERT(iGlobalTimeIx + t < vecAllBlobs.size());
      .            .                       .                    .                       .                    .           	
-- line 4021 ----------------------------------------
-- line 4046 ----------------------------------------
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Write to file
      .            .                       .                    .                       .                    .           				if (grid.DimCount() == 1) {
      .            .                       .                    .                       .                    .           					varTagOut->set_cur(t, 0);
      .            .                       .                    .                       .                    .           					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0);
      .            .                       .                    .                       .                    .           				} else {
      .            .                       .                    .                       .                    .           					varTagOut->set_cur(t, 0);
      0            0                  74,416 ( 0.00%)      11,845 ( 0.00%)      1,734,752 ( 0.01%)      11,816 ( 0.00%)  					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0, nDimOutSize1);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Update global time index
      .            .                       .                    .                       .                    .           			iGlobalTimeIx += nLocalTimes;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Close the output file
      0            0                       0                    0               5,046,480 ( 0.02%)       4,632 ( 0.00%)  			ncOutput.close();
      .            .                       .                    .                       .                    .           
      0            0                       0                    0              99,694,432 ( 0.31%)          48 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		AnnounceEndBlock("Done");
      0            0                       0                    0                 688,130 ( 0.00%)         125 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           /*
      .            .                       .                    .                       .                    .           	// Copy variable attributes from first input file
      .            .                       .                    .                       .                    .           	{
      .            .                       .                    .                       .                    .           		NcFile ncInput(vecInputFiles[0].c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		NcVar * varLat = ncInput.get_var(strLatitudeName.c_str());
      .            .                       .                    .                       .                    .           		NcVar * varLon = ncInput.get_var(strLongitudeName.c_str());
      .            .                       .                    .                       .                    .           
-- line 4075 ----------------------------------------
-- line 4128 ----------------------------------------
      .            .                       .                    .                       .                    .           		// Write to file
      .            .                       .                    .                       .                    .           		varData->set_cur(t, 0, 0);
      .            .                       .                    .                       .                    .           		varData->put(&(dataBlobTag[0][0]), 1, nLat, nLon);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           */
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceBanner();
      .            .                       .                    .                       .                    .           
      0            0                       0                    0              75,682,043 ( 0.24%)   1,062,604 ( 0.27%)  } catch(Exception & e) {
      .            .                       .                    .                       .                    .           	Announce(e.ToString().c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           	MPI_Abort(MPI_COMM_WORLD, 1);
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           }
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           	// Deinitialize MPI
      0            0              40,719,069 ( 0.13%)         440 ( 0.00%)     64,849,676 ( 0.20%)       3,759 ( 0.00%)  	MPI_Finalize();
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           }
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           ///////////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           

--------------------------------------------------------------------------------
-- Auto-annotated source: src/base/Announce.cpp
--------------------------------------------------------------------------------
curB       curBk      totB           totBk       totFdB     totFdBk    

-- line 295 ----------------------------------------
.          .              .           .          .          .           	// Cleans up the argument list
.          .              .           .          .          .           	va_end(arguments);
.          .              .           .          .          .           
.          .              .           .          .          .           	// Output with proper indentation
.          .              .           .          .          .           	int i;
.          .              .           .          .          .           	for (i = 0; i < s_nIndentationLevel; i++) {
.          .              .           .          .          .           		fprintf(g_fpAnnounceOutput, "..");
.          .              .           .          .          .           	}
0          0          7,528 ( 0.00%) 28 ( 0.00%) 0          0           	fprintf(g_fpAnnounceOutput, "%s", szBuffer);
.          .              .           .          .          .           	fprintf(g_fpAnnounceOutput, "\n");
.          .              .           .          .          .           
.          .              .           .          .          .           	fflush(g_fpAnnounceOutput);
.          .              .           .          .          .           }
.          .              .           .          .          .           
.          .              .           .          .          .           ///////////////////////////////////////////////////////////////////////////////
.          .              .           .          .          .           
.          .              .           .          .          .           void Announce(
-- line 311 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: src/netcdf-cxx-4.2/netcdf.cpp
--------------------------------------------------------------------------------
curB            curBk        totB                   totBk           totFdB                 totFdBk         

-- line 20 ----------------------------------------
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           static const int ncGlobal = NC_GLOBAL; // psuedo-variable for global attributes
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           static const int ncBad = -1;	// failure return for netCDF C interface 
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcFile::~NcFile( void )
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               (void) close();
     0            0                      0               0                  2,400 ( 0.00%)     50 ( 0.00%)  }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcFile::is_valid( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return the_id != ncBad;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           int NcFile::num_dims( void ) const
     .            .                      .               .                      .               .           {
-- line 36 ----------------------------------------
-- line 60 ----------------------------------------
     .            .                      .               .                      .               .           		       nc_inq_natts(the_id, &num)
     .            .                      .               .                      .               .           		       );
     .            .                      .               .                      .               .               return num;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim* NcFile::get_dim( NcToken name ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int dimid;
     0            0                 71,417 ( 0.00%)  6,292 ( 0.00%)        71,417 ( 0.00%)  6,292 ( 0.00%)      if(NcError::set_err(
     .            .                      .               .                      .               .           			nc_inq_dimid(the_id, name, &dimid)
     .            .                      .               .                      .               .           			) != NC_NOERR)
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               return get_dim(dimid);
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar* NcFile::get_var( NcToken name ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int varid;
     0            0                206,141 ( 0.00%)  6,436 ( 0.00%)       206,141 ( 0.00%)  6,436 ( 0.00%)      if(NcError::set_err(
     .            .                      .               .                      .               .           			nc_inq_varid(the_id, name, &varid)
     .            .                      .               .                      .               .           			) != NC_NOERR)
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               return get_var(varid);
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt* NcFile::get_att( NcToken aname ) const
     .            .                      .               .                      .               .           {
-- line 86 ----------------------------------------
-- line 118 ----------------------------------------
     .            .                      .               .                      .               .               return get_dim(recdim);
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim* NcFile::add_dim(NcToken name, long size)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (!is_valid() || !define_mode())
     .            .                      .               .                      .               .                 return 0;
     .            .                      .               .                      .               .               int n = num_dims();
     0            0                 15,336 ( 0.00%)    648 ( 0.00%)         3,240 ( 0.00%)    192 ( 0.00%)      NcDim* dimp = new NcDim(this, name, size);
     .            .                      .               .                      .               .               dimensions[n] = dimp;	// for garbage collection on close()
     .            .                      .               .                      .               .               return dimp;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim* NcFile::add_dim(NcToken name)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return add_dim(name, NC_UNLIMITED);
     .            .                      .               .                      .               .           }
-- line 134 ----------------------------------------
-- line 164 ----------------------------------------
     .            .                      .               .                      .               .           			dims[4] = dim4->id();
     .            .                      .               .                      .               .           		    }
     .            .                      .               .                      .               .           		}
     .            .                      .               .                      .               .           	    }
     .            .                      .               .                      .               .           	}
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               int n = num_vars();
     .            .                      .               .                      .               .               int varid;
     0            0                291,696 ( 0.00%)    888 ( 0.00%)         1,656 ( 0.00%)     96 ( 0.00%)      if(NcError::set_err(
     .            .                      .               .                      .               .           			nc_def_var(the_id, name, (nc_type) type, ndims, dims, &varid)
     .            .                      .               .                      .               .           			) != NC_NOERR)
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               NcVar* varp =
     0            0                789,096 ( 0.00%)    192 ( 0.00%)             0               0                 new NcVar(this, varid);
     .            .                      .               .                      .               .               variables[n] = varp;
     .            .                      .               .                      .               .               return varp;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           // For variables with more than 5 dimensions, use n-dimensional interface
     .            .                      .               .                      .               .           // with vector of dimensions.
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar* NcFile::add_var(NcToken name, NcType type, int ndims, const NcDim** dims)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (!is_valid() || !define_mode())
     .            .                      .               .                      .               .                 return 0;
     0            0                    192 ( 0.00%)     48 ( 0.00%)             0               0               int* dimids = new int[ndims];
     .            .                      .               .                      .               .               for (int i=0; i < ndims; i++)
     .            .                      .               .                      .               .                 dimids[i] = dims[i]->id();
     .            .                      .               .                      .               .               int n = num_vars();
     .            .                      .               .                      .               .               int varid;
     0            0                291,192 ( 0.00%)    864 ( 0.00%)         2,136 ( 0.00%)     96 ( 0.00%)      if(NcError::set_err(
     .            .                      .               .                      .               .           			nc_def_var(the_id, name, (nc_type) type, ndims, dimids, &varid)
     .            .                      .               .                      .               .           			) != NC_NOERR)
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               NcVar* varp =
     0            0                789,192 ( 0.00%)    192 ( 0.00%)             0               0                 new NcVar(this, varid);
     .            .                      .               .                      .               .               variables[n] = varp;
     0            0                      0               0                    192 ( 0.00%)     48 ( 0.00%)      delete [] dimids;
     .            .                      .               .                      .               .               return varp;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcFile_add_scalar_att(TYPE)					      \
     .            .                      .               .                      .               .           NcBool NcFile::add_att(NcToken aname, TYPE val)				      \
     .            .                      .               .                      .               .           {									      \
     .            .                      .               .                      .               .               return globalv->add_att(aname, val);				      \
     .            .                      .               .                      .               .           }
-- line 209 ----------------------------------------
-- line 300 ----------------------------------------
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcFile::close( void )
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int i;
     .            .                      .               .                      .               .               
     .            .                      .               .                      .               .               if (the_id == ncBad)
     .            .                      .               .                      .               .                 return 0;
     .            .                      .               .                      .               .               for (i = 0; i < num_dims(); i++)
     0            0                      0               0                  8,880 ( 0.00%)    444 ( 0.00%)        delete dimensions[i];
     .            .                      .               .                      .               .               for (i = 0; i < num_vars(); i++)
     0            0                      0               0              4,866,588 ( 0.02%)  1,184 ( 0.00%)        delete variables[i];
     0            0                      0               0                606,208 ( 0.00%)     74 ( 0.00%)      delete [] dimensions;
     0            0                      0               0              4,849,664 ( 0.02%)     74 ( 0.00%)      delete [] variables;
     0            0                      0               0              1,215,968 ( 0.00%)    222 ( 0.00%)      delete globalv;
     .            .                      .               .                      .               .               int old_id = the_id;
     .            .                      .               .                      .               .               the_id = ncBad;
     0            0                      0               0             30,316,622 ( 0.10%) 12,784 ( 0.00%)      return NcError::set_err(
     .            .                      .               .                      .               .           			    nc_close(old_id)
     .            .                      .               .                      .               .           			    ) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcFile::abort( void )
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return NcError::set_err(
     .            .                      .               .                      .               .           			    nc_abort(the_id)
-- line 324 ----------------------------------------
-- line 340 ----------------------------------------
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcFile::data_mode( void )
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (! is_valid())
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               if (! in_define_mode)
     .            .                      .               .                      .               .                 return TRUE;
     0            0                 28,800 ( 0.00%)    552 ( 0.00%)        33,120 ( 0.00%)    360 ( 0.00%)      if (NcError::set_err(
     .            .                      .               .                      .               .           			 nc_enddef(the_id)
     .            .                      .               .                      .               .           			 ) != NC_NOERR)
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               in_define_mode = 0;
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           int NcFile::id( void ) const
-- line 356 ----------------------------------------
-- line 376 ----------------------------------------
     .            .                      .               .                      .               .                  mode |= NC_NETCDF4|NC_CLASSIC_MODEL;
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .               switch (fmode) {
     .            .                      .               .                      .               .               case Write:
     .            .                      .               .                      .               .           	mode |= NC_WRITE;
     .            .                      .               .                      .               .           	/*FALLTHRU*/
     .            .                      .               .                      .               .               case ReadOnly:
     .            .                      .               .                      .               .           	// use netcdf-3 interface to permit specifying tuning parameter
     0            0             31,537,621 ( 0.10%)  4,349 ( 0.00%)     3,891,375 ( 0.01%)  1,584 ( 0.00%)  	status = NcError::set_err(
     .            .                      .               .                      .               .           				  nc__open(path, mode, bufrsizeptr, &the_id)
     .            .                      .               .                      .               .           				  );
     .            .                      .               .                      .               .           	if(status != NC_NOERR)
     .            .                      .               .                      .               .           	{
     .            .                      .               .                      .               .           	    NcError::set_err(status);
     .            .                      .               .                      .               .           	    the_id =  -1;
     .            .                      .               .                      .               .           	}
     .            .                      .               .                      .               .           	in_define_mode = 0;
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               case New:
     .            .                      .               .                      .               .           	mode |= NC_NOCLOBBER;
     .            .                      .               .                      .               .           	/*FALLTHRU*/
     .            .                      .               .                      .               .               case Replace:
     .            .                      .               .                      .               .           	// use netcdf-3 interface to permit specifying tuning parameters
     0            0                718,416 ( 0.00%)  1,565 ( 0.00%)        25,968 ( 0.00%)    408 ( 0.00%)  	status = NcError::set_err(
     .            .                      .               .                      .               .           				  nc__create(path, mode, initialsize,
     .            .                      .               .                      .               .           				      bufrsizeptr, &the_id)
     .            .                      .               .                      .               .           				  );
     .            .                      .               .                      .               .           	if(status != NC_NOERR)
     .            .                      .               .                      .               .           	{
     .            .                      .               .                      .               .           	    NcError::set_err(status);
     .            .                      .               .                      .               .           	    the_id =  -1;
     .            .                      .               .                      .               .           	}
-- line 407 ----------------------------------------
-- line 408 ----------------------------------------
     .            .                      .               .                      .               .           	in_define_mode = 1;
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               default:
     .            .                      .               .                      .               .           	the_id = ncBad;
     .            .                      .               .                      .               .           	in_define_mode = 0;
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               if (is_valid()) {
     0            0                606,208 ( 0.00%)     74 ( 0.00%)             0               0           	dimensions = new NcDim*[NC_MAX_DIMS];
     0            0              4,849,664 ( 0.02%)     74 ( 0.00%)             0               0           	variables = new NcVar*[NC_MAX_VARS];
     .            .                      .               .                      .               .           	int i;
     .            .                      .               .                      .               .           	for (i = 0; i < num_dims(); i++)
     0            0                  6,000 ( 0.00%)    300 ( 0.00%)             0               0           	    dimensions[i] = new NcDim(this, i);
     .            .                      .               .                      .               .           	for (i = 0; i < num_vars(); i++)
     0            0              3,499,150 ( 0.01%)  3,950 ( 0.00%)       247,800 ( 0.00%)  3,350 ( 0.00%)  	    variables[i] = new NcVar(this, i);
     0            0              1,215,968 ( 0.00%)    222 ( 0.00%)             0               0           	globalv = new NcVar(this, ncGlobal);
     .            .                      .               .                      .               .               } else {
     .            .                      .               .                      .               .           	dimensions = 0;
     .            .                      .               .                      .               .           	variables = 0;
     .            .                      .               .                      .               .           	globalv = 0;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcToken NcDim::name( void ) const
-- line 431 ----------------------------------------
-- line 432 ----------------------------------------
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return the_name;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           long NcDim::size( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               size_t sz = 0;
     .            .                      .               .                      .               .               if (the_file)
     0            0             14,332,800 ( 0.05%) 95,552 ( 0.02%)    14,332,800 ( 0.05%) 95,552 ( 0.02%)        NcError::set_err(
     .            .                      .               .                      .               .           		       nc_inq_dimlen(the_file->id(), the_id, &sz)
     .            .                      .               .                      .               .           		       );
     .            .                      .               .                      .               .               return sz;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcDim::is_valid( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return the_file->is_valid() && the_id != ncBad;
-- line 448 ----------------------------------------
-- line 500 ----------------------------------------
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim::NcDim(NcFile* nc, int id)
     .            .                      .               .                      .               .           	: the_file(nc), the_id(id)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               char nam[NC_MAX_NAME];
     .            .                      .               .                      .               .               if (the_file && NcError::set_err(
     .            .                      .               .                      .               .           				     nc_inq_dimname(the_file->id(), the_id, nam)
     .            .                      .               .                      .               .           				     ) == NC_NOERR) {
     0            0                  1,200 ( 0.00%)    150 ( 0.00%)             0               0           	the_name = new char[strlen(nam) + 1]; 
     .            .                      .               .                      .               .           	strcpy(the_name, nam);
     .            .                      .               .                      .               .               } else {
     .            .                      .               .                      .               .           	the_name = 0;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim::NcDim(NcFile* nc, NcToken name, long sz)
     .            .                      .               .                      .               .           	: the_file(nc)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               size_t dimlen = sz;
     0            0                 12,456 ( 0.00%)    504 ( 0.00%)         3,240 ( 0.00%)    192 ( 0.00%)      if(NcError::set_err(
     .            .                      .               .                      .               .           			nc_def_dim(the_file->id(), name, dimlen, &the_id)
     .            .                      .               .                      .               .           			) == NC_NOERR) {
     0            0                    576 ( 0.00%)     72 ( 0.00%)             0               0           	the_name = new char[strlen(name) + 1];
     .            .                      .               .                      .               .           	strcpy(the_name, name);
     .            .                      .               .                      .               .               } else {
     .            .                      .               .                      .               .           	the_name = 0;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcDim::~NcDim( void )
     .            .                      .               .                      .               .           {
     0            0                      0               0                  1,776 ( 0.00%)    222 ( 0.00%)      delete [] the_name;
     0            0                      0               0                  8,880 ( 0.00%)    444 ( 0.00%)  }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define Nc_as(TYPE) name2(as_,TYPE)
     .            .                      .               .                      .               .           #define NcTypedComponent_as(TYPE)				          \
     .            .                      .               .                      .               .           TYPE NcTypedComponent::Nc_as(TYPE)( long n ) const		          \
     .            .                      .               .                      .               .           {								          \
     .            .                      .               .                      .               .             NcValues* tmp = values();                                               \
     .            .                      .               .                      .               .             TYPE rval = tmp->Nc_as(TYPE)(n);                                        \
     .            .                      .               .                      .               .             delete tmp;                                                             \
-- line 540 ----------------------------------------
-- line 548 ----------------------------------------
     .            .                      .               .                      .               .           NcTypedComponent_as(long)
     .            .                      .               .                      .               .           NcTypedComponent_as(float)
     .            .                      .               .                      .               .           NcTypedComponent_as(double)
     .            .                      .               .                      .               .           NcTypedComponent_as(ncint64)
     .            .                      .               .                      .               .           NcTypedComponent_as(ncuint64)
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           char* NcTypedComponent::as_string( long n ) const
     .            .                      .               .                      .               .           {
     0            0                 22,648 ( 0.00%)  1,212 ( 0.00%)        17,385 ( 0.00%)  1,010 ( 0.00%)      NcValues* tmp = values();
 2,132 ( 1.80%) 101 ( 8.05%)         2,132 ( 0.00%)    101 ( 0.00%)             0               0               char* rval = tmp->as_string(n);
     0            0                      0               0                  5,263 ( 0.00%)    202 ( 0.00%)      delete tmp;
     .            .                      .               .                      .               .               return rval;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcTypedComponent::NcTypedComponent ( NcFile* nc )
     .            .                      .               .                      .               .           	: the_file(nc)
     .            .                      .               .                      .               .           {}
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcValues* NcTypedComponent::get_space( long numVals ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               NcValues* valp;
     .            .                      .               .                      .               .               if (numVals < 1)
     0            0                 10,653 ( 0.00%)    538 ( 0.00%)        10,653 ( 0.00%)    538 ( 0.00%)  	numVals = num_vals();
     0            0                 10,653 ( 0.00%)    538 ( 0.00%)        10,653 ( 0.00%)    538 ( 0.00%)      switch (type()) {
     .            .                      .               .                      .               .                 case ncFloat:
     .            .                      .               .                      .               .           	valp = new NcValues_float(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .                 case ncDouble:
     .            .                      .               .                      .               .           	valp = new NcValues_double(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .           	  case ncInt64:
     .            .                      .               .                      .               .           	valp = new NcValues_ncint64(numVals);
-- line 579 ----------------------------------------
-- line 584 ----------------------------------------
     .            .                      .               .                      .               .                 case ncInt:
     .            .                      .               .                      .               .           	valp = new NcValues_int(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .                 case ncShort:
     .            .                      .               .                      .               .           	valp = new NcValues_short(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .                 case ncByte:
     .            .                      .               .                      .               .                 case ncChar:
     0            0                 11,983 ( 0.00%)    538 ( 0.00%)             0               0           	valp = new NcValues_char(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .           	  case ncString:
     .            .                      .               .                      .               .           	valp = new NcValues_ncstring(numVals);
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .                 case ncNoType:
     .            .                      .               .                      .               .                 default:
     .            .                      .               .                      .               .           	valp = 0;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return valp;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar::~NcVar( void )
     .            .                      .               .                      .               .           {
     0            0                      0               0              3,031,040 ( 0.01%)    370 ( 0.00%)      delete[] the_cur;
     0            0                      0               0              3,031,040 ( 0.01%)    370 ( 0.00%)      delete[] cur_rec;
     0            0                      0               0                  2,716 ( 0.00%)    296 ( 0.00%)      delete[] the_name;
     0            0                      0               0              6,082,556 ( 0.02%)  1,406 ( 0.00%)  }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcToken NcVar::name( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return the_name;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcType NcVar::type( void ) const
     .            .                      .               .                      .               .           {
-- line 617 ----------------------------------------
-- line 669 ----------------------------------------
     .            .                      .               .                      .               .           			 );
     .            .                      .               .                      .               .                 }
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return natt;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt* NcVar::get_att( NcToken aname ) const
     .            .                      .               .                      .               .           {
10,900 ( 9.22%) 538 (42.87%)       532,148 ( 0.00%) 24,130 ( 0.01%)             0               0               NcAtt* att = new NcAtt(the_file, this, aname);
     0            0                694,145 ( 0.00%) 24,130 ( 0.01%)       694,145 ( 0.00%) 24,130 ( 0.01%)      if (! att->is_valid()) {
     0            0                      0               0                521,248 ( 0.00%) 23,592 ( 0.01%)  	delete att;
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return att;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt* NcVar::get_att( int n ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (n < 0 || n >= num_atts())
     .            .                      .               .                      .               .                 return 0;
     0            0                  1,536 ( 0.00%)    168 ( 0.00%)             0               0               NcToken aname = attname(n);
 6,912 ( 5.85%) 336 (26.77%)        14,088 ( 0.00%)    672 ( 0.00%)         7,176 ( 0.00%)    336 ( 0.00%)      NcAtt* ap = get_att(aname);
     0            0                      0               0                  1,536 ( 0.00%)    168 ( 0.00%)      delete [] (char*)aname;
     .            .                      .               .                      .               .               return ap;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           long NcVar::num_vals( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               long prod = 1;
     .            .                      .               .                      .               .               for (int d = 0; d < num_dims(); d++)
     .            .                      .               .                      .               .           	prod *= get_dim(d)->size();
-- line 699 ----------------------------------------
-- line 1104 ----------------------------------------
     .            .                      .               .                      .               .                start[j] = the_cur[j];
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return NcError::set_err(
     .            .                      .               .                      .               .           			    nc_put_vara_text (the_file->id(), the_id, start, count, vals)
     .            .                      .               .                      .               .           			    ) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar_put_array(short)
     0            0              1,760,608 ( 0.01%) 17,829 ( 0.00%)     1,735,904 ( 0.01%) 11,888 ( 0.00%)  NcVar_put_array(int)
     .            .                      .               .                      .               .           NcVar_put_array(long)
     .            .                      .               .                      .               .           NcVar_put_array(float)
     0            0                 15,912 ( 0.00%)    212 ( 0.00%)        14,400 ( 0.00%)    120 ( 0.00%)  NcVar_put_array(double)
     .            .                      .               .                      .               .           NcVar_put_array2(ncint64, longlong)
     .            .                      .               .                      .               .           NcVar_put_array2(ncuint64, ulonglong)
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcVar_put_nd_array2(TYPE,NCTYPE)					      \
     .            .                      .               .                      .               .           NcBool NcVar::put( const TYPE* vals, const long* count )		      \
     .            .                      .               .                      .               .           {									      \
     .            .                      .               .                      .               .               /* no need to check type() vs. TYPE, invoked C function will do that */   \
     .            .                      .               .                      .               .               if (! the_file->data_mode())					      \
-- line 1123 ----------------------------------------
-- line 1157 ----------------------------------------
     .            .                      .               .                      .               .           			    nc_put_vara_text (the_file->id(), the_id, start, (const size_t *)count, vals)
     .            .                      .               .                      .               .           			    ) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar_put_nd_array(short)
     .            .                      .               .                      .               .           NcVar_put_nd_array(int)
     .            .                      .               .                      .               .           NcVar_put_nd_array(long)
     .            .                      .               .                      .               .           NcVar_put_nd_array(float)
     0            0                 31,496 ( 0.00%)    432 ( 0.00%)        28,800 ( 0.00%)    240 ( 0.00%)  NcVar_put_nd_array(double)
     .            .                      .               .                      .               .           NcVar_put_nd_array2(ncint64, longlong)
     .            .                      .               .                      .               .           NcVar_put_nd_array2(ncuint64, ulonglong)
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcVar_get_array2(TYPE,NCTYPE)						      \
     .            .                      .               .                      .               .           NcBool NcVar::get( TYPE* vals,						      \
     .            .                      .               .                      .               .           		     long edge0,					      \
     .            .                      .               .                      .               .           		     long edge1,					      \
     .            .                      .               .                      .               .           		     long edge2,					      \
-- line 1173 ----------------------------------------
-- line 1258 ----------------------------------------
     .            .                      .               .                      .               .                start[j] = the_cur[j];
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return NcError::set_err(
     .            .                      .               .                      .               .           			    nc_get_vara_text (the_file->id(), the_id, start, count, vals)
     .            .                      .               .                      .               .           			    ) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar_get_array(short)
     0            0                 37,408 ( 0.00%)    702 ( 0.00%)        34,400 ( 0.00%)    600 ( 0.00%)  NcVar_get_array(int)
     .            .                      .               .                      .               .           NcVar_get_array(long)
     .            .                      .               .                      .               .           NcVar_get_array(float)
     0            0                  1,200 ( 0.00%)     12 ( 0.00%)         1,184 ( 0.00%)      8 ( 0.00%)  NcVar_get_array(double)
     .            .                      .               .                      .               .           NcVar_get_array2(ncint64, longlong)
     .            .                      .               .                      .               .           NcVar_get_array2(ncuint64, ulonglong)
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcVar_get_nd_array2(TYPE,NCTYPE)					      \
     .            .                      .               .                      .               .           NcBool NcVar::get( TYPE* vals, const long* count ) const		      \
     .            .                      .               .                      .               .           {									      \
     .            .                      .               .                      .               .               if (! the_file->data_mode())					      \
     .            .                      .               .                      .               .                 return FALSE;							      \
-- line 1277 ----------------------------------------
-- line 1303 ----------------------------------------
     .            .                      .               .                      .               .               for (int i = 0; i < num_dims(); i++)
     .            .                      .               .                      .               .           	start[i] = the_cur[i];
     .            .                      .               .                      .               .               return nc_get_vara_text (the_file->id(), the_id, start, (const size_t*) count, vals) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar_get_nd_array(short)
     .            .                      .               .                      .               .           NcVar_get_nd_array(int)
     .            .                      .               .                      .               .           NcVar_get_nd_array(long)
     0            0          3,037,848,864 ( 9.59%) 43,860 ( 0.01%) 3,037,825,472 ( 9.59%) 38,012 ( 0.01%)  NcVar_get_nd_array(float)
     0            0                 28,800 ( 0.00%)    288 ( 0.00%)        28,416 ( 0.00%)    192 ( 0.00%)  NcVar_get_nd_array(double)
     .            .                      .               .                      .               .           NcVar_get_nd_array2(ncint64, longlong)
     .            .                      .               .                      .               .           NcVar_get_nd_array2(ncuint64, ulonglong)
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           // If no args, set cursor to all zeros.	 Else set initial elements of cursor
     .            .                      .               .                      .               .           // to args provided, rest to zeros.
     .            .                      .               .                      .               .           NcBool NcVar::set_cur(long c0, long c1, long c2, long c3, long c4)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               long t[6];
-- line 1320 ----------------------------------------
-- line 1325 ----------------------------------------
     .            .                      .               .                      .               .               t[4] = c4;
     .            .                      .               .                      .               .               t[5] = -1;
     .            .                      .               .                      .               .               for(int j = 0; j < 6; j++) { // find how many parameters were used
     .            .                      .               .                      .               .           	int i;
     .            .                      .               .                      .               .           	if (t[j] == -1) {
     .            .                      .               .                      .               .           	    if (num_dims() < j)
     .            .                      .               .                      .               .           	      return FALSE;	// too many for variable's dimensionality
     .            .                      .               .                      .               .           	    for (i = 0; i < j; i++) {
     0            0                  4,800 ( 0.00%)    400 ( 0.00%)       120,000 ( 0.00%)    800 ( 0.00%)  		if (t[i] >= get_dim(i)->size() && ! get_dim(i)->is_unlimited())
     .            .                      .               .                      .               .           		  return FALSE;	// too big for dimension
     .            .                      .               .                      .               .           		the_cur[i] = t[i];
     .            .                      .               .                      .               .           	    }
     .            .                      .               .                      .               .           	    for(i = j; i < num_dims(); i++)
     .            .                      .               .                      .               .           	      the_cur[i] = 0;
     .            .                      .               .                      .               .           	    return TRUE;
     .            .                      .               .                      .               .           	}
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcVar::set_cur(long* cur)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               for(int i = 0; i < num_dims(); i++) {
     0            0                280,704 ( 0.00%) 23,392 ( 0.01%)     7,017,600 ( 0.02%) 46,784 ( 0.01%)  	if (cur[i] >= get_dim(i)->size() && ! get_dim(i)->is_unlimited())
     .            .                      .               .                      .               .           	  return FALSE;
     .            .                      .               .                      .               .           	the_cur[i] = cur[i];
     .            .                      .               .                      .               .               }
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcVar_add_scalar_att2(TYPE,NCTYPE)					      \
     .            .                      .               .                      .               .           NcBool NcVar::add_att(NcToken aname, TYPE val)				      \
-- line 1356 ----------------------------------------
-- line 1404 ----------------------------------------
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcVar::add_att(NcToken aname, const char* val)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (! the_file->define_mode())
     .            .                      .               .                      .               .                 return FALSE;
     0            0                 10,224 ( 0.00%)    504 ( 0.00%)         2,784 ( 0.00%)    144 ( 0.00%)      if (nc_put_att_text(the_file->id(), the_id, aname,
     .            .                      .               .                      .               .           		 strlen(val), val) != NC_NOERR)
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           #define NcVar_add_vector_att2(TYPE,NCTYPE)					      \
     .            .                      .               .                      .               .           NcBool NcVar::add_att(NcToken aname, int len, const TYPE* vals)		      \
     .            .                      .               .                      .               .           {									      \
-- line 1420 ----------------------------------------
-- line 1441 ----------------------------------------
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcVar::add_att(NcToken aname, int len, const char* vals)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (! the_file->define_mode())
     .            .                      .               .                      .               .                 return FALSE;
     0            0                 23,688 ( 0.00%)  1,176 ( 0.00%)         7,176 ( 0.00%)    336 ( 0.00%)      if (NcError::set_err(
     .            .                      .               .                      .               .           			 nc_put_att_text (the_file->id(), the_id, aname,
     .            .                      .               .                      .               .           		 len, vals)
     .            .                      .               .                      .               .           			 ) != NC_NOERR)
     .            .                      .               .                      .               .                 return FALSE;
     .            .                      .               .                      .               .               return TRUE;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar_add_vector_att(short)
-- line 1457 ----------------------------------------
-- line 1511 ----------------------------------------
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcVar::NcVar(NcFile* nc, int id)
     .            .                      .               .                      .               .              : NcTypedComponent(nc), the_id(id)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               char nam[NC_MAX_NAME];
     .            .                      .               .                      .               .               if (the_file 
     0            0                317,850 ( 0.00%)  4,750 ( 0.00%)       733,050 ( 0.00%)  7,600 ( 0.00%)  	&& NcError::set_err(
     .            .                      .               .                      .               .           			    nc_inq_varname(the_file->id(), the_id, nam)
     .            .                      .               .                      .               .           			    ) == NC_NOERR) {
     0            0                  2,716 ( 0.00%)    296 ( 0.00%)             0               0           	the_name = new char[1 + strlen(nam)];
     .            .                      .               .                      .               .           	strcpy(the_name, nam);
     .            .                      .               .                      .               .               } else {
     .            .                      .               .                      .               .           	the_name = 0;
     .            .                      .               .                      .               .               }
     0            0              6,062,080 ( 0.02%)    740 ( 0.00%)             0               0               init_cur();
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           int NcVar::attnum( NcToken attrname ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int num;
     .            .                      .               .                      .               .               for(num=0; num < num_atts(); num++) {
     .            .                      .               .                      .               .           	char aname[NC_MAX_NAME];
     .            .                      .               .                      .               .           	NcError::set_err(
-- line 1535 ----------------------------------------
-- line 1545 ----------------------------------------
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               if (attnum < 0 || attnum >= num_atts())
     .            .                      .               .                      .               .                 return 0;
     .            .                      .               .                      .               .               char aname[NC_MAX_NAME];
     .            .                      .               .                      .               .               if (NcError::set_err(
     .            .                      .               .                      .               .           			 nc_inq_attname(the_file->id(), the_id, attnum, aname)
     .            .                      .               .                      .               .           			 ) != NC_NOERR)
     .            .                      .               .                      .               .                 return 0;
     0            0                  1,536 ( 0.00%)    168 ( 0.00%)             0               0               char* rname = new char[1 + strlen(aname)];
     .            .                      .               .                      .               .               strcpy(rname, aname);
     .            .                      .               .                      .               .               return rname;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           void NcVar::init_cur( void )
     .            .                      .               .                      .               .           {
     0            0              3,031,040 ( 0.01%)    370 ( 0.00%)             0               0               the_cur = new long[NC_MAX_DIMS]; // *** don't know num_dims() yet?
     0            0              3,031,040 ( 0.01%)    370 ( 0.00%)             0               0               cur_rec = new long[NC_MAX_DIMS]; // *** don't know num_dims() yet?
     .            .                      .               .                      .               .               for(int i = 0; i < NC_MAX_DIMS; i++) { 
     .            .                      .               .                      .               .           	the_cur[i] = 0; cur_rec[i] = 0; }
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt::NcAtt(NcFile* nc, const NcVar* var, NcToken name)
     .            .                      .               .                      .               .              : NcTypedComponent(nc), the_variable(var)
     .            .                      .               .                      .               .           {
 2,292 ( 1.94%) 269 (21.43%)       146,068 ( 0.00%) 12,065 ( 0.00%)             0               0               the_name = new char[1 + strlen(name)];
     .            .                      .               .                      .               .               strcpy(the_name, name);
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt::NcAtt(NcFile* nc, NcToken name)
     .            .                      .               .                      .               .              : NcTypedComponent(nc), the_variable(NULL)
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               the_name = new char[1 + strlen(name)];
     .            .                      .               .                      .               .               strcpy(the_name, name);
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcAtt::~NcAtt( void )
     .            .                      .               .                      .               .           {
     0            0                      0               0                143,776 ( 0.00%) 11,796 ( 0.00%)      delete [] the_name;
     0            0                      0               0                521,248 ( 0.00%) 23,592 ( 0.01%)  }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcToken NcAtt::name( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               return the_name;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcType NcAtt::type( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               nc_type typ;
     0            0                 46,311 ( 0.00%)  2,286 ( 0.00%)        46,311 ( 0.00%)  2,286 ( 0.00%)      NcError::set_err(
     .            .                      .               .                      .               .           		     nc_inq_atttype(the_file->id(), the_variable->id(), the_name, &typ)
     .            .                      .               .                      .               .           		     );
     .            .                      .               .                      .               .               return (NcType) typ;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           long NcAtt::num_vals( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               size_t len;
     0            0                 17,829 ( 0.00%)    874 ( 0.00%)        17,829 ( 0.00%)    874 ( 0.00%)      NcError::set_err(
     .            .                      .               .                      .               .           		     nc_inq_attlen(the_file->id(), the_variable->id(), the_name, &len)
     .            .                      .               .                      .               .           	     	);
     .            .                      .               .                      .               .               return len;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcBool NcAtt::is_valid( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int num;
     .            .                      .               .                      .               .               return the_file->is_valid() &&
     .            .                      .               .                      .               .                 (the_variable->id() == NC_GLOBAL || the_variable->is_valid()) &&
     0            0                694,145 ( 0.00%) 24,130 ( 0.01%)       694,145 ( 0.00%) 24,130 ( 0.01%)  	NcError::set_err(
     .            .                      .               .                      .               .           			 nc_inq_attid(the_file->id(), the_variable->id(), the_name, &num)
     .            .                      .               .                      .               .           			 ) == NC_NOERR;
     .            .                      .               .                      .               .           }
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           NcValues* NcAtt::values( void ) const
     .            .                      .               .                      .               .           {
     .            .                      .               .                      .               .               int status;
     .            .                      .               .                      .               .               NcValues* valp;
     0            0                 10,653 ( 0.00%)    538 ( 0.00%)        10,653 ( 0.00%)    538 ( 0.00%)      if (type() == ncString) {
     .            .                      .               .                      .               .           		size_t sStrings;
     .            .                      .               .                      .               .           		status = NcError::set_err(
     .            .                      .               .                      .               .           				nc_inq_attlen(the_file->id(), the_variable->id(), the_name, &sStrings));
     .            .                      .               .                      .               .           		if (status != NC_NOERR) {
     .            .                      .               .                      .               .           			return NULL;
     .            .                      .               .                      .               .           		}
     .            .                      .               .                      .               .           		if (sStrings != 1) {
     .            .                      .               .                      .               .           			NcError::set_err(NC_ECANTCREATE);
-- line 1630 ----------------------------------------
-- line 1640 ----------------------------------------
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           		valp = get_space(strlen(szString)+1);
     .            .                      .               .                      .               .           		strcpy((char *)valp->base(), szString);
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           		nc_free_string(1, &szString);
     .            .                      .               .                      .               .           		return valp;
     .            .                      .               .                      .               .           
     .            .                      .               .                      .               .           	} else {
     0            0                 33,289 ( 0.00%)  1,614 ( 0.00%)        21,306 ( 0.00%)  1,076 ( 0.00%)  		valp = get_space();
     .            .                      .               .                      .               .           	}
     0            0                 10,653 ( 0.00%)    538 ( 0.00%)        10,653 ( 0.00%)    538 ( 0.00%)      switch (type()) {
     .            .                      .               .                      .               .               case ncFloat:
     .            .                      .               .                      .               .           	status = NcError::set_err(
     .            .                      .               .                      .               .           				  nc_get_att_float(the_file->id(), the_variable->id(), the_name,
     .            .                      .               .                      .               .           				   (float *)valp->base())
     .            .                      .               .                      .               .           				  );
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               case ncDouble:
     .            .                      .               .                      .               .           	status = NcError::set_err(
-- line 1658 ----------------------------------------
-- line 1686 ----------------------------------------
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               case ncByte:
     .            .                      .               .                      .               .           	status = NcError::set_err(
     .            .                      .               .                      .               .           				  nc_get_att_schar(the_file->id(), the_variable->id(), the_name,
     .            .                      .               .                      .               .           				  (signed char *)valp->base())
     .            .                      .               .                      .               .           				  );
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               case ncChar:
     0            0                 10,653 ( 0.00%)    538 ( 0.00%)        10,653 ( 0.00%)    538 ( 0.00%)  	status = NcError::set_err(
     .            .                      .               .                      .               .           				  nc_get_att_text(the_file->id(), the_variable->id(), the_name,
     .            .                      .               .                      .               .           				  (char *)valp->base())
     .            .                      .               .                      .               .           				  );
     .            .                      .               .                      .               .           	break;
     .            .                      .               .                      .               .               case ncNoType:
     .            .                      .               .                      .               .               default:
     .            .                      .               .                      .               .           	return 0;
     .            .                      .               .                      .               .               }
-- line 1702 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  /global/common/software/nersc9/valgrind/files/valgrind-3.23.0/coregrind/vg_preloaded.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-common.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-config.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core-init-finalize.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-core.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-dxt.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-heatmap.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-lustre.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-mpiio.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-posix.c
  /global/homes/s/swowner/jlbez/darshan-3.4.6/darshan-runtime/lib/darshan-stdio.c
  /home/jenkins/src/api/pmi2/pmi2_finalize.c
  /home/jenkins/src/api/pmi2/pmi2_init.c
  /home/jenkins/src/pals/pals_utils.c
  /home/jenkins/src/pmi_core/_pmi_finalize.c
  /home/jenkins/src/pmi_core/_pmi_init.c
  /home/jenkins/src/pmi_core/_pmi_jobattr.c
  /home/jenkins/src/pmi_core/_pmi_kvs.c
  /home/jenkins/src/pmi_core/_pmi_rankpid_file.c
  /home/jenkins/src/pmi_core/pmi_control_net.c
  /home/jenkins/src/pmi_core/smp_barrier.c
  /ptmp/peint/build-cray-gcc-20210421.193301.906125391/cray-gcc/BUILD/snos_objdir/x86_64-suse-linux/libquadmath/../../../cray-gcc-10.3.0-202104220029.0777bcc28ac1d/libquadmath/printf/quadmath-printf.c
  /workspace/src/github.hpe.com/hpe/hpc-rm-pals/WORKSPACE/BUILD/cray-pals1.4-1.4.0/src/libpals/libpals.c
  UnknownFile???

--------------------------------------------------------------------------------
curB             curBk          totB                     totBk                  totFdB                   totFdBk                
--------------------------------------------------------------------------------
188,397 (100.0%) 4,844 (100.0%) 186,232,461,110 (100.0%) 3,516,545,061 (100.0%) 196,127,186,786 (100.0%) 3,460,763,810 (100.0%)  events annotated

