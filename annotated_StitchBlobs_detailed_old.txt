--------------------------------------------------------------------------------
Profile data file 'xtmemory.0.kcg' (creator: xtree-1)
--------------------------------------------------------------------------------
Profiled target:  ./bin/StitchBlobs --in_list ./test/ERA5_AR_test/ERA5_AR_files_short.txt --out_list ./test/ERA5_AR_test/ERA5_AR_SB_files_short.txt --min_overlap_prev 25.0 --max_overlap_prev 100.0 --min_overlap_next 25.0 --max_overlap_next 100.0 --latname latitude --lonname longitude --var AR_binary_tag (PID 1578162)
Events recorded:  curB curBk totB totBk totFdB totFdBk
Events shown:     curB curBk totB totBk totFdB totFdBk
Event sort order: curB curBk totB totBk totFdB totFdBk
Thresholds:       99 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
curB             curBk          totB                    totBk                totFdB                  totFdBk              
--------------------------------------------------------------------------------
118,231 (100.0%) 1,255 (100.0%) 31,684,665,492 (100.0%) 396,769,345 (100.0%) 31,684,547,261 (100.0%) 396,768,090 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
curB             curBk          totB                    totBk                totFdB                  totFdBk                 file:function
--------------------------------------------------------------------------------
118,231 (100.0%) 1,255 (100.0%) 26,660,577,996 (84.14%) 282,935,075 (71.31%) 24,738,211,582 (78.08%)   234,785,431 (59.17%)  src/blobs/StitchBlobs.cpp:main

--------------------------------------------------------------------------------
-- Auto-annotated source: src/blobs/StitchBlobs.cpp
--------------------------------------------------------------------------------
curB             curBk        totB                    totBk                totFdB                  totFdBk              

-- line 609 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Construct the Operator with vecAllBlobTags
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm and this->_vecAllBlobTags based on the input communicator and vecAllBlobTags
      .            .                       .                    .                       .                    .           		///		And also construct the derived MPI_Datatype for Tag and commit it.
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		TagExchangeOP(MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           					  const std::vector< std::vector<Tag> > & vecAllBlobTags){
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecAllBlobTags = vecAllBlobTags;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           			//Initialize the size for the sendTags:
      0            0                      48 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags.resize(2);
      0            0                      84 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags[0].resize(_vecAllBlobTags[0].size());
      0            0                      84 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTags[1].resize(_vecAllBlobTags[_vecAllBlobTags.size()-1].size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			//Initialize the size for the recvTags:
      0            0                      48 ( 0.00%)           1 ( 0.00%)              0                    0           			recvTags.resize(2);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			//Create an MPI datatype for the Tag:
      .            .                       .                    .                       .                    .           			struct Tag sampleTag;
      .            .                       .                    .                       .                    .           			int tagFieldsCount = 3;	
      .            .                       .                    .                       .                    .           			MPI_Datatype Tag_typesig[3] = {MPI_INT,MPI_INT,MPI_INT};
      .            .                       .                    .                       .                    .           			int Tag_block_lengths[3] = {1,1,1};
      .            .                       .                    .                       .                    .           			MPI_Aint Tag_displacements[3];
      .            .                       .                    .                       .                    .           	
-- line 633 ----------------------------------------
-- line 634 ----------------------------------------
      .            .                       .                    .                       .                    .           			MPI_Aint base_address;
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag, &base_address);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.id, &Tag_displacements[0]);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.time, &Tag_displacements[1]);
      .            .                       .                    .                       .                    .           			MPI_Get_address(&sampleTag.global_id, &Tag_displacements[2]);
      .            .                       .                    .                       .                    .           			Tag_displacements[0] = MPI_Aint_diff(Tag_displacements[0], base_address);
      .            .                       .                    .                       .                    .           			Tag_displacements[1] = MPI_Aint_diff(Tag_displacements[1], base_address);
      .            .                       .                    .                       .                    .           			Tag_displacements[2] = MPI_Aint_diff(Tag_displacements[2], base_address);
      0            0                      88 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)           1 ( 0.00%)  			MPI_Type_create_struct(tagFieldsCount, Tag_block_lengths, Tag_displacements, Tag_typesig, &MPI_Tag_type);
      .            .                       .                    .                       .                    .           
      0            0                     128 ( 0.00%)           3 ( 0.00%)             48 ( 0.00%)           2 ( 0.00%)  			int result = MPI_Type_commit(&MPI_Tag_type);
      .            .                       .                    .                       .                    .           			if (result != MPI_SUCCESS) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("The MPI routine MPI_Type_commit(&MPI_Tag_type) failed (code %i)", result);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~TagExchangeOP(){
      0            0                       0                    0                     152 ( 0.00%)           2 ( 0.00%)  			MPI_Type_free(&MPI_Tag_type);
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      0            0                       0                    0                 313,404 ( 0.00%)       2,929 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Return the original unexchanged vecAllBlobTags
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		std::vector< std::vector<Tag> > GetOriginalVecAllBlobTags(){
      .            .                       .                    .                       .                    .           			return _vecAllBlobTags;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
-- line 666 ----------------------------------------
-- line 1276 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	public:
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Construct the Operator with BlobsExchangeOp
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm and this->_vecAllBlobs based on the input communicator and vecAllBlobs	
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		BlobsExchangeOp(MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           						const std::vector< std::vector<IndicatorSet> > & vecAllBlobs){
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecAllBlobs = vecAllBlobs;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor for BlobsExchangeOp
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~BlobsExchangeOp(){
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      .            .                       .                    .                       .                    .           			
      0            0                       0                    0               1,042,032 ( 0.00%)       2,925 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Start the exchange process.
      .            .                       .                    .                       .                    .           		/// 	this function is non-blocking and the data values in the BlobsExchangeOp should not be modified
      .            .                       .                    .                       .                    .           		/// 	The exchange values are not guaranteed to be current when this function returns and need to be used with the EndExchange()
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		void StartExchange() {			
-- line 1304 ----------------------------------------
-- line 1571 ----------------------------------------
      .            .                       .                    .                       .                    .           		///		It will contruct the this->m_comm this->_vecGlobalTimes this->fileLowerBound and this->fileUpperBound based on the input.
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		GlobalTimesExchangeOp(
      .            .                       .                    .                       .                    .           			MPI_Comm communicator, 
      .            .                       .                    .                       .                    .           			const std::vector< std::vector<Time> > & vecGlobalTimes, 
      .            .                       .                    .                       .                    .           			const int & processorResponsibalForFile_LB, 
      .            .                       .                    .                       .                    .           			const int & processorResponsibalForFile_UB
      .            .                       .                    .                       .                    .           		) {
      0            0                     576 ( 0.00%)           1 ( 0.00%)              0                    0           			this->_vecGlobalTimes = vecGlobalTimes;
      .            .                       .                    .                       .                    .           			this->m_comm = communicator;
      .            .                       .                    .                       .                    .           			this->fileLowerBound = processorResponsibalForFile_LB;
      .            .                       .                    .                       .                    .           			this->fileUpperBound = processorResponsibalForFile_UB;
      0            0                      56 ( 0.00%)           1 ( 0.00%)              0                    0           			sendTimes.resize(2);
      0            0                      56 ( 0.00%)           1 ( 0.00%)              0                    0           			recvTimes.resize(2);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Destructor
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		~GlobalTimesExchangeOp(){
      .            .                       .                    .                       .                    .           			MPIrequests.clear();
      .            .                       .                    .                       .                    .           			MPIstatuses.clear();
      0            0                       0                    0                  82,560 ( 0.00%)          27 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		///	<summary>
      .            .                       .                    .                       .                    .           		///		Start the exchange process.
      .            .                       .                    .                       .                    .           		/// 	this function is non-blocking and the data values in the GlobalTimesExchangeOp should not be modified
      .            .                       .                    .                       .                    .           		/// 	The exchange values are not guaranteed to be current when this function returns and need to be used with the EndExchange()
      .            .                       .                    .                       .                    .           		///	</summary>
      .            .                       .                    .                       .                    .           		void StartExchange() {
      .            .                       .                    .                       .                    .           			int rank, size;
-- line 1601 ----------------------------------------
-- line 2384 ----------------------------------------
      .            .                       .                    .                       .                    .           	// from input file, it will also write the result of
      .            .                       .                    .                       .                    .           	// 1979/01/01/00~1979/01/31/23 to the output file.
      .            .                       .                    .                       .                    .           	//########################### End HPC Notes (Hongyu Chen) ##################
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           int main(int argc, char** argv) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           		// Initialize MPI
105,199 (88.98%) 616 (49.08%)     24,070,370 ( 0.08%)         833 ( 0.00%)         45,714 ( 0.00%)         115 ( 0.00%)  		int result = MPI_Init(&argc, &argv);
      .            .                       .                    .                       .                    .           		if (result != MPI_SUCCESS) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("The MPI routine MPI_Init failed (code %i)", result);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	NcError error(NcError::silent_nonfatal);
      .            .                       .                    .                       .                    .           
-- line 2400 ----------------------------------------
-- line 2489 ----------------------------------------
      .            .                       .                    .                       .                    .           	// Time variable units
      .            .                       .                    .                       .                    .           	std::string strOutTimeUnits;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Verbose output
      .            .                       .                    .                       .                    .           	bool fVerbose;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Parse the command line
      .            .                       .                    .                       .                    .           	BeginCommandLine()
      0            0                      96 ( 0.00%)           2 ( 0.00%)              0                    0           		CommandLineString(strInputFile, "in", "");
      0            0                     104 ( 0.00%)           2 ( 0.00%)              8 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strInputFileList, "in_list", "");
      0            0                     120 ( 0.00%)           2 ( 0.00%)             16 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strConnectivity, "in_connect", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fDiagonalConnectivity, "diag_connect");
      0            0                     152 ( 0.00%)           2 ( 0.00%)             32 ( 0.00%)           1 ( 0.00%)  		CommandLineString(strOutputFile, "out", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutputFileList, "out_list", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strVariable, "var", "binary_tag");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutputVariable, "outvar", "object_id");
      0            0                     216 ( 0.00%)           2 ( 0.00%)             64 ( 0.00%)           1 ( 0.00%)  		CommandLineInt(nMinBlobSize, "minsize", 1);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strMinTime, "mintime", "1");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fTagOnly, "tagonly");
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapPrev, "min_overlap_prev", 0.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapPrev, "max_overlap_prev", 100.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMinPercentOverlapNext, "min_overlap_next", 0.0, "(%)")
      0            0                     153 ( 0.00%)           4 ( 0.00%)             34 ( 0.00%)           2 ( 0.00%)  		CommandLineDoubleD(dMaxPercentOverlapNext, "max_overlap_next", 100.0, "(%)")
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMergeDistDeg, "merge_dist", 0.0); 
      0            0                     459 ( 0.00%)           6 ( 0.00%)            184 ( 0.00%)           3 ( 0.00%)  		CommandLineStringD(strRestrictRegion, "restrict_region", "", "(lat0,lat1,lon0,lon1,count)");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fRegional, "regional");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMinLatDeg, "minlat", -90.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMaxLatDeg, "maxlat", 90.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMinLonDeg, "minlon", 0.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineDouble(dMaxLonDeg, "maxlon", 360.0);
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fFlatten, "flatten");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strLatitudeName, "latname","lat");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strLongitudeName, "lonname","lon");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strOutTimeUnits,"outtimeunits","");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineString(strThresholdCmd, "thresholdcmd", "");
      0            0                      88 ( 0.00%)           1 ( 0.00%)              0                    0           		CommandLineBool(fVerbose, "verbose");
      .            .                       .                    .                       .                    .           
      0            0                     182 ( 0.00%)           4 ( 0.00%)             91 ( 0.00%)           2 ( 0.00%)  		ParseCommandLine(argc, argv);
      0            0                   7,528 ( 0.00%)          28 ( 0.00%)          2,903 ( 0.00%)          35 ( 0.00%)  	EndCommandLine(argv)
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceBanner();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Create Variable registry
      0            0                   1,792 ( 0.00%)          32 ( 0.00%)              0                    0           	VariableRegistry varreg;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check input
      .            .                       .                    .                       .                    .           	if ((strInputFile == "") && (strInputFileList == "")) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("No input file (--in) or (--in_list) specified");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if ((strInputFile != "") && (strInputFileList != "")) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("Only one of input file (--in) or (--in_list) allowed");
      .            .                       .                    .                       .                    .           	}
-- line 2540 ----------------------------------------
-- line 2548 ----------------------------------------
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check variable
      .            .                       .                    .                       .                    .           	if (strVariable == "") {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("No variable name (--var) specified");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Register variable
      0            0                     248 ( 0.00%)           2 ( 0.00%)              0                    0           	int varix = varreg.FindOrRegister(strVariable);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check output variable
      .            .                       .                    .                       .                    .           	if (strOutputVariable.length() == 0) {
      .            .                       .                    .                       .                    .           		strOutputVariable = strVariable + "tag";
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Input file list
      .            .                       .                    .                       .                    .           	FilenameList vecInputFiles;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	if (strInputFile != "") {
      .            .                       .                    .                       .                    .           		vecInputFiles.push_back(strInputFile);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if (strInputFileList != "") {
      0            0                  85,681 ( 0.00%)          62 ( 0.00%)         79,601 ( 0.00%)          13 ( 0.00%)  		vecInputFiles.FromFile(strInputFileList, false);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	int nFiles = vecInputFiles.size();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Output file list
      .            .                       .                    .                       .                    .           	FilenameList vecOutputFiles;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	if (strOutputFile != "") {
      .            .                       .                    .                       .                    .           		vecOutputFiles.push_back(strOutputFile);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	if (strOutputFileList != "") {
      0            0                  84,472 ( 0.00%)          50 ( 0.00%)         79,568 ( 0.00%)          12 ( 0.00%)  		vecOutputFiles.FromFile(strOutputFileList, false);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		if (vecOutputFiles.size() != vecInputFiles.size()) {
      .            .                       .                    .                       .                    .           			_EXCEPTION2("Mismatch in number of rows of --in_list (%lu) and --out_list (%lu)",
      .            .                       .                    .                       .                    .           				vecInputFiles.size(), vecOutputFiles.size());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Parse --mintime
-- line 2590 ----------------------------------------
-- line 2699 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// No connectivity file; check for latitude/longitude dimension
      .            .                       .                    .                       .                    .           	} else {
      .            .                       .                    .                       .                    .           		AnnounceStartBlock("No connectivity file specified");
      .            .                       .                    .                       .                    .           		Announce("Attempting to generate latitude-longitude grid from data file");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
    121 ( 0.10%)   6 ( 0.48%)        760,012 ( 0.00%)         272 ( 0.00%)         75,429 ( 0.00%)         199 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		if (vecNcFiles.size() < 1) {
      .            .                       .                    .                       .                    .           			_EXCEPTIONT("No data files specified; unable to generate grid");
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      0            0              78,923,834 ( 0.25%)   3,114,745 ( 0.79%)     12,477,562 ( 0.04%)   2,076,496 ( 0.52%)  		grid.GenerateLatitudeLongitude(
      .            .                       .                    .                       .                    .           			vecNcFiles[0],
      .            .                       .                    .                       .                    .           			strLatitudeName,
      .            .                       .                    .                       .                    .           			strLongitudeName,
      .            .                       .                    .                       .                    .           			fRegional,
      .            .                       .                    .                       .                    .           			fDiagonalConnectivity);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		_ASSERT(grid.m_nGridDim.size() == 2);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		AnnounceEndBlock("Done");
      0            0                       0                    0                 688,130 ( 0.00%)         125 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Check for area
      .            .                       .                    .                       .                    .           	if (!grid.HasAreas()) {
      .            .                       .                    .                       .                    .           		_EXCEPTIONT("SimpleGrid has no area information (needed for StitchBlobs)");
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Get time dimension over all files
      .            .                       .                    .                       .                    .           	// strOutTimeUnits is either predetermined or set at the command line
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Concatenating times");
      .            .                       .                    .                       .                    .           	NcType nctypeTime;
      .            .                       .                    .                       .                    .           	std::vector< std::pair<int, int> > vecGlobalTimeIxToFileTimeIx;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	std::vector< std::vector<Time> > vecGlobalTimes;
      0            0                     576 ( 0.00%)           1 ( 0.00%)              0                    0           	vecGlobalTimes.resize(vecOutputFiles.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	
      .            .                       .                    .                       .                    .           	#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           		//============================= Spread files across nodes=================================
      .            .                       .                    .                       .                    .           		// Note: if vecInputFiles.size() < total processor numbers, only <vecInputFiles.size()>
      .            .                       .                    .                       .                    .           		//   number of processor will be used.
      .            .                       .                    .                       .                    .           		// Calculate how many files each processor should process
      .            .                       .                    .                       .                    .           		int processorResponsibalForFile_UB;
-- line 2747 ----------------------------------------
-- line 2809 ----------------------------------------
      .            .                       .                    .                       .                    .           		#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           			if ((f >= processorResponsibalForFile_UB) || f < processorResponsibalForFile_LB) {
      .            .                       .                    .                       .                    .           				continue;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		#endif 
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the time variable from all files
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;//also known as the local vecNcFiles when MPI is enabled.
  2,904 ( 2.46%) 144 (11.47%)     18,224,472 ( 0.06%)       6,017 ( 0.00%)      1,801,344 ( 0.01%)       4,508 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get the time variable
      0            0                     528 ( 0.00%)          48 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  		NcVar * varTime = NcGetTimeVariable(*(vecNcFiles[0]));
      .            .                       .                    .                       .                    .           		if (varTime == NULL) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("File \"%s\" does not contain \"time\" variable",
      .            .                       .                    .                       .                    .           				vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		nctypeTime = varTime->type();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get time units (if not specified on command line)
      .            .                       .                    .                       .                    .           		if (strOutTimeUnits == "") {
     38 ( 0.03%)   2 ( 0.16%)             65 ( 0.00%)           4 ( 0.00%)             27 ( 0.00%)           2 ( 0.00%)  			NcAtt * attTime = varTime->get_att("units");
      .            .                       .                    .                       .                    .           			if (attTime == NULL) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("File \"%s\" missing \"time:units\" attribute",
      .            .                       .                    .                       .                    .           					vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
     32 ( 0.03%)   1 ( 0.08%)            208 ( 0.00%)          10 ( 0.00%)            156 ( 0.00%)          10 ( 0.00%)  			strOutTimeUnits = attTime->as_string(0);
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in CF-compliant time data
      .            .                       .                    .                       .                    .           		const NcTimeDimension & vecTimes = vecNcFiles.GetNcTimeDimension(0);
      .            .                       .                    .                       .                    .           		if (vecTimes.size() == 0) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("WARNING: File group does not contain any time data (%s)",
      .            .                       .                    .                       .                    .           				vecInputFiles[f].c_str());
      .            .                       .                    .                       .                    .           		}
-- line 2845 ----------------------------------------
-- line 2854 ----------------------------------------
      .            .                       .                    .                       .                    .           		if (vecOutputFiles.size() == 1) {
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecTimes.size(); t++) {
      .            .                       .                    .                       .                    .           				int iGlobalTime = vecGlobalTimes[0].size();
      .            .                       .                    .                       .                    .           				vecGlobalTimes[0].push_back(vecTimes[t]);
      .            .                       .                    .                       .                    .           				vecGlobalTimeIxToFileTimeIx.push_back( std::pair<int,int>(0,iGlobalTime) );
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		} else {
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecTimes.size(); t++) {
      0            0                 171,360 ( 0.00%)         192 ( 0.00%)         85,344 ( 0.00%)         168 ( 0.00%)  				vecGlobalTimes[f].push_back(vecTimes[t]);
      0            0                  65,528 ( 0.00%)          13 ( 0.00%)         32,760 ( 0.00%)          12 ( 0.00%)  				vecGlobalTimeIxToFileTimeIx.push_back( std::pair<int,int>(f,t) );
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0              16,515,120 ( 0.05%)       3,000 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	int nGlobalTimes = 0;
      .            .                       .                    .                       .                    .           	for (int f = 0; f < vecGlobalTimes.size(); f++) {
      .            .                       .                    .                       .                    .           		nGlobalTimes += vecGlobalTimes[f].size();
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	_ASSERT(nGlobalTimes > 0);
      .            .                       .                    .                       .                    .           	_ASSERT(nGlobalTimes == vecGlobalTimeIxToFileTimeIx.size());
      .            .                       .                    .                       .                    .           
-- line 2874 ----------------------------------------
-- line 2878 ----------------------------------------
      .            .                       .                    .                       .                    .           	// Build the set of nodes at each time contained in each blob
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Build blobs at each time level
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Building blob set at each time level");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Set of nodes at each time contained in each blob
      .            .                       .                    .                       .                    .           	std::vector< std::vector<IndicatorSet> > vecAllBlobs;//Sending and Receiving Blobs to nearby processors [Halo Var]
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobs.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Bounding boxes at each time for each blob
      .            .                       .                    .                       .                    .           	std::vector< std::vector< LatLonBox<double> > > vecAllBlobBoxesDeg;//[Halo Var]
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobBoxesDeg.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Time index across all files
      .            .                       .                    .                       .                    .           	int iTime = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Loop through all files
      .            .                       .                    .                       .                    .           	int startIndx = 0;//The starting index for looping through all files
      .            .                       .                    .                       .                    .           	#if defined(TEMPEST_MPIOMP) 
      .            .                       .                    .                       .                    .           		//If MPI is enabled, then modify the nFiles to the local file numbers
-- line 2898 ----------------------------------------
-- line 2901 ----------------------------------------
      .            .                       .                    .                       .                    .           	#endif 
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	for (int f = startIndx; f < nFiles; f++) {
      .            .                       .                    .                       .                    .           		// Clear existing data in the register
      .            .                       .                    .                       .                    .           		varreg.UnloadAllGridData();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
  2,904 ( 2.46%) 144 (11.47%)     18,220,608 ( 0.06%)       5,948 ( 0.00%)      1,801,344 ( 0.01%)       4,508 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[f]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           		
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Number of times in this input file
      0            0                     528 ( 0.00%)          48 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  		NcDim * dimTimeInput = vecNcFiles[0]->get_dim("time");
      .            .                       .                    .                       .                    .           		if (dimTimeInput == NULL) {
      .            .                       .                    .                       .                    .           			_EXCEPTION1("No dimension \"time\" in file \"%s\"",
      .            .                       .                    .                       .                    .           				vecNcFiles.GetFilename(0).c_str());
      .            .                       .                    .                       .                    .           		}
      0            0                   2,304 ( 0.00%)         192 ( 0.00%)         57,600 ( 0.00%)         384 ( 0.00%)  		int nLocalTimes = dimTimeInput->size();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Loop through all times
      .            .                       .                    .                       .                    .           		for (int t = 0; t < nLocalTimes; t++, iTime++) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get the current patch vector
      .            .                       .                    .                       .                    .           			std::vector<IndicatorSet> & vecBlobs = vecAllBlobs[iTime];
      .            .                       .                    .                       .                    .           			
      .            .                       .                    .                       .                    .           
-- line 2928 ----------------------------------------
-- line 2939 ----------------------------------------
      .            .                       .                    .                       .                    .           			// New announcement block for timestep
      .            .                       .                    .                       .                    .           			if (vecGlobalTimes.size() == 1) {
      .            .                       .                    .                       .                    .           				_ASSERT((iTime >= 0) && (iTime < vecGlobalTimes[0].size()));
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Time %i (%s)", iTime, 
      .            .                       .                    .                       .                    .           					vecGlobalTimes[0][iTime].ToString().c_str());
      .            .                       .                    .                       .                    .           			} else {
      .            .                       .                    .                       .                    .           				_ASSERT((t >= 0) && (t < vecGlobalTimes[f].size()));//allow t = vecGlobalTimes[f].size())
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Time %i (%s)", iTime,
      0            0                  58,480 ( 0.00%)       2,924 ( 0.00%)         58,480 ( 0.00%)       2,924 ( 0.00%)  					vecGlobalTimes[f][t].ToString().c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Load the search variable data
      .            .                       .                    .                       .                    .           			Variable & var = varreg.Get(varix);
      .            .                       .                    .                       .                    .           			vecNcFiles.SetConstantTimeIx(t);
      0            0          15,181,843,788 (47.92%)     149,125 ( 0.04%) 15,179,319,384 (47.91%)     146,199 ( 0.04%)  			var.LoadGridData(varreg, vecNcFiles, grid);
      .            .                       .                    .                       .                    .           			const DataArray1D<float> & dataIndicator = var.GetData();
      .            .                       .                    .                       .                    .           /*
      .            .                       .                    .                       .                    .           			float dChecksum = 0.0;
      .            .                       .                    .                       .                    .           			for (int i = 0; i < dataState.GetRows(); i++) {
      .            .                       .                    .                       .                    .           				dChecksum += dataState[i];
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			std::cout << dChecksum << std::endl;
      .            .                       .                    .                       .                    .           */
-- line 2961 ----------------------------------------
-- line 3002 ----------------------------------------
      .            .                       .                    .                       .                    .           					setIndicators.insert(i);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Insert all detected locations into set
      .            .                       .                    .                       .                    .           			// (no bounds checking)
      .            .                       .                    .                       .                    .           			} else {
      .            .                       .                    .                       .                    .           				for (int i = 0; i < grid.GetSize(); i++) {
      .            .                       .                    .                       .                    .           					if (dataIndicator[i] != 0.0f) {
      0            0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)              0                    0           						setIndicators.insert(i);
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			Announce("Finding blobs (%i tagged points)", setIndicators.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Backup of original indicator set
      0            0               1,567,680 ( 0.00%)      39,192 ( 0.01%)              0                    0           			IndicatorSet setIndicatorsBackup = setIndicators;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Rejections due to insufficient node count
      .            .                       .                    .                       .                    .           			int nRejectedMinSize = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Rejections due to a given threshold
      .            .                       .                    .                       .                    .           			DataArray1D<int> nRejectedThreshold(vecThresholdOp.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Find all contiguous patches
      .            .                       .                    .                       .                    .           			for (; setIndicators.size() != 0;) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Next starting location
      .            .                       .                    .                       .                    .           				int ixNode = *(setIndicators.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Current patch
      .            .                       .                    .                       .                    .           				int ixBlob = vecBlobs.size();
      0            0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)       9,068 ( 0.00%)  				vecBlobs.resize(ixBlob+1);
      0            0               2,405,664 ( 0.01%)      11,992 ( 0.00%)      1,132,656 ( 0.00%)       9,068 ( 0.00%)  				vecBlobBoxesDeg.resize(ixBlob+1, LatLonBox<double>(fRegional));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				if (dMergeDistDeg > 0.0) {
      .            .                       .                    .                       .                    .           					vecBlobPerimeters.resize(ixBlob+1);
      .            .                       .                    .                       .                    .           					vecBlobTrees.resize(ixBlob+1);
      .            .                       .                    .                       .                    .           					vecBlobTrees[ixBlob] = kd_create(3);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Initialize bounding box
-- line 3043 ----------------------------------------
-- line 3045 ----------------------------------------
      .            .                       .                    .                       .                    .           				boxDeg.lat[0] = RadToDeg(grid.m_dLat[ixNode]);
      .            .                       .                    .                       .                    .           				boxDeg.lat[1] = RadToDeg(grid.m_dLat[ixNode]);
      .            .                       .                    .                       .                    .           				boxDeg.lon[0] = LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode]));
      .            .                       .                    .                       .                    .           				boxDeg.lon[1] = LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode]));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				//printf("=================================== BLOB %i\n", ixBlob);
      .            .                       .                    .                       .                    .           				// Find all connecting nodes in patch
      .            .                       .                    .                       .                    .           				IndicatorSet setNeighbors;
      0            0                 809,880 ( 0.00%)      20,247 ( 0.01%)              0                    0           				setNeighbors.insert(ixNode);
      .            .                       .                    .                       .                    .           				while (setNeighbors.size() != 0) {
      .            .                       .                    .                       .                    .           					ixNode = *(setNeighbors.begin());
      0            0                       0                    0           6,626,520,960 (20.91%) 165,663,024 (41.75%)  					setNeighbors.erase(setNeighbors.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// This node is already included in the blob
      .            .                       .                    .                       .                    .           					if (vecBlobs[ixBlob].find(ixNode) != vecBlobs[ixBlob].end()) {
      .            .                       .                    .                       .                    .           						//printf("..%i already in set\n", ixNode);
      .            .                       .                    .                       .                    .           						continue;
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// This node has not been tagged
      .            .                       .                    .                       .                    .           					IndicatorSetIterator iterIndicator = setIndicators.find(ixNode);
      .            .                       .                    .                       .                    .           					if (iterIndicator == setIndicators.end()) {
      .            .                       .                    .                       .                    .           						//printf("..%i has not been tagged\n", ixNode);
      .            .                       .                    .                       .                    .           						continue;
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Remove this from the set of available indicators
      0            0                       0                    0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)  					setIndicators.erase(iterIndicator);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Insert the node into the blob
      0            0           2,274,533,040 ( 7.18%)  56,863,326 (14.33%)              0                    0           					vecBlobs[ixBlob].insert(ixNode);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Update bounding box
      .            .                       .                    .                       .                    .           					boxDeg.insert(
      .            .                       .                    .                       .                    .           						RadToDeg(grid.m_dLat[ixNode]),
      .            .                       .                    .                       .                    .           						LonDegToStandardRange(RadToDeg(grid.m_dLon[ixNode])));
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           					// Insert neighbors
      .            .                       .                    .                       .                    .           					bool fPerimeter = false;
-- line 3083 ----------------------------------------
-- line 3090 ----------------------------------------
      .            .                       .                    .                       .                    .           						//} else {
      .            .                       .                    .                       .                    .           						//	printf("\n");
      .            .                       .                    .                       .                    .           						//}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           						// Perimeter point
      .            .                       .                    .                       .                    .           						if (setIndicatorsBackup.find(ixNeighbor) == setIndicatorsBackup.end()) {
      .            .                       .                    .                       .                    .           							fPerimeter = true;
      .            .                       .                    .                       .                    .           						} else {
      0            0           6,625,711,080 (20.91%) 165,642,777 (41.75%)              0                    0           							setNeighbors.insert(ixNeighbor);
      .            .                       .                    .                       .                    .           						}
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           					if (fPerimeter && (vecBlobPerimeters.size() != 0)) {
      .            .                       .                    .                       .                    .           						vecBlobPerimeters[ixBlob].insert(ixNode);
      .            .                       .                    .                       .                    .           						double dX, dY, dZ;
      .            .                       .                    .                       .                    .           						RLLtoXYZ_Rad(
      .            .                       .                    .                       .                    .           							grid.m_dLon[ixNode],
      .            .                       .                    .                       .                    .           							grid.m_dLat[ixNode],
      .            .                       .                    .                       .                    .           							dX, dY, dZ);
      .            .                       .                    .                       .                    .           						kd_insert3(vecBlobTrees[ixBlob], dX, dY, dZ, NULL);
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// setIndicatorsBackup no longer needed
      0            0                       0                    0             352,516,360 ( 1.11%)   8,812,909 ( 2.22%)  			setIndicatorsBackup.clear();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Merge blobs
      .            .                       .                    .                       .                    .           			if (vecBlobTrees.size() != 0) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				AnnounceStartBlock("Merging blobs (from %lu blobs)", vecBlobs.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				Announce("Building merge graph");
      .            .                       .                    .                       .                    .           
-- line 3122 ----------------------------------------
-- line 3310 ----------------------------------------
      .            .                       .                    .                       .                    .           						vecBlobBoxesDeg[p].lon[1]);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			AnnounceEndBlock(NULL);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0              16,515,120 ( 0.05%)       3,000 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           	// Stitch blobs together in time using graph search
      .            .                       .                    .                       .                    .           	///////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Assign local tags to each blob");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Tags for each blob at each time slice
      .            .                       .                    .                       .                    .           	std::vector< std::vector<Tag> > vecAllBlobTags;
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	vecAllBlobTags.resize(nGlobalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Next available patch tag
      .            .                       .                    .                       .                    .           	Tag tagNextBlob(1, 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Give blob tags to the initial set of blobs
      .            .                       .                    .                       .                    .           	std::set<Tag> setAllTags;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	for (int t = 0; t < nGlobalTimes; t++) {
      0            0                 242,964 ( 0.00%)       2,924 ( 0.00%)              0                    0           		vecAllBlobTags[t].resize(vecAllBlobs[t].size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		tagNextBlob.id = 0;
      .            .                       .                    .                       .                    .           		for (int p = 0; p < vecAllBlobTags[t].size(); p++) {
      .            .                       .                    .                       .                    .           			vecAllBlobTags[t][p] = tagNextBlob;
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           			setAllTags.insert(tagNextBlob);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			tagNextBlob.id++;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           		tagNextBlob.time++;
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	//================================Actual Parallization Starts===================================
      .            .                       .                    .                       .                    .           	//1. Exchang the vecAllBlobs; vecAllBlobTags; vecPrevBlobBoxesDeg; vecGlobalTimes
      .            .                       .                    .                       .                    .           	//==============================================================================================
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	//We still need the original unexchanged data for these two variables later
      0            0                     688 ( 0.00%)           3 ( 0.00%)              0                    0           	GlobalTimesExchangeOp MPI_exchangedGlobalTimes(MPI_REAL_COMM,vecGlobalTimes, processorResponsibalForFile_LB, processorResponsibalForFile_UB);//Declare here since it needs to be reverted later
      0            0                  70,656 ( 0.00%)          10 ( 0.00%)             64 ( 0.00%)           3 ( 0.00%)  	TagExchangeOP MPI_exchangedTags(MPI_REAL_COMM, vecAllBlobTags);
      0            0                  70,176 ( 0.00%)           1 ( 0.00%)              0                    0           	BlobsExchangeOp MPI_exchangedBlobs(MPI_REAL_COMM, vecAllBlobs);
      .            .                       .                    .                       .                    .           	if (nMPISize > 1 && valid_flag) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		//Exchange vecGlobalTimes (will be reverted after the connectivity graph is built)		
      .            .                       .                    .                       .                    .           		MPI_exchangedGlobalTimes.StartExchange();
      .            .                       .                    .                       .                    .           		MPI_exchangedGlobalTimes.EndExchange();
      .            .                       .                    .                       .                    .           		vecGlobalTimes = MPI_exchangedGlobalTimes.GetExchangedVecGlobalTimes();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		//Exchange vecAllBlobTags			
-- line 3372 ----------------------------------------
-- line 3433 ----------------------------------------
      .            .                       .                    .                       .                    .           					_ASSERT(iFileLocal < processorResponsibalForFile_UB);
      .            .                       .                    .                       .                    .           				#else
      .            .                       .                    .                       .                    .           					_ASSERT(iFileLocal < vecGlobalTimes.size());
      .            .                       .                    .                       .                    .           				#endif
      .            .                       .                    .                       .                    .           				
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			_ASSERT(iTimeLocal < vecGlobalTimes[iFileLocal].size());
      .            .                       .                    .                       .                    .           			Announce("Time %i (%s)", t,
      0            0                  58,460 ( 0.00%)       2,923 ( 0.00%)         58,460 ( 0.00%)       2,923 ( 0.00%)  				vecGlobalTimes[iFileLocal][iTimeLocal].ToString().c_str());
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Get the current blob vector
      .            .                       .                    .                       .                    .           		const std::vector<Tag> & vecPrevBlobTags = vecAllBlobTags[t-1];
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::vector<Tag> & vecBlobTags = vecAllBlobTags[t];
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		const std::vector<IndicatorSet> & vecPrevBlobs = vecAllBlobs[t-1];
-- line 3449 ----------------------------------------
-- line 3569 ----------------------------------------
      .            .                       .                    .                       .                    .           							setRestrictRegion.insert(vecBlobTags[p]);
      .            .                       .                    .                       .                    .           							break;
      .            .                       .                    .                       .                    .           						}
      .            .                       .                    .                       .                    .           					}
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Insert bidirectional edge in graph
      0            0               1,013,208 ( 0.00%)      18,093 ( 0.00%)              0                    0           				multimapTagGraph.insert(
      .            .                       .                    .                       .                    .           					std::pair<Tag, Tag>(
      .            .                       .                    .                       .                    .           						vecBlobTags[p], vecPrevBlobTags[q]));
      .            .                       .                    .                       .                    .           
      0            0               1,013,208 ( 0.00%)      18,093 ( 0.00%)              0                    0           				multimapTagGraph.insert(
      .            .                       .                    .                       .                    .           					std::pair<Tag, Tag>(
      .            .                       .                    .                       .                    .           						vecPrevBlobTags[q], vecBlobTags[p]));
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           	
-- line 3589 ----------------------------------------
-- line 3646 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		#endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::set<Tag> setTagsVisited;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		std::set<Tag> setTagsToVisit;
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           		setTagsToVisit.insert(*iterTag);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		Tag tagMinimum = *iterTag;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Check if this tag is already part of an explored component
      .            .                       .                    .                       .                    .           		if (mapEquivalentTags.find(*iterTag) != mapEquivalentTags.end()) {
      .            .                       .                    .                       .                    .           			continue;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
-- line 3662 ----------------------------------------
-- line 3674 ----------------------------------------
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Out of tags to visit; done
      .            .                       .                    .                       .                    .           			if (setTagsToVisit.size() == 0) {
      .            .                       .                    .                       .                    .           				break;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get next tag to visit
      .            .                       .                    .                       .                    .           			Tag tagNext = *(setTagsToVisit.begin());
      0            0                       0                    0               1,840,272 ( 0.01%)      38,339 ( 0.01%)  			setTagsToVisit.erase(setTagsToVisit.begin());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Verify we haven't visited this tag already
      .            .                       .                    .                       .                    .           			if (setTagsVisited.find(tagNext) != setTagsVisited.end()) {
      .            .                       .                    .                       .                    .           				continue;
      .            .                       .                    .                       .                    .           			}
      0            0                 971,856 ( 0.00%)      20,247 ( 0.01%)              0                    0           			setTagsVisited.insert(tagNext);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Check minimum tag
      .            .                       .                    .                       .                    .           			if (tagNext < tagMinimum) {
      .            .                       .                    .                       .                    .           				tagMinimum = tagNext;
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      0            0                 791,040 ( 0.00%)      19,776 ( 0.00%)              0                    0           			setBlobTimes.insert(tagNext.time);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			if (setRestrictRegion.find(tagNext) != setRestrictRegion.end()) {
      .            .                       .                    .                       .                    .           				setBlobTimesInRestrictRegion.insert(tagNext.time);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Get edges from this node
      .            .                       .                    .                       .                    .           			std::pair<MapGraphIterator, MapGraphIterator> iterGraphEdges
      .            .                       .                    .                       .                    .           				= multimapTagGraph.equal_range(tagNext);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			MapGraphIterator iter = iterGraphEdges.first;
      .            .                       .                    .                       .                    .           			for (; iter != iterGraphEdges.second; iter++) {
      0            0               1,736,256 ( 0.01%)      36,172 ( 0.01%)              0                    0           				setTagsToVisit.insert(iter->second);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Apply filters to the blob
      .            .                       .                    .                       .                    .           		bool fAcceptBlob = true;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Filter on RestrictRegion count for this global_id
      .            .                       .                    .                       .                    .           		if (opRestrictRegion.IsActive()) {
-- line 3715 ----------------------------------------
-- line 3747 ----------------------------------------
      .            .                       .                    .                       .                    .           		} else {
      .            .                       .                    .                       .                    .           			tagMinimum.global_id = 0;
      .            .                       .                    .                       .                    .           			nTotalBlobCount--;
      .            .                       .                    .                       .                    .           		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Refer all tags in component to minimum tag
      .            .                       .                    .                       .                    .           		std::set<Tag>::const_iterator iterTagsVisited = setTagsVisited.begin();
      .            .                       .                    .                       .                    .           		for (; iterTagsVisited != setTagsVisited.end(); iterTagsVisited++) {
      0            0               1,133,832 ( 0.00%)      20,247 ( 0.01%)              0                    0           			mapEquivalentTags.insert(
      .            .                       .                    .                       .                    .           				std::pair<Tag,Tag>(*iterTagsVisited, tagMinimum));
      .            .                       .                    .                       .                    .           		}
      0            0                       0                    0               2,517,496 ( 0.01%)      55,538 ( 0.01%)  	}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceEndBlock("Done");
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	// Merge blobs at each time step with equivalent tags
      .            .                       .                    .                       .                    .           	AnnounceStartBlock("Reassign blob tags");
      .            .                       .                    .                       .                    .           	for (int t = 0; t < nGlobalTimes; t++) {
      .            .                       .                    .                       .                    .           		#if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           			if (nMPIRank != 0) {
-- line 3766 ----------------------------------------
-- line 3921 ----------------------------------------
      .            .                       .                    .                       .                    .           				vecAllBlobTags = MPI_TagScatter.GetUnserialVecAllTags(0);
      .            .                       .                    .                       .                    .           				vecAllBlobs = MPI_exchangedBlobs.GetOriginalVecAllBlobs();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           		#endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Load in the benchmark file
      .            .                       .                    .                       .                    .           		NcFileVector vecNcFiles;
    121 ( 0.10%)   6 ( 0.48%)        759,244 ( 0.00%)         250 ( 0.00%)         75,108 ( 0.00%)         190 ( 0.00%)  		vecNcFiles.ParseFromString(vecInputFiles[0]);
      .            .                       .                    .                       .                    .           		_ASSERT(vecNcFiles.size() > 0);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		// Loop through all output files
      .            .                       .                    .                       .                    .           		_ASSERT(vecOutputFiles.size() == vecGlobalTimes.size());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		int iGlobalTimeIx = 0;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		for (int f = 0; f < vecOutputFiles.size(); f++) {
-- line 3937 ----------------------------------------
-- line 3945 ----------------------------------------
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			#endif //[Commented out for auto-complete, need to uncomment later]
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			Announce("Writing file \"%s\"", vecOutputFiles[f].c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Open output file
      0            0               2,881,896 ( 0.01%)       1,658 ( 0.00%)         24,816 ( 0.00%)         360 ( 0.00%)  			NcFile ncOutput(vecOutputFiles[f].c_str(), NcFile::Replace);
      .            .                       .                    .                       .                    .           			if (!ncOutput.is_valid()) {
      .            .                       .                    .                       .                    .           				_EXCEPTION1("Unable to open output file \"%s\"",
      .            .                       .                    .                       .                    .           					vecOutputFiles[f].c_str());
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Output time dimension
      .            .                       .                    .                       .                    .           			int nLocalTimes = vecGlobalTimes[f].size();
      .            .                       .                    .                       .                    .           
      0            0                   4,344 ( 0.00%)         216 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  			NcDim * dimOutputTime = ncOutput.add_dim("time", nLocalTimes);
      .            .                       .                    .                       .                    .           			if (dimOutputTime == NULL) {
      .            .                       .                    .                       .                    .           				_EXCEPTIONT("Unable to create dimension \"time\" in output");
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			NcVar * varOutputTime =
      0            0                 539,328 ( 0.00%)         528 ( 0.00%)            528 ( 0.00%)          48 ( 0.00%)  				ncOutput.add_var("time", ncDouble, dimOutputTime);
      .            .                       .                    .                       .                    .           
      0            0                  23,392 ( 0.00%)          24 ( 0.00%)              0                    0           			DataArray1D<double> dOutputTimes(nLocalTimes);
      .            .                       .                    .                       .                    .           			for (int t = 0; t < vecGlobalTimes[f].size(); t++) {
      .            .                       .                    .                       .                    .           				dOutputTimes[t] =
      0            0                  58,480 ( 0.00%)       2,924 ( 0.00%)         58,480 ( 0.00%)       2,924 ( 0.00%)  					vecGlobalTimes[f][t].GetCFCompliantUnitsOffsetDouble(strOutTimeUnits);
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      0            0                   3,432 ( 0.00%)         168 ( 0.00%)          1,128 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("long_name","time");
      0            0                   3,408 ( 0.00%)         168 ( 0.00%)            648 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("units",strOutTimeUnits.c_str());
      0            0                   3,384 ( 0.00%)         168 ( 0.00%)          1,008 ( 0.00%)          48 ( 0.00%)  			varOutputTime->add_att("calendar",vecGlobalTimes[f][0].GetCalendarName().c_str());
      .            .                       .                    .                       .                    .           
      0            0                     576 ( 0.00%)          96 ( 0.00%)         14,400 ( 0.00%)         120 ( 0.00%)  			varOutputTime->put(&(dOutputTimes[0]), nLocalTimes);
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Create output variable
      .            .                       .                    .                       .                    .           			NcDim * dimOut0 = NULL;
      .            .                       .                    .                       .                    .           			NcDim * dimOut1 = NULL;
      .            .                       .                    .                       .                    .           			NcVar * varTagOut = NULL;
      .            .                       .                    .                       .                    .           
  6,912 ( 5.85%) 336 (26.77%)      2,087,448 ( 0.01%)       4,128 ( 0.00%)        450,288 ( 0.00%)       2,592 ( 0.00%)  			PrepareBlobOutputVar(
      .            .                       .                    .                       .                    .           				*(vecNcFiles[0]),
      .            .                       .                    .                       .                    .           				ncOutput,
      .            .                       .                    .                       .                    .           				vecOutputFiles[f],
      .            .                       .                    .                       .                    .           				grid,
      .            .                       .                    .                       .                    .           				strOutputVariable,
      .            .                       .                    .                       .                    .           				strLatitudeName,
      .            .                       .                    .                       .                    .           				strLongitudeName,
      .            .                       .                    .                       .                    .           				ncInt,
-- line 3994 ----------------------------------------
-- line 4005 ----------------------------------------
      .            .                       .                    .                       .                    .           			if (dimOut0 != NULL) {
      .            .                       .                    .                       .                    .           				nDimOutSize0 = dimOut0->size();
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           			if (dimOut1 != NULL) {
      .            .                       .                    .                       .                    .           				nDimOutSize1 = dimOut1->size();
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Write all time steps
      0            0              99,671,040 ( 0.31%)          24 ( 0.00%)              0                    0           			DataArray1D<int> dataBlobTag(grid.GetSize());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			for (int t = 0; t < nLocalTimes; t++) {
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				dataBlobTag.Zero();
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				_ASSERT(iGlobalTimeIx + t < vecAllBlobTags.size());
      .            .                       .                    .                       .                    .           				_ASSERT(iGlobalTimeIx + t < vecAllBlobs.size());
      .            .                       .                    .                       .                    .           	
-- line 4021 ----------------------------------------
-- line 4046 ----------------------------------------
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           				// Write to file
      .            .                       .                    .                       .                    .           				if (grid.DimCount() == 1) {
      .            .                       .                    .                       .                    .           					varTagOut->set_cur(t, 0);
      .            .                       .                    .                       .                    .           					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0);
      .            .                       .                    .                       .                    .           				} else {
      .            .                       .                    .                       .                    .           					varTagOut->set_cur(t, 0);
      0            0                  74,416 ( 0.00%)      11,845 ( 0.00%)      1,734,752 ( 0.01%)      11,816 ( 0.00%)  					varTagOut->put(&(dataBlobTag[0]), 1, nDimOutSize0, nDimOutSize1);
      .            .                       .                    .                       .                    .           				}
      .            .                       .                    .                       .                    .           			}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Update global time index
      .            .                       .                    .                       .                    .           			iGlobalTimeIx += nLocalTimes;
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           			// Close the output file
      0            0                       0                    0               5,046,480 ( 0.02%)       4,632 ( 0.00%)  			ncOutput.close();
      .            .                       .                    .                       .                    .           
      0            0                       0                    0              99,694,432 ( 0.31%)          48 ( 0.00%)  		}
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		AnnounceEndBlock("Done");
      0            0                       0                    0                 688,130 ( 0.00%)         125 ( 0.00%)  	}
      .            .                       .                    .                       .                    .           /*
      .            .                       .                    .                       .                    .           	// Copy variable attributes from first input file
      .            .                       .                    .                       .                    .           	{
      .            .                       .                    .                       .                    .           		NcFile ncInput(vecInputFiles[0].c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           		NcVar * varLat = ncInput.get_var(strLatitudeName.c_str());
      .            .                       .                    .                       .                    .           		NcVar * varLon = ncInput.get_var(strLongitudeName.c_str());
      .            .                       .                    .                       .                    .           
-- line 4075 ----------------------------------------
-- line 4128 ----------------------------------------
      .            .                       .                    .                       .                    .           		// Write to file
      .            .                       .                    .                       .                    .           		varData->set_cur(t, 0, 0);
      .            .                       .                    .                       .                    .           		varData->put(&(dataBlobTag[0][0]), 1, nLat, nLon);
      .            .                       .                    .                       .                    .           	}
      .            .                       .                    .                       .                    .           */
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           	AnnounceBanner();
      .            .                       .                    .                       .                    .           
      0            0                       0                    0              75,682,043 ( 0.24%)   1,062,604 ( 0.27%)  } catch(Exception & e) {
      .            .                       .                    .                       .                    .           	Announce(e.ToString().c_str());
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           	MPI_Abort(MPI_COMM_WORLD, 1);
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           }
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           #if defined(TEMPEST_MPIOMP)
      .            .                       .                    .                       .                    .           	// Deinitialize MPI
      0            0              40,719,069 ( 0.13%)         440 ( 0.00%)     64,849,676 ( 0.20%)       3,759 ( 0.00%)  	MPI_Finalize();
      .            .                       .                    .                       .                    .           #endif
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           }
      .            .                       .                    .                       .                    .           
      .            .                       .                    .                       .                    .           ///////////////////////////////////////////////////////////////////////////////
      .            .                       .                    .                       .                    .           

--------------------------------------------------------------------------------
curB             curBk          totB                    totBk                totFdB                  totFdBk              
--------------------------------------------------------------------------------
118,231 (100.0%) 1,255 (100.0%) 26,660,719,516 (84.14%) 282,935,089 (71.31%) 24,739,649,794 (78.08%) 234,791,317 (59.18%)  events annotated

